{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Linux-Kernel-编译调试.md","hash":"49ee448e1f6d51dcf79c9a8cd0f9ed71815e4f76","modified":1637771953107},{"_id":"source/_posts/huawei-adb.md","hash":"228d321442afaf0e22f2fbdf09d10215a7463257","modified":1638637567319},{"_id":"source/_posts/linux-system-programming.md","hash":"21343f3d8de3c0b401c9950dfe2f7ffd7e380816","modified":1637416670249},{"_id":"source/_posts/常用位运算.md","hash":"7e1204a0f9b240e7a7888fae7284c691b651943f","modified":1638689399409},{"_id":"source/categories/index.md","hash":"8e2d32c6571cc7a429127391bd1e33a1c3abc7fc","modified":1637416670249},{"_id":"source/tags/index.md","hash":"1fc2f9954bc72e1ed7ddba2779c6ccb12dcee5f3","modified":1637416670249},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1637416670249},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1637416670249},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1637416670249},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1637416670249},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1637416670249},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1637416670249},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1637416670253},{"_id":"themes/next/_config.yml","hash":"887453b732fdc38f8a4ec72eada90da793bde254","modified":1637416670249},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1637416670249},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1637416670249},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1637416670249},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1637416670249},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1637416670249},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1637416670249},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1637416670249},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1637416670249},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1637416670249},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1637416670249},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1637416670249},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1637416670249},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1637416670249},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1637416670249},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1637416670249},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1637416670249},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1637416670249},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1637416670249},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1637416670249},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1637416670253},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1637416670253},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1637416670253},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1637416670249},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1637416670253},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1637416670253},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1637416670253},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1637416670253},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1637416670249},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1637416670249},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1637416670249},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1637416670249},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1637416670249},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1637416670249},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1637416670249},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1637416670253},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1637416670253},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1637416670253},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1637416670253},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1637416670253},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1637416670253},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1637416670253},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1637416670253},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1637416670253},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1637416670249},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1637416670253},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1637416670249},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1637416670253},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1637416670249},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1637416670253},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1637416670253},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1637416670253},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1637416670253},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1637416670253},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1637416670253},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1637416670253},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1637416670253},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1637416670253},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1637416670253},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1637416670253},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1637416670253},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1637416670253},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1637416670253},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1637416670253},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1637416670253},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1637416670253},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1637416670253},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1637416670256},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1637416670256},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1637416670256},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1637416670253},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1637416670256},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1637416670256},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1637416670256},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1637416670256},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1637416670256},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1637416670256},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1637416670256},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1637416670256},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1637416670256},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1637416670256},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1637416670249},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1637416670256},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1637416670249},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1637416670249},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1637416670249},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1637416670249},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1637416670249},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1637416670249},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1637416670249},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1637416670249},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1637416670249},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1637416670249},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1637416670249},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1637416670256},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1637416670256},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1637416670253},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1637416670253},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1637416670253},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1637416670253},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1637416670253},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1637416670253},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1637416670253},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1637416670253},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1637416670253},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1637416670253},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1637416670253},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1637416670249},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1637416670253},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1637416670253},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1637416670253},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1637416670253},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1637416670253},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1637416670253},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1637416670253},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1637416670253},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1637416670253},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1637416670253},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1637416670253},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1637416670256},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1637416670256},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1637416670253},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1637416670256},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1637416670253},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1637416670256},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1637416670253},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1637416670256},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1637416670256},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1637416670253},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1637416670256},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1637416670253},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1637416670256},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1637416670253},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1637416670256},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1637416670256},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1637416670256},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1637416670253},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1637416670256},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1637416670253},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1637416670256},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1637416670256},{"_id":"public/tags/index.html","hash":"63f8cf4652d5128087217ad5e7d49a1e9cd7af28","modified":1638689502802},{"_id":"public/categories/index.html","hash":"04b9fee2a9078588b3b179388591a2f6fe200b0d","modified":1638689502802},{"_id":"public/archives/index.html","hash":"f141d09bad5fa5752d9ab72507b37124c444dfc3","modified":1638689502802},{"_id":"public/archives/2021/index.html","hash":"f651199b5e9ba5adfc2519d5c99e03a09a4bf5fe","modified":1638689502802},{"_id":"public/archives/2021/11/index.html","hash":"1aa7d393ce37d137ea22fe55fdcdd3e8539f028f","modified":1638689502802},{"_id":"public/archives/2021/12/index.html","hash":"6a08ae265a3f78e8ac940f0980b1c734983f834e","modified":1638689502802},{"_id":"public/tags/adb/index.html","hash":"f9f45562bf553920b753337791fd12116447a666","modified":1638689502802},{"_id":"public/tags/Linux/index.html","hash":"43ec46348aa5d0d821f272c286a2370184aa16e8","modified":1638689502802},{"_id":"public/tags/gdb/index.html","hash":"ba804384bb6efe4992d52e4ec41d8149fc943535","modified":1638689502802},{"_id":"public/tags/C/index.html","hash":"51e5711f7e03e12c86a616bb93dac469f1dadc82","modified":1638689502802},{"_id":"public/tags/bit-op/index.html","hash":"75a9ba583e8801fed2139b4b5a55984595e4f648","modified":1638689502802},{"_id":"public/tags/c-cpp/index.html","hash":"8b90dbb84463c171c9f0c1f8ab88b418987d14a2","modified":1638689502802},{"_id":"public/categories/Linux编程/index.html","hash":"8f4a886cdcdf47351d39a735898fd617ce999e6b","modified":1638689502802},{"_id":"public/2021/12/05/常用位运算/index.html","hash":"b22dad7d58efec6e5b825f4b2078a30405b91ffa","modified":1638689502802},{"_id":"public/2021/12/05/huawei-adb/index.html","hash":"dff56f662994ba484277291e9dd38bd3aca505eb","modified":1638689502802},{"_id":"public/2021/11/24/Linux-Kernel-编译调试/index.html","hash":"d2aeffb99c3decaea6524770bf28685774e9786a","modified":1638689502802},{"_id":"public/2021/11/20/linux-system-programming/index.html","hash":"7d50e38e1199cd673d751e23d99d18b4671f6911","modified":1638689502802},{"_id":"public/index.html","hash":"ffbfb3c81395babaf5d5d976d115530506998156","modified":1638689502802},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1638689502802},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1638689502802},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1638689502802},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1638689502802},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1638689502802},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1638689502802},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1638689502802},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1638689502802},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1638689502802},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1638689502802},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1638689502802},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1638689502802},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1638689502802},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1638689502802},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1638689502802},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1638689502802},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1638689502802},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1638689502802},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1638689502802},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1638689502802},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1638689502802},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1638689502802},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1638689502802},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1638689502802},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1638689502802},{"_id":"public/css/main.css","hash":"ccc6130df1b08edf0ee4d40e7d380ef36f3f1648","modified":1638689502802},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1638689502802},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1638689502802},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1638689502802}],"Category":[{"name":"Linux编程","_id":"ckwsxf4t800075z9y31b29dqk"}],"Data":[],"Page":[{"title":"categories","date":"2021-11-20T11:33:51.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-11-20 19:33:51\ntype: \"categories\"\n---\n","updated":"2021-11-20T13:57:50.249Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckwsxf4sw00005z9y61dn3zxl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-11-20T11:34:15.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-11-20 19:34:15\ntype: \"tags\"\n---\n","updated":"2021-11-20T13:57:50.249Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckwsxf4t100025z9yad1m1aa4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"huawei adb","date":"2021-12-04T17:03:46.000Z","_content":"\n\n\n## 环境\n* 系统:Manjaro\n* 桌面:GNOME\n\n## ADB链接手机\nUSB连接具体的解决办法如下：\n\n### 1、打开拨号界面,输入: `*#*#2846579#*#*`。自动进入工程菜单,选择后台设置——>usb端口设置——>生产模式.\n\n### 2、打开调试\n\n设置--系统和更新--开发者选项--打开调试.\n\n### 3、USB连接方式\n\n选择传输文件\n\n### 4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\n\n### 5、回到adb命令下查看是否已经连接上了\n```bash\nadb devices\n```\n","source":"_posts/huawei-adb.md","raw":"---\ntitle: huawei adb \ndate: 2021-12-05 01:03:46\ntags:\n    - adb\n---\n\n\n\n## 环境\n* 系统:Manjaro\n* 桌面:GNOME\n\n## ADB链接手机\nUSB连接具体的解决办法如下：\n\n### 1、打开拨号界面,输入: `*#*#2846579#*#*`。自动进入工程菜单,选择后台设置——>usb端口设置——>生产模式.\n\n### 2、打开调试\n\n设置--系统和更新--开发者选项--打开调试.\n\n### 3、USB连接方式\n\n选择传输文件\n\n### 4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\n\n### 5、回到adb命令下查看是否已经连接上了\n```bash\nadb devices\n```\n","slug":"huawei-adb","published":1,"updated":"2021-12-04T17:06:07.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwsxf4sy00015z9yf30kdodc","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>系统:Manjaro</li>\n<li>桌面:GNOME</li>\n</ul>\n<h2 id=\"ADB链接手机\"><a href=\"#ADB链接手机\" class=\"headerlink\" title=\"ADB链接手机\"></a>ADB链接手机</h2><p>USB连接具体的解决办法如下：</p>\n<h3 id=\"1、打开拨号界面-输入-2846579-。自动进入工程菜单-选择后台设置——-gt-usb端口设置——-gt-生产模式\"><a href=\"#1、打开拨号界面-输入-2846579-。自动进入工程菜单-选择后台设置——-gt-usb端口设置——-gt-生产模式\" class=\"headerlink\" title=\"1、打开拨号界面,输入: *#*#2846579#*#*。自动进入工程菜单,选择后台设置——&gt;usb端口设置——&gt;生产模式.\"></a>1、打开拨号界面,输入: <code>*#*#2846579#*#*</code>。自动进入工程菜单,选择后台设置——&gt;usb端口设置——&gt;生产模式.</h3><h3 id=\"2、打开调试\"><a href=\"#2、打开调试\" class=\"headerlink\" title=\"2、打开调试\"></a>2、打开调试</h3><p>设置–系统和更新–开发者选项–打开调试.</p>\n<h3 id=\"3、USB连接方式\"><a href=\"#3、USB连接方式\" class=\"headerlink\" title=\"3、USB连接方式\"></a>3、USB连接方式</h3><p>选择传输文件</p>\n<h3 id=\"4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\"><a href=\"#4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\" class=\"headerlink\" title=\"4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\"></a>4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备</h3><h3 id=\"5、回到adb命令下查看是否已经连接上了\"><a href=\"#5、回到adb命令下查看是否已经连接上了\" class=\"headerlink\" title=\"5、回到adb命令下查看是否已经连接上了\"></a>5、回到adb命令下查看是否已经连接上了</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>系统:Manjaro</li>\n<li>桌面:GNOME</li>\n</ul>\n<h2 id=\"ADB链接手机\"><a href=\"#ADB链接手机\" class=\"headerlink\" title=\"ADB链接手机\"></a>ADB链接手机</h2><p>USB连接具体的解决办法如下：</p>\n<h3 id=\"1、打开拨号界面-输入-2846579-。自动进入工程菜单-选择后台设置——-gt-usb端口设置——-gt-生产模式\"><a href=\"#1、打开拨号界面-输入-2846579-。自动进入工程菜单-选择后台设置——-gt-usb端口设置——-gt-生产模式\" class=\"headerlink\" title=\"1、打开拨号界面,输入: *#*#2846579#*#*。自动进入工程菜单,选择后台设置——&gt;usb端口设置——&gt;生产模式.\"></a>1、打开拨号界面,输入: <code>*#*#2846579#*#*</code>。自动进入工程菜单,选择后台设置——&gt;usb端口设置——&gt;生产模式.</h3><h3 id=\"2、打开调试\"><a href=\"#2、打开调试\" class=\"headerlink\" title=\"2、打开调试\"></a>2、打开调试</h3><p>设置–系统和更新–开发者选项–打开调试.</p>\n<h3 id=\"3、USB连接方式\"><a href=\"#3、USB连接方式\" class=\"headerlink\" title=\"3、USB连接方式\"></a>3、USB连接方式</h3><p>选择传输文件</p>\n<h3 id=\"4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\"><a href=\"#4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\" class=\"headerlink\" title=\"4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\"></a>4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备</h3><h3 id=\"5、回到adb命令下查看是否已经连接上了\"><a href=\"#5、回到adb命令下查看是否已经连接上了\" class=\"headerlink\" title=\"5、回到adb命令下查看是否已经连接上了\"></a>5、回到adb命令下查看是否已经连接上了</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux Kernel 编译调试（Qemu + gdb）","date":"2021-11-24T14:03:26.000Z","_content":"\n## 编译环境\n\n```bash\n\n ██████████████████  ████████     4soos@dev\n ██████████████████  ████████     OS: Manjaro 21.2.0 Qonos\n ██████████████████  ████████     Kernel: x86_64 Linux 5.10.79-1-MANJARO\n ██████████████████  ████████     Uptime: 19m\n ████████            ████████     Packages: 1324\n ████████  ████████  ████████     Shell: bash 5.1.8\n ████████  ████████  ████████     Resolution: 2560x1440\n ████████  ████████  ████████     DE: GNOME 41.1\n ████████  ████████  ████████     WM: Mutter\n ████████  ████████  ████████     WM Theme: \n ████████  ████████  ████████     GTK Theme: Matcha-dark-pueril [GTK2/3]\n ████████  ████████  ████████     Icon Theme: Papirus-Adapta-Maia\n ████████  ████████  ████████     Font: Noto Sans 12\n ████████  ████████  ████████     Disk: 150G / 946G (17%)\n                                  CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz\n                                  GPU: AMD RENOIR (DRM 3.40.0, 5.10.79-1-MANJARO, LLVM 13.0.0)\n                                  RAM: 2030MiB / 15453MiB\n\n```\n\n## 源码： \n\nhttps://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz\n\n\n## 工具集\n```bash\nyay -S base-devel\n```\n\n## 编译步骤\n```bash\nmake menuconfig # 内核配置， 可以默认配置\n\nmake -j$(nproc) # -j job 一般为线程数\n\n......\n\narch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x6455b190)\nKernel: arch/x86/boot/bzImage is ready  (#1)\n\n```\n编好之后的产物为 `arch/x86/boot/bzImage`。\n\n## rootfs 和文件系统简介\n\n`rootfs`是基于内存的文件系统，所有操作都在内存中完成；也没有实际的存储设备，所以不需要设备驱动程序的参与。\n基于以上原因，linux在启动阶段使用`rootfs`文件系统，当磁盘驱动程序和磁盘文件系统成功加载后，linux系统会将系统根目录从`rootfs`切换到磁盘文件系统。\n\n大致的启动流程\n\n```\nstart_kernel\n　　vfs_caches_init\n　　　　mnt_init\n　　　　　　init_rootfs注册rootfs文件系统\n　　　　　　init_mount_tree 挂载rootfs文件系统\n　　　　　　　　vfs_kern_mount\n　　　　　　　　　　mount_fs\n　　　　　　　　　　　　type->mount其实是rootfs_mount\n　　　　　　　　　　　　　　mount_nodev\n　　　　　　　　　　　　　　　　fill_super 其实是ramfs_fill_super\n　　　　　　　　　　　　　　　　　　inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi->mount_opts.mode, 0);\n　　　　　　　　　　　　　　　　　　sb->s_root = d_make_root(inode);\n　　　　　　　　　　　　　　　　　　　　static const struct qstr name = QSTR_INIT(“/”, 1);[1*]\n　　　　　　　　　　　　　　　　　　　　__d_alloc(root_inode->i_sb, &name);\n　　　　　　　　　　…\n　　　　　　　　　　mnt->mnt.mnt_root = root;[2*]\n　　　　　　　　　　mnt->mnt.mnt_sb = root->d_sb;[3*]\n　　　　　　　　　　mnt->mnt_mountpoint = mnt->mnt.mnt_root;[4*]\n　　　　　　　　　　mnt->mnt_parent = mnt;[5*]\nroot.mnt = mnt;\n　　　　　　　　root.dentry = mnt->mnt_root;\n　　　　　　　　mnt->mnt_flags |= MNT_LOCKED;\n　　　　　　　　set_fs_pwd(current->fs, &root);\n　　　　　　　　set_fs_root(current->fs, &root);\n　　…\n　　rest_init\n　　kernel_thread(kernel_init, NULL, CLONE_FS);\n\n```\n正常来说，根文件系统至少包括以下目录：\n\n* /etc/：存储重要的配置文件。\n\n* /bin/：存储常用且开机时必须用到的执行文件。\n\n* /sbin/：存储着开机过程中所需的系统执行文件。\n\n* /lib/：存储/bin/及/sbin/的执行文件所需的链接库，以及Linux的内核模块。\n\n* /dev/：存储设备文件。\n\n> 以上列举出的目录必须存储在根文件系统上，缺一不可。\n\n* /proc\n\n这是一个空目录，常作为proc文件系统的挂接点，proc文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。\n\n### 制作一个临时的rootfs\n```bash\ntouch main.c\nvim main.c\n```\n\n#### 代码\n\n```c\n#include <stdio.h>\n\nint main()\n{\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    fflush(stdout);\n    while(1) {\n        printf(\"linux-5.14 > \\n\");\n    };\n    return 0;\n}\n\n```\n\n#### 生成rootfs\n\n```bash\ngcc --static -o hello_kernel main.c\necho hello_kernel | cpio -o --format=newc > rootfs\n```\n\n#### QEMU 启动\n```bash\nqemu-system-x86_64 \\\n> -kernel ./arch/x86/boot/bzImage \\\n> -initrd ./rootfs \\\n> -append \"root=/dev/ram rdinit=hello_kernel\" \\\n> -smp 2 \\\n> -s -S\n\n```\n这时的Qemu 会进入等待状态, \n\n#### GDB 启动\n```\ngdb ./vmlinux\n......\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from ./vmlinux...\n(gdb) target remote:1234\nRemote debugging using :1234\n0x000000000000fff0 in exception_stacks ()\n(gdb) b start_kernel\nBreakpoint 1 at 0xfff0\n(gdb) c\nContinuing.\n\n```\n\n_target remote:1234_， gdb 连接上qemu,\n\n_b start_kernel_， 设置断点： `start_kernel`\n\n_c_， 继续执行：\n\n\n##  VS Code 上面调试\n\n需要安装好gdb插件\n然后, 三个配置文件：\n\nc_cpp_properties.json\n\n```json\n{\n    \"configurations\": [\n        {\n            \"name\": \"Linux kernel\",\n            \"cStandard\": \"c11\",\n            \"intelliSenseMode\": \"linux-clang-x64\",\n            \"compileCommands\": \"${}/compile_commands.json\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\nlaunch.json\n\n```json\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n\n        {\n            \"name\": \"(gdb) Launch\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"qemu\",\n            \"miDebuggerServerAddress\":\"127.0.0.1:1234\",\n            \"program\": \"${workspaceFolder}/vmlinux\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${fileDirname}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ]\n        }\n    ]\n}\n```\n\ntasks.json\n```json\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n      {\n        \"label\": \"qemu\",\n        \"type\": \"shell\",\n        \"command\": \"qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ./rootfs -append \\\"root=/dev/ram rdinit=hello_kernel\\\" -smp 2 -s -S\",\n        \"presentation\": {\n          \"echo\": true,\n          \"clear\": true,\n          \"group\": \"qemu\"\n        },\n        \"isBackground\": true,\n        \"problemMatcher\": [\n          {\n            \"pattern\": [\n              {\n                \"regexp\": \".\",\n                \"file\": 1,\n                \"location\": 2,\n                \"message\": 3\n              }\n            ],\n            \"background\": {\n              \"activeOnStart\": true,\n              \"beginsPattern\": \".\",\n              \"endsPattern\": \".\"\n            }\n          }\n        ]\n      },\n      {\n        \"label\": \"build\",\n        \"type\": \"shell\",\n        \"command\": \"make\",\n        \"group\": {\n          \"kind\": \"build\",\n          \"isDefault\": true\n        },\n        \"presentation\": {\n          \"echo\": false,\n          \"group\": \"build\"\n        }\n      }\n    ]\n  }\n```\n\n\n","source":"_posts/Linux-Kernel-编译调试.md","raw":"---\ntitle: Linux Kernel 编译调试（Qemu + gdb）\ndate: 2021-11-24 22:03:26\ntags:\n    - Linux\n    - gdb\n---\n\n## 编译环境\n\n```bash\n\n ██████████████████  ████████     4soos@dev\n ██████████████████  ████████     OS: Manjaro 21.2.0 Qonos\n ██████████████████  ████████     Kernel: x86_64 Linux 5.10.79-1-MANJARO\n ██████████████████  ████████     Uptime: 19m\n ████████            ████████     Packages: 1324\n ████████  ████████  ████████     Shell: bash 5.1.8\n ████████  ████████  ████████     Resolution: 2560x1440\n ████████  ████████  ████████     DE: GNOME 41.1\n ████████  ████████  ████████     WM: Mutter\n ████████  ████████  ████████     WM Theme: \n ████████  ████████  ████████     GTK Theme: Matcha-dark-pueril [GTK2/3]\n ████████  ████████  ████████     Icon Theme: Papirus-Adapta-Maia\n ████████  ████████  ████████     Font: Noto Sans 12\n ████████  ████████  ████████     Disk: 150G / 946G (17%)\n                                  CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz\n                                  GPU: AMD RENOIR (DRM 3.40.0, 5.10.79-1-MANJARO, LLVM 13.0.0)\n                                  RAM: 2030MiB / 15453MiB\n\n```\n\n## 源码： \n\nhttps://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz\n\n\n## 工具集\n```bash\nyay -S base-devel\n```\n\n## 编译步骤\n```bash\nmake menuconfig # 内核配置， 可以默认配置\n\nmake -j$(nproc) # -j job 一般为线程数\n\n......\n\narch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x6455b190)\nKernel: arch/x86/boot/bzImage is ready  (#1)\n\n```\n编好之后的产物为 `arch/x86/boot/bzImage`。\n\n## rootfs 和文件系统简介\n\n`rootfs`是基于内存的文件系统，所有操作都在内存中完成；也没有实际的存储设备，所以不需要设备驱动程序的参与。\n基于以上原因，linux在启动阶段使用`rootfs`文件系统，当磁盘驱动程序和磁盘文件系统成功加载后，linux系统会将系统根目录从`rootfs`切换到磁盘文件系统。\n\n大致的启动流程\n\n```\nstart_kernel\n　　vfs_caches_init\n　　　　mnt_init\n　　　　　　init_rootfs注册rootfs文件系统\n　　　　　　init_mount_tree 挂载rootfs文件系统\n　　　　　　　　vfs_kern_mount\n　　　　　　　　　　mount_fs\n　　　　　　　　　　　　type->mount其实是rootfs_mount\n　　　　　　　　　　　　　　mount_nodev\n　　　　　　　　　　　　　　　　fill_super 其实是ramfs_fill_super\n　　　　　　　　　　　　　　　　　　inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi->mount_opts.mode, 0);\n　　　　　　　　　　　　　　　　　　sb->s_root = d_make_root(inode);\n　　　　　　　　　　　　　　　　　　　　static const struct qstr name = QSTR_INIT(“/”, 1);[1*]\n　　　　　　　　　　　　　　　　　　　　__d_alloc(root_inode->i_sb, &name);\n　　　　　　　　　　…\n　　　　　　　　　　mnt->mnt.mnt_root = root;[2*]\n　　　　　　　　　　mnt->mnt.mnt_sb = root->d_sb;[3*]\n　　　　　　　　　　mnt->mnt_mountpoint = mnt->mnt.mnt_root;[4*]\n　　　　　　　　　　mnt->mnt_parent = mnt;[5*]\nroot.mnt = mnt;\n　　　　　　　　root.dentry = mnt->mnt_root;\n　　　　　　　　mnt->mnt_flags |= MNT_LOCKED;\n　　　　　　　　set_fs_pwd(current->fs, &root);\n　　　　　　　　set_fs_root(current->fs, &root);\n　　…\n　　rest_init\n　　kernel_thread(kernel_init, NULL, CLONE_FS);\n\n```\n正常来说，根文件系统至少包括以下目录：\n\n* /etc/：存储重要的配置文件。\n\n* /bin/：存储常用且开机时必须用到的执行文件。\n\n* /sbin/：存储着开机过程中所需的系统执行文件。\n\n* /lib/：存储/bin/及/sbin/的执行文件所需的链接库，以及Linux的内核模块。\n\n* /dev/：存储设备文件。\n\n> 以上列举出的目录必须存储在根文件系统上，缺一不可。\n\n* /proc\n\n这是一个空目录，常作为proc文件系统的挂接点，proc文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。\n\n### 制作一个临时的rootfs\n```bash\ntouch main.c\nvim main.c\n```\n\n#### 代码\n\n```c\n#include <stdio.h>\n\nint main()\n{\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    fflush(stdout);\n    while(1) {\n        printf(\"linux-5.14 > \\n\");\n    };\n    return 0;\n}\n\n```\n\n#### 生成rootfs\n\n```bash\ngcc --static -o hello_kernel main.c\necho hello_kernel | cpio -o --format=newc > rootfs\n```\n\n#### QEMU 启动\n```bash\nqemu-system-x86_64 \\\n> -kernel ./arch/x86/boot/bzImage \\\n> -initrd ./rootfs \\\n> -append \"root=/dev/ram rdinit=hello_kernel\" \\\n> -smp 2 \\\n> -s -S\n\n```\n这时的Qemu 会进入等待状态, \n\n#### GDB 启动\n```\ngdb ./vmlinux\n......\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from ./vmlinux...\n(gdb) target remote:1234\nRemote debugging using :1234\n0x000000000000fff0 in exception_stacks ()\n(gdb) b start_kernel\nBreakpoint 1 at 0xfff0\n(gdb) c\nContinuing.\n\n```\n\n_target remote:1234_， gdb 连接上qemu,\n\n_b start_kernel_， 设置断点： `start_kernel`\n\n_c_， 继续执行：\n\n\n##  VS Code 上面调试\n\n需要安装好gdb插件\n然后, 三个配置文件：\n\nc_cpp_properties.json\n\n```json\n{\n    \"configurations\": [\n        {\n            \"name\": \"Linux kernel\",\n            \"cStandard\": \"c11\",\n            \"intelliSenseMode\": \"linux-clang-x64\",\n            \"compileCommands\": \"${}/compile_commands.json\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\nlaunch.json\n\n```json\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n\n        {\n            \"name\": \"(gdb) Launch\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"qemu\",\n            \"miDebuggerServerAddress\":\"127.0.0.1:1234\",\n            \"program\": \"${workspaceFolder}/vmlinux\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${fileDirname}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ]\n        }\n    ]\n}\n```\n\ntasks.json\n```json\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n      {\n        \"label\": \"qemu\",\n        \"type\": \"shell\",\n        \"command\": \"qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ./rootfs -append \\\"root=/dev/ram rdinit=hello_kernel\\\" -smp 2 -s -S\",\n        \"presentation\": {\n          \"echo\": true,\n          \"clear\": true,\n          \"group\": \"qemu\"\n        },\n        \"isBackground\": true,\n        \"problemMatcher\": [\n          {\n            \"pattern\": [\n              {\n                \"regexp\": \".\",\n                \"file\": 1,\n                \"location\": 2,\n                \"message\": 3\n              }\n            ],\n            \"background\": {\n              \"activeOnStart\": true,\n              \"beginsPattern\": \".\",\n              \"endsPattern\": \".\"\n            }\n          }\n        ]\n      },\n      {\n        \"label\": \"build\",\n        \"type\": \"shell\",\n        \"command\": \"make\",\n        \"group\": {\n          \"kind\": \"build\",\n          \"isDefault\": true\n        },\n        \"presentation\": {\n          \"echo\": false,\n          \"group\": \"build\"\n        }\n      }\n    ]\n  }\n```\n\n\n","slug":"Linux-Kernel-编译调试","published":1,"updated":"2021-11-24T16:39:13.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwsxf4t100035z9yamg1391z","content":"<h2 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">██████████████████  ████████     4soos@dev</span><br><span class=\"line\">██████████████████  ████████     OS: Manjaro 21.2.0 Qonos</span><br><span class=\"line\">██████████████████  ████████     Kernel: x86_64 Linux 5.10.79-1-MANJARO</span><br><span class=\"line\">██████████████████  ████████     Uptime: 19m</span><br><span class=\"line\">████████            ████████     Packages: 1324</span><br><span class=\"line\">████████  ████████  ████████     Shell: bash 5.1.8</span><br><span class=\"line\">████████  ████████  ████████     Resolution: 2560x1440</span><br><span class=\"line\">████████  ████████  ████████     DE: GNOME 41.1</span><br><span class=\"line\">████████  ████████  ████████     WM: Mutter</span><br><span class=\"line\">████████  ████████  ████████     WM Theme: </span><br><span class=\"line\">████████  ████████  ████████     GTK Theme: Matcha-dark-pueril [GTK2/3]</span><br><span class=\"line\">████████  ████████  ████████     Icon Theme: Papirus-Adapta-Maia</span><br><span class=\"line\">████████  ████████  ████████     Font: Noto Sans 12</span><br><span class=\"line\">████████  ████████  ████████     Disk: 150G / 946G (17%)</span><br><span class=\"line\">                                 CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz</span><br><span class=\"line\">                                 GPU: AMD RENOIR (DRM 3.40.0, 5.10.79-1-MANJARO, LLVM 13.0.0)</span><br><span class=\"line\">                                 RAM: 2030MiB / 15453MiB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h2><p><a href=\"https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz\">https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz</a></p>\n<h2 id=\"工具集\"><a href=\"#工具集\" class=\"headerlink\" title=\"工具集\"></a>工具集</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -S base-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译步骤\"><a href=\"#编译步骤\" class=\"headerlink\" title=\"编译步骤\"></a>编译步骤</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make menuconfig <span class=\"comment\"># 内核配置， 可以默认配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">make -j$(nproc) <span class=\"comment\"># -j job 一般为线程数</span></span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">arch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x6455b190)</span><br><span class=\"line\">Kernel: arch/x86/boot/bzImage is ready  (<span class=\"comment\">#1)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编好之后的产物为 <code>arch/x86/boot/bzImage</code>。</p>\n<h2 id=\"rootfs-和文件系统简介\"><a href=\"#rootfs-和文件系统简介\" class=\"headerlink\" title=\"rootfs 和文件系统简介\"></a>rootfs 和文件系统简介</h2><p><code>rootfs</code>是基于内存的文件系统，所有操作都在内存中完成；也没有实际的存储设备，所以不需要设备驱动程序的参与。<br>基于以上原因，linux在启动阶段使用<code>rootfs</code>文件系统，当磁盘驱动程序和磁盘文件系统成功加载后，linux系统会将系统根目录从<code>rootfs</code>切换到磁盘文件系统。</p>\n<p>大致的启动流程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start_kernel</span><br><span class=\"line\">　　vfs_caches_init</span><br><span class=\"line\">　　　　mnt_init</span><br><span class=\"line\">　　　　　　init_rootfs注册rootfs文件系统</span><br><span class=\"line\">　　　　　　init_mount_tree 挂载rootfs文件系统</span><br><span class=\"line\">　　　　　　　　vfs_kern_mount</span><br><span class=\"line\">　　　　　　　　　　mount_fs</span><br><span class=\"line\">　　　　　　　　　　　　type-&gt;mount其实是rootfs_mount</span><br><span class=\"line\">　　　　　　　　　　　　　　mount_nodev</span><br><span class=\"line\">　　　　　　　　　　　　　　　　fill_super 其实是ramfs_fill_super</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi-&gt;mount_opts.mode, 0);</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　sb-&gt;s_root = d_make_root(inode);</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　　　static const struct qstr name = QSTR_INIT(“/”, 1);[1*]</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　　　__d_alloc(root_inode-&gt;i_sb, &amp;name);</span><br><span class=\"line\">　　　　　　　　　　…</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt.mnt_root = root;[2*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt.mnt_sb = root-&gt;d_sb;[3*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt_mountpoint = mnt-&gt;mnt.mnt_root;[4*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt_parent = mnt;[5*]</span><br><span class=\"line\">root.mnt = mnt;</span><br><span class=\"line\">　　　　　　　　root.dentry = mnt-&gt;mnt_root;</span><br><span class=\"line\">　　　　　　　　mnt-&gt;mnt_flags |= MNT_LOCKED;</span><br><span class=\"line\">　　　　　　　　set_fs_pwd(current-&gt;fs, &amp;root);</span><br><span class=\"line\">　　　　　　　　set_fs_root(current-&gt;fs, &amp;root);</span><br><span class=\"line\">　　…</span><br><span class=\"line\">　　rest_init</span><br><span class=\"line\">　　kernel_thread(kernel_init, NULL, CLONE_FS);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>正常来说，根文件系统至少包括以下目录：</p>\n<ul>\n<li><p>/etc/：存储重要的配置文件。</p>\n</li>\n<li><p>/bin/：存储常用且开机时必须用到的执行文件。</p>\n</li>\n<li><p>/sbin/：存储着开机过程中所需的系统执行文件。</p>\n</li>\n<li><p>/lib/：存储/bin/及/sbin/的执行文件所需的链接库，以及Linux的内核模块。</p>\n</li>\n<li><p>/dev/：存储设备文件。</p>\n</li>\n</ul>\n<blockquote>\n<p>以上列举出的目录必须存储在根文件系统上，缺一不可。</p>\n</blockquote>\n<ul>\n<li>/proc</li>\n</ul>\n<p>这是一个空目录，常作为proc文件系统的挂接点，proc文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。</p>\n<h3 id=\"制作一个临时的rootfs\"><a href=\"#制作一个临时的rootfs\" class=\"headerlink\" title=\"制作一个临时的rootfs\"></a>制作一个临时的rootfs</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch main.c</span><br><span class=\"line\">vim main.c</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;linux-5.14 &gt; \\n&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成rootfs\"><a href=\"#生成rootfs\" class=\"headerlink\" title=\"生成rootfs\"></a>生成rootfs</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --static -o hello_kernel main.c</span><br><span class=\"line\"><span class=\"built_in\">echo</span> hello_kernel | cpio -o --format=newc &gt; rootfs</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"QEMU-启动\"><a href=\"#QEMU-启动\" class=\"headerlink\" title=\"QEMU 启动\"></a>QEMU 启动</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-system-x86_64 \\</span><br><span class=\"line\">&gt; -kernel ./arch/x86/boot/bzImage \\</span><br><span class=\"line\">&gt; -initrd ./rootfs \\</span><br><span class=\"line\">&gt; -append <span class=\"string\">&quot;root=/dev/ram rdinit=hello_kernel&quot;</span> \\</span><br><span class=\"line\">&gt; -smp 2 \\</span><br><span class=\"line\">&gt; -s -S</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这时的Qemu 会进入等待状态, </p>\n<h4 id=\"GDB-启动\"><a href=\"#GDB-启动\" class=\"headerlink\" title=\"GDB 启动\"></a>GDB 启动</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ./vmlinux</span><br><span class=\"line\">......</span><br><span class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class=\"line\">Reading symbols from ./vmlinux...</span><br><span class=\"line\">(gdb) target remote:1234</span><br><span class=\"line\">Remote debugging using :1234</span><br><span class=\"line\">0x000000000000fff0 in exception_stacks ()</span><br><span class=\"line\">(gdb) b start_kernel</span><br><span class=\"line\">Breakpoint 1 at 0xfff0</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>_target remote:1234_， gdb 连接上qemu,</p>\n<p>_b start_kernel_， 设置断点： <code>start_kernel</code></p>\n<p>_c_， 继续执行：</p>\n<h2 id=\"VS-Code-上面调试\"><a href=\"#VS-Code-上面调试\" class=\"headerlink\" title=\"VS Code 上面调试\"></a>VS Code 上面调试</h2><p>需要安装好gdb插件<br>然后, 三个配置文件：</p>\n<p>c_cpp_properties.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Linux kernel&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cStandard&quot;</span>: <span class=\"string\">&quot;c11&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;intelliSenseMode&quot;</span>: <span class=\"string\">&quot;linux-clang-x64&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;compileCommands&quot;</span>: <span class=\"string\">&quot;$&#123;&#125;/compile_commands.json&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>launch.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Use IntelliSense to learn about possible attributes.</span></span><br><span class=\"line\">    <span class=\"comment\">// Hover to view descriptions of existing attributes.</span></span><br><span class=\"line\">    <span class=\"comment\">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;(gdb) Launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppdbg&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;preLaunchTask&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;miDebuggerServerAddress&quot;</span>:<span class=\"string\">&quot;127.0.0.1:1234&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/vmlinux&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;stopAtEntry&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;environment&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;externalConsole&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;MIMode&quot;</span>: <span class=\"string\">&quot;gdb&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;setupCommands&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;ignoreFailures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tasks.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class=\"line\">    <span class=\"comment\">// for the documentation about the tasks.json format</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ./rootfs -append \\&quot;root=/dev/ram rdinit=hello_kernel\\&quot; -smp 2 -s -S&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;presentation&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;echo&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;clear&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;isBackground&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;problemMatcher&quot;</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;pattern&quot;</span>: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;regexp&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;file&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;location&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;message&quot;</span>: <span class=\"number\">3</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">&quot;background&quot;</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">&quot;activeOnStart&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;beginsPattern&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;endsPattern&quot;</span>: <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;make&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;group&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;kind&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;isDefault&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;presentation&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;echo&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;build&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">██████████████████  ████████     4soos@dev</span><br><span class=\"line\">██████████████████  ████████     OS: Manjaro 21.2.0 Qonos</span><br><span class=\"line\">██████████████████  ████████     Kernel: x86_64 Linux 5.10.79-1-MANJARO</span><br><span class=\"line\">██████████████████  ████████     Uptime: 19m</span><br><span class=\"line\">████████            ████████     Packages: 1324</span><br><span class=\"line\">████████  ████████  ████████     Shell: bash 5.1.8</span><br><span class=\"line\">████████  ████████  ████████     Resolution: 2560x1440</span><br><span class=\"line\">████████  ████████  ████████     DE: GNOME 41.1</span><br><span class=\"line\">████████  ████████  ████████     WM: Mutter</span><br><span class=\"line\">████████  ████████  ████████     WM Theme: </span><br><span class=\"line\">████████  ████████  ████████     GTK Theme: Matcha-dark-pueril [GTK2/3]</span><br><span class=\"line\">████████  ████████  ████████     Icon Theme: Papirus-Adapta-Maia</span><br><span class=\"line\">████████  ████████  ████████     Font: Noto Sans 12</span><br><span class=\"line\">████████  ████████  ████████     Disk: 150G / 946G (17%)</span><br><span class=\"line\">                                 CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz</span><br><span class=\"line\">                                 GPU: AMD RENOIR (DRM 3.40.0, 5.10.79-1-MANJARO, LLVM 13.0.0)</span><br><span class=\"line\">                                 RAM: 2030MiB / 15453MiB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h2><p><a href=\"https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz\">https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz</a></p>\n<h2 id=\"工具集\"><a href=\"#工具集\" class=\"headerlink\" title=\"工具集\"></a>工具集</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -S base-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译步骤\"><a href=\"#编译步骤\" class=\"headerlink\" title=\"编译步骤\"></a>编译步骤</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make menuconfig <span class=\"comment\"># 内核配置， 可以默认配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">make -j$(nproc) <span class=\"comment\"># -j job 一般为线程数</span></span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">arch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x6455b190)</span><br><span class=\"line\">Kernel: arch/x86/boot/bzImage is ready  (<span class=\"comment\">#1)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编好之后的产物为 <code>arch/x86/boot/bzImage</code>。</p>\n<h2 id=\"rootfs-和文件系统简介\"><a href=\"#rootfs-和文件系统简介\" class=\"headerlink\" title=\"rootfs 和文件系统简介\"></a>rootfs 和文件系统简介</h2><p><code>rootfs</code>是基于内存的文件系统，所有操作都在内存中完成；也没有实际的存储设备，所以不需要设备驱动程序的参与。<br>基于以上原因，linux在启动阶段使用<code>rootfs</code>文件系统，当磁盘驱动程序和磁盘文件系统成功加载后，linux系统会将系统根目录从<code>rootfs</code>切换到磁盘文件系统。</p>\n<p>大致的启动流程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start_kernel</span><br><span class=\"line\">　　vfs_caches_init</span><br><span class=\"line\">　　　　mnt_init</span><br><span class=\"line\">　　　　　　init_rootfs注册rootfs文件系统</span><br><span class=\"line\">　　　　　　init_mount_tree 挂载rootfs文件系统</span><br><span class=\"line\">　　　　　　　　vfs_kern_mount</span><br><span class=\"line\">　　　　　　　　　　mount_fs</span><br><span class=\"line\">　　　　　　　　　　　　type-&gt;mount其实是rootfs_mount</span><br><span class=\"line\">　　　　　　　　　　　　　　mount_nodev</span><br><span class=\"line\">　　　　　　　　　　　　　　　　fill_super 其实是ramfs_fill_super</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi-&gt;mount_opts.mode, 0);</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　sb-&gt;s_root = d_make_root(inode);</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　　　static const struct qstr name = QSTR_INIT(“/”, 1);[1*]</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　　　__d_alloc(root_inode-&gt;i_sb, &amp;name);</span><br><span class=\"line\">　　　　　　　　　　…</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt.mnt_root = root;[2*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt.mnt_sb = root-&gt;d_sb;[3*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt_mountpoint = mnt-&gt;mnt.mnt_root;[4*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt_parent = mnt;[5*]</span><br><span class=\"line\">root.mnt = mnt;</span><br><span class=\"line\">　　　　　　　　root.dentry = mnt-&gt;mnt_root;</span><br><span class=\"line\">　　　　　　　　mnt-&gt;mnt_flags |= MNT_LOCKED;</span><br><span class=\"line\">　　　　　　　　set_fs_pwd(current-&gt;fs, &amp;root);</span><br><span class=\"line\">　　　　　　　　set_fs_root(current-&gt;fs, &amp;root);</span><br><span class=\"line\">　　…</span><br><span class=\"line\">　　rest_init</span><br><span class=\"line\">　　kernel_thread(kernel_init, NULL, CLONE_FS);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>正常来说，根文件系统至少包括以下目录：</p>\n<ul>\n<li><p>/etc/：存储重要的配置文件。</p>\n</li>\n<li><p>/bin/：存储常用且开机时必须用到的执行文件。</p>\n</li>\n<li><p>/sbin/：存储着开机过程中所需的系统执行文件。</p>\n</li>\n<li><p>/lib/：存储/bin/及/sbin/的执行文件所需的链接库，以及Linux的内核模块。</p>\n</li>\n<li><p>/dev/：存储设备文件。</p>\n</li>\n</ul>\n<blockquote>\n<p>以上列举出的目录必须存储在根文件系统上，缺一不可。</p>\n</blockquote>\n<ul>\n<li>/proc</li>\n</ul>\n<p>这是一个空目录，常作为proc文件系统的挂接点，proc文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。</p>\n<h3 id=\"制作一个临时的rootfs\"><a href=\"#制作一个临时的rootfs\" class=\"headerlink\" title=\"制作一个临时的rootfs\"></a>制作一个临时的rootfs</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch main.c</span><br><span class=\"line\">vim main.c</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;linux-5.14 &gt; \\n&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成rootfs\"><a href=\"#生成rootfs\" class=\"headerlink\" title=\"生成rootfs\"></a>生成rootfs</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --static -o hello_kernel main.c</span><br><span class=\"line\"><span class=\"built_in\">echo</span> hello_kernel | cpio -o --format=newc &gt; rootfs</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"QEMU-启动\"><a href=\"#QEMU-启动\" class=\"headerlink\" title=\"QEMU 启动\"></a>QEMU 启动</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-system-x86_64 \\</span><br><span class=\"line\">&gt; -kernel ./arch/x86/boot/bzImage \\</span><br><span class=\"line\">&gt; -initrd ./rootfs \\</span><br><span class=\"line\">&gt; -append <span class=\"string\">&quot;root=/dev/ram rdinit=hello_kernel&quot;</span> \\</span><br><span class=\"line\">&gt; -smp 2 \\</span><br><span class=\"line\">&gt; -s -S</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这时的Qemu 会进入等待状态, </p>\n<h4 id=\"GDB-启动\"><a href=\"#GDB-启动\" class=\"headerlink\" title=\"GDB 启动\"></a>GDB 启动</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ./vmlinux</span><br><span class=\"line\">......</span><br><span class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class=\"line\">Reading symbols from ./vmlinux...</span><br><span class=\"line\">(gdb) target remote:1234</span><br><span class=\"line\">Remote debugging using :1234</span><br><span class=\"line\">0x000000000000fff0 in exception_stacks ()</span><br><span class=\"line\">(gdb) b start_kernel</span><br><span class=\"line\">Breakpoint 1 at 0xfff0</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>_target remote:1234_， gdb 连接上qemu,</p>\n<p>_b start_kernel_， 设置断点： <code>start_kernel</code></p>\n<p>_c_， 继续执行：</p>\n<h2 id=\"VS-Code-上面调试\"><a href=\"#VS-Code-上面调试\" class=\"headerlink\" title=\"VS Code 上面调试\"></a>VS Code 上面调试</h2><p>需要安装好gdb插件<br>然后, 三个配置文件：</p>\n<p>c_cpp_properties.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Linux kernel&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cStandard&quot;</span>: <span class=\"string\">&quot;c11&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;intelliSenseMode&quot;</span>: <span class=\"string\">&quot;linux-clang-x64&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;compileCommands&quot;</span>: <span class=\"string\">&quot;$&#123;&#125;/compile_commands.json&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>launch.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Use IntelliSense to learn about possible attributes.</span></span><br><span class=\"line\">    <span class=\"comment\">// Hover to view descriptions of existing attributes.</span></span><br><span class=\"line\">    <span class=\"comment\">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;(gdb) Launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppdbg&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;preLaunchTask&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;miDebuggerServerAddress&quot;</span>:<span class=\"string\">&quot;127.0.0.1:1234&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/vmlinux&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;stopAtEntry&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;environment&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;externalConsole&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;MIMode&quot;</span>: <span class=\"string\">&quot;gdb&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;setupCommands&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;ignoreFailures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tasks.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class=\"line\">    <span class=\"comment\">// for the documentation about the tasks.json format</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ./rootfs -append \\&quot;root=/dev/ram rdinit=hello_kernel\\&quot; -smp 2 -s -S&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;presentation&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;echo&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;clear&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;isBackground&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;problemMatcher&quot;</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;pattern&quot;</span>: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;regexp&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;file&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;location&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;message&quot;</span>: <span class=\"number\">3</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">&quot;background&quot;</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">&quot;activeOnStart&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;beginsPattern&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;endsPattern&quot;</span>: <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;make&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;group&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;kind&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;isDefault&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;presentation&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;echo&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;build&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"linux_system_programming","date":"2021-11-20T11:22:00.000Z","_content":"\n## 系统调用\n在深入系统调用的运作方式之前，务必关注以下几点。\n* 系统调用将处理器从用户态切换到核心态，以便 CPU 访问受到保护的内核内存。\n\n* 系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。\n（程序通过名称来标识系统调用，对这一编号方案往往一无所知。）\n\n* 每个系统调用可辅之以一套参数，对用户空间（亦即进程的虚拟地址空间）与内核空\n间之间（相互）传递的信息加以规范。\n\n从编程角度来看，系统调用与 C 语言函数的调用很相似。然而，在执行系统调用时，其\n幕后会历经诸多步骤。为说明这点，下面以一个具体的硬件平台—x86-32 为例，按事件发\n生的顺序对这些步骤加以分析。\n1． 应用程序通过调用 C 语言函数库中的外壳（wrapper）函数，来发起系统调用。\n\n2． 对系统调用中断处理例程（稍后介绍）来说，外壳函数必须保证所有的系统调用参数可用。\n通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。\n因此，外壳函数会将上述参数复制到寄存器。\n\n3． 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函\n数会将系统调用编号复制到一个特殊的 CPU 寄存器（%eax）中。\n\n4． 外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行\n系统中断 0x80 (十进制数 128)的中断矢量所指向的代码。\n\n5． 为响应中断 0x80，内核会调用 system_call()例程（位于汇编文件 arch/i386/entry.S 中）来\n处理这次中断，具体如下。\n    a）在内核栈中保存寄存器值（参见 6.5 节）。 他\n    b）审核系统调用编号的有效性。\n    c）以系统调用编号对存放所有调用服务例程的列表（内核变量 sys_call_table）进行索引，\n    发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。\n    例如，会检查地址指向用户空间的内存位置是否有效。随后，该服务例程会执行必要的任务，这可能涉及对特定参数中指定地址处的值进行修改，以及在用户内存和内核内存间传递数据（比如，在 I/O 操作中）。\n    最后，该服务例程会将结果状态返回给 system_call()例程。\n    d）从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中。\n    e）返回至外壳函数，同时将处理器切换回用户态。\n\n6． 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量 errno\n（参见 3.4 节）。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统\n调用是否成功。\n\n![execve](imgs/linux_system_exec_steps.png)\n\n\n## 文件I/O\n\n所有执行 I/O 操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。\n文件描述符用以表示所有类型的已打开文件，包括管道（pipe）、FIFO、socket、终端、\n设备和普通文件。针对每个进程，文件描述符都自成一套。\n\n大多数程序都能够使用 3 种标准的文件描述符：\n\n| 描述符 | 用途       | POSIX         | stdio  |\n| ----- | --------- | ------------- | ------ |\n| 0     | 标准输入    | STDIN_FILENO  | stdin  |\n| 1     | 标准输出    | STDOUT_FILENO | stdout |\n| 2     | 标准错误    | STDERR_FILENO | stderr |\n\n> 程序中指代这些文件描述符时，可以使用数字（0、1、2）表示，但最好是采用<unistd.h>\n所定义的 POSIX 标准名称。\n\n### IO 操作的主要系统调用函数\n\n#### open()\n```c\nfd = open(pathname, flags, mode)\n```\n函数打开 `pathname` 所标识的文件，并返回文件描\n述符，用以在后续函数调用中指代打开的文件。如果文件不存在，`open()`函数可以\n创建之，这取决于对位掩码参数 `flags` `的设置。flags` 参数还可指定文件的打开方式：只\n`读、只写亦或是读写方式。mode` 参数则指定了由 `open()`调用创建文件的访问权限，\n如果 `open()` 函数并未创建文件，那么可以忽略或省略 `mode` 参数。\n\n```C\n// open existing file for reading\nfd = open(\"start.up\", O_RDONLY);\nif (fd == -1)\n    printf(\"can't open\");\n\n// open new or existing file or reading and writing, truncating to zero\n// bytes; file permissions read+write for owner, nothing for all others\nfd = open(\"myfile\", O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR );\nif (fd == -1)\n    printf(\"can't open\");\n\nfd = open(\"w.log\", O_WRONLY|O_CREAT|O_TRUNC|O_APPEND, S_IRUSR|S_IWUSR);\n\nif (fd == -1)\n    printf(\"can't open\");\n\n```\n\nSUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者。\n可以利用该特性以特定文件描述符打开某一文件。\n\n```C\nif (close(STDIN_FILENO) == -1)\n    print(\"close\");\n\nfd = open(pathname, O_RDONLY);\nif (fd == -1)\n    print(\"open\");\n\n```\n\n\n#### read()\n```C\nnumread = read(fd, buffer, count)\n```\n调用从 `fd` 所指代的打开文件中读取至多 `count` 字节的数据，并存储到 `buffer` 中。\n`read()`调用的返回值为实际读取到的字节数。如果再无字节可读（例如：读到文件结尾符 `EOF` 时），则返回值为 0。\n\n#### write()\n```C\nnumwritten = write(fd, buffer, count)\n```\n调用从 `buffer` 中读取多达 `count` 字节的数据写入由\n`fd` 所指代的已打开文件中。`write()`调用的返回值为实际写入文件中的字节数，且有可\n能小于 `count。`\n\n#### close()\n```C\nstatus = close(fd)\n```\n在所有输入/输出操作完成后，调用 `close()`，释放文件描述符 `fd` 以及与之相关的内核资源。\n\n\n> 使用IO 小例子(src/fileio/copy)： \n> ```C\n>$ clang copy.c error_functions.c get_num.c -o copy\n>$ ./copy newfile oldfile\n> ```\n\n\n\n# Others (补充)\n\n## libc & glibc\n`libc` 是 `ANSI C` 的函数库, `glibc` 是 `GNU C` 的函数库。\n\n\n`ANSI C` 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： \n\n* `<ctype.h>`：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；\n* `<errno.h>`：定义用来报告错误条件的宏；\n* `<float.h>`：包含系统的浮点数大小限制；\n* `<math.h>`：包含数学库函数的函数原型；\n* `<stddef.h>`：包含执行某些计算 C 所用的常见的函数定义；\n* `<stdio.h>`：包含标准输入输出库函数的函数原型，以及他们所用的信息；\n* `<stdlib.h>`：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；\n* `<string.h>`：包含字符串处理函数的函数原型；\n* `<time.h>`：包含时间和日期操作的函数原型和类型；\n* `<stdarg.h>`：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；\n* `<signal.h>`：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；\n* `<setjmp.h>`：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；\n* `<locale.h>`：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。\n 地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；\n* `<assert.h>`：包含宏和信息，用于进行诊断，帮助程序调试。\n\n`glibc`是linux下面c标准库的实现，即`GNU C Library`。\n`glibc`本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库`Linux libc`逐渐不再被维护。\nLinux下面的标准c库不仅有这一个，如`uclibc`、`klibc`，以及上面被提到的`Linux libc`，但是glibc无疑是用得最多的。\n`glibc`在/lib目录下的.so文件为libc.so.6。\n\n\n","source":"_posts/linux-system-programming.md","raw":"---\ntitle: linux_system_programming\ndate: 2021-11-20 19:22:00\ntags:\n    - Linux\n    - C\ncategories:\n    - Linux编程\n---\n\n## 系统调用\n在深入系统调用的运作方式之前，务必关注以下几点。\n* 系统调用将处理器从用户态切换到核心态，以便 CPU 访问受到保护的内核内存。\n\n* 系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。\n（程序通过名称来标识系统调用，对这一编号方案往往一无所知。）\n\n* 每个系统调用可辅之以一套参数，对用户空间（亦即进程的虚拟地址空间）与内核空\n间之间（相互）传递的信息加以规范。\n\n从编程角度来看，系统调用与 C 语言函数的调用很相似。然而，在执行系统调用时，其\n幕后会历经诸多步骤。为说明这点，下面以一个具体的硬件平台—x86-32 为例，按事件发\n生的顺序对这些步骤加以分析。\n1． 应用程序通过调用 C 语言函数库中的外壳（wrapper）函数，来发起系统调用。\n\n2． 对系统调用中断处理例程（稍后介绍）来说，外壳函数必须保证所有的系统调用参数可用。\n通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。\n因此，外壳函数会将上述参数复制到寄存器。\n\n3． 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函\n数会将系统调用编号复制到一个特殊的 CPU 寄存器（%eax）中。\n\n4． 外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行\n系统中断 0x80 (十进制数 128)的中断矢量所指向的代码。\n\n5． 为响应中断 0x80，内核会调用 system_call()例程（位于汇编文件 arch/i386/entry.S 中）来\n处理这次中断，具体如下。\n    a）在内核栈中保存寄存器值（参见 6.5 节）。 他\n    b）审核系统调用编号的有效性。\n    c）以系统调用编号对存放所有调用服务例程的列表（内核变量 sys_call_table）进行索引，\n    发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。\n    例如，会检查地址指向用户空间的内存位置是否有效。随后，该服务例程会执行必要的任务，这可能涉及对特定参数中指定地址处的值进行修改，以及在用户内存和内核内存间传递数据（比如，在 I/O 操作中）。\n    最后，该服务例程会将结果状态返回给 system_call()例程。\n    d）从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中。\n    e）返回至外壳函数，同时将处理器切换回用户态。\n\n6． 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量 errno\n（参见 3.4 节）。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统\n调用是否成功。\n\n![execve](imgs/linux_system_exec_steps.png)\n\n\n## 文件I/O\n\n所有执行 I/O 操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。\n文件描述符用以表示所有类型的已打开文件，包括管道（pipe）、FIFO、socket、终端、\n设备和普通文件。针对每个进程，文件描述符都自成一套。\n\n大多数程序都能够使用 3 种标准的文件描述符：\n\n| 描述符 | 用途       | POSIX         | stdio  |\n| ----- | --------- | ------------- | ------ |\n| 0     | 标准输入    | STDIN_FILENO  | stdin  |\n| 1     | 标准输出    | STDOUT_FILENO | stdout |\n| 2     | 标准错误    | STDERR_FILENO | stderr |\n\n> 程序中指代这些文件描述符时，可以使用数字（0、1、2）表示，但最好是采用<unistd.h>\n所定义的 POSIX 标准名称。\n\n### IO 操作的主要系统调用函数\n\n#### open()\n```c\nfd = open(pathname, flags, mode)\n```\n函数打开 `pathname` 所标识的文件，并返回文件描\n述符，用以在后续函数调用中指代打开的文件。如果文件不存在，`open()`函数可以\n创建之，这取决于对位掩码参数 `flags` `的设置。flags` 参数还可指定文件的打开方式：只\n`读、只写亦或是读写方式。mode` 参数则指定了由 `open()`调用创建文件的访问权限，\n如果 `open()` 函数并未创建文件，那么可以忽略或省略 `mode` 参数。\n\n```C\n// open existing file for reading\nfd = open(\"start.up\", O_RDONLY);\nif (fd == -1)\n    printf(\"can't open\");\n\n// open new or existing file or reading and writing, truncating to zero\n// bytes; file permissions read+write for owner, nothing for all others\nfd = open(\"myfile\", O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR );\nif (fd == -1)\n    printf(\"can't open\");\n\nfd = open(\"w.log\", O_WRONLY|O_CREAT|O_TRUNC|O_APPEND, S_IRUSR|S_IWUSR);\n\nif (fd == -1)\n    printf(\"can't open\");\n\n```\n\nSUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者。\n可以利用该特性以特定文件描述符打开某一文件。\n\n```C\nif (close(STDIN_FILENO) == -1)\n    print(\"close\");\n\nfd = open(pathname, O_RDONLY);\nif (fd == -1)\n    print(\"open\");\n\n```\n\n\n#### read()\n```C\nnumread = read(fd, buffer, count)\n```\n调用从 `fd` 所指代的打开文件中读取至多 `count` 字节的数据，并存储到 `buffer` 中。\n`read()`调用的返回值为实际读取到的字节数。如果再无字节可读（例如：读到文件结尾符 `EOF` 时），则返回值为 0。\n\n#### write()\n```C\nnumwritten = write(fd, buffer, count)\n```\n调用从 `buffer` 中读取多达 `count` 字节的数据写入由\n`fd` 所指代的已打开文件中。`write()`调用的返回值为实际写入文件中的字节数，且有可\n能小于 `count。`\n\n#### close()\n```C\nstatus = close(fd)\n```\n在所有输入/输出操作完成后，调用 `close()`，释放文件描述符 `fd` 以及与之相关的内核资源。\n\n\n> 使用IO 小例子(src/fileio/copy)： \n> ```C\n>$ clang copy.c error_functions.c get_num.c -o copy\n>$ ./copy newfile oldfile\n> ```\n\n\n\n# Others (补充)\n\n## libc & glibc\n`libc` 是 `ANSI C` 的函数库, `glibc` 是 `GNU C` 的函数库。\n\n\n`ANSI C` 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： \n\n* `<ctype.h>`：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；\n* `<errno.h>`：定义用来报告错误条件的宏；\n* `<float.h>`：包含系统的浮点数大小限制；\n* `<math.h>`：包含数学库函数的函数原型；\n* `<stddef.h>`：包含执行某些计算 C 所用的常见的函数定义；\n* `<stdio.h>`：包含标准输入输出库函数的函数原型，以及他们所用的信息；\n* `<stdlib.h>`：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；\n* `<string.h>`：包含字符串处理函数的函数原型；\n* `<time.h>`：包含时间和日期操作的函数原型和类型；\n* `<stdarg.h>`：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；\n* `<signal.h>`：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；\n* `<setjmp.h>`：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；\n* `<locale.h>`：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。\n 地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；\n* `<assert.h>`：包含宏和信息，用于进行诊断，帮助程序调试。\n\n`glibc`是linux下面c标准库的实现，即`GNU C Library`。\n`glibc`本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库`Linux libc`逐渐不再被维护。\nLinux下面的标准c库不仅有这一个，如`uclibc`、`klibc`，以及上面被提到的`Linux libc`，但是glibc无疑是用得最多的。\n`glibc`在/lib目录下的.so文件为libc.so.6。\n\n\n","slug":"linux-system-programming","published":1,"updated":"2021-11-20T13:57:50.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwsxf4t600055z9y0zc59gqi","content":"<h2 id=\"系统调用\"><a href=\"#系统调用\" class=\"headerlink\" title=\"系统调用\"></a>系统调用</h2><p>在深入系统调用的运作方式之前，务必关注以下几点。</p>\n<ul>\n<li><p>系统调用将处理器从用户态切换到核心态，以便 CPU 访问受到保护的内核内存。</p>\n</li>\n<li><p>系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。<br>（程序通过名称来标识系统调用，对这一编号方案往往一无所知。）</p>\n</li>\n<li><p>每个系统调用可辅之以一套参数，对用户空间（亦即进程的虚拟地址空间）与内核空<br>间之间（相互）传递的信息加以规范。</p>\n</li>\n</ul>\n<p>从编程角度来看，系统调用与 C 语言函数的调用很相似。然而，在执行系统调用时，其<br>幕后会历经诸多步骤。为说明这点，下面以一个具体的硬件平台—x86-32 为例，按事件发<br>生的顺序对这些步骤加以分析。<br>1． 应用程序通过调用 C 语言函数库中的外壳（wrapper）函数，来发起系统调用。</p>\n<p>2． 对系统调用中断处理例程（稍后介绍）来说，外壳函数必须保证所有的系统调用参数可用。<br>通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。<br>因此，外壳函数会将上述参数复制到寄存器。</p>\n<p>3． 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函<br>数会将系统调用编号复制到一个特殊的 CPU 寄存器（%eax）中。</p>\n<p>4． 外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行<br>系统中断 0x80 (十进制数 128)的中断矢量所指向的代码。</p>\n<p>5． 为响应中断 0x80，内核会调用 system_call()例程（位于汇编文件 arch/i386/entry.S 中）来<br>处理这次中断，具体如下。<br>    a）在内核栈中保存寄存器值（参见 6.5 节）。 他<br>    b）审核系统调用编号的有效性。<br>    c）以系统调用编号对存放所有调用服务例程的列表（内核变量 sys_call_table）进行索引，<br>    发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。<br>    例如，会检查地址指向用户空间的内存位置是否有效。随后，该服务例程会执行必要的任务，这可能涉及对特定参数中指定地址处的值进行修改，以及在用户内存和内核内存间传递数据（比如，在 I/O 操作中）。<br>    最后，该服务例程会将结果状态返回给 system_call()例程。<br>    d）从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中。<br>    e）返回至外壳函数，同时将处理器切换回用户态。</p>\n<p>6． 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量 errno<br>（参见 3.4 节）。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统<br>调用是否成功。</p>\n<p><img src=\"imgs/linux_system_exec_steps.png\" alt=\"execve\"></p>\n<h2 id=\"文件I-O\"><a href=\"#文件I-O\" class=\"headerlink\" title=\"文件I/O\"></a>文件I/O</h2><p>所有执行 I/O 操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。<br>文件描述符用以表示所有类型的已打开文件，包括管道（pipe）、FIFO、socket、终端、<br>设备和普通文件。针对每个进程，文件描述符都自成一套。</p>\n<p>大多数程序都能够使用 3 种标准的文件描述符：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>用途</th>\n<th>POSIX</th>\n<th>stdio</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>标准输入</td>\n<td>STDIN_FILENO</td>\n<td>stdin</td>\n</tr>\n<tr>\n<td>1</td>\n<td>标准输出</td>\n<td>STDOUT_FILENO</td>\n<td>stdout</td>\n</tr>\n<tr>\n<td>2</td>\n<td>标准错误</td>\n<td>STDERR_FILENO</td>\n<td>stderr</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>程序中指代这些文件描述符时，可以使用数字（0、1、2）表示，但最好是采用&lt;unistd.h&gt;<br>所定义的 POSIX 标准名称。</p>\n</blockquote>\n<h3 id=\"IO-操作的主要系统调用函数\"><a href=\"#IO-操作的主要系统调用函数\" class=\"headerlink\" title=\"IO 操作的主要系统调用函数\"></a>IO 操作的主要系统调用函数</h3><h4 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open()\"></a>open()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd = open(pathname, flags, mode)</span><br></pre></td></tr></table></figure>\n<p>函数打开 <code>pathname</code> 所标识的文件，并返回文件描<br>述符，用以在后续函数调用中指代打开的文件。如果文件不存在，<code>open()</code>函数可以<br>创建之，这取决于对位掩码参数 <code>flags</code> <code>的设置。flags</code> 参数还可指定文件的打开方式：只<br><code>读、只写亦或是读写方式。mode</code> 参数则指定了由 <code>open()</code>调用创建文件的访问权限，<br>如果 <code>open()</code> 函数并未创建文件，那么可以忽略或省略 <code>mode</code> 参数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// open existing file for reading</span></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;start.up&quot;</span>, O_RDONLY);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// open new or existing file or reading and writing, truncating to zero</span></span><br><span class=\"line\"><span class=\"comment\">// bytes; file permissions read+write for owner, nothing for all others</span></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;myfile&quot;</span>, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR );</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;w.log&quot;</span>, O_WRONLY|O_CREAT|O_TRUNC|O_APPEND, S_IRUSR|S_IWUSR);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>SUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者。<br>可以利用该特性以特定文件描述符打开某一文件。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (close(STDIN_FILENO) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;close&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(pathname, O_RDONLY);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read()\"></a>read()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numread = read(fd, buffer, count)</span><br></pre></td></tr></table></figure>\n<p>调用从 <code>fd</code> 所指代的打开文件中读取至多 <code>count</code> 字节的数据，并存储到 <code>buffer</code> 中。<br><code>read()</code>调用的返回值为实际读取到的字节数。如果再无字节可读（例如：读到文件结尾符 <code>EOF</code> 时），则返回值为 0。</p>\n<h4 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write()\"></a>write()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numwritten = write(fd, buffer, count)</span><br></pre></td></tr></table></figure>\n<p>调用从 <code>buffer</code> 中读取多达 <code>count</code> 字节的数据写入由<br><code>fd</code> 所指代的已打开文件中。<code>write()</code>调用的返回值为实际写入文件中的字节数，且有可<br>能小于 <code>count。</code></p>\n<h4 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close()\"></a>close()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status = close(fd)</span><br></pre></td></tr></table></figure>\n<p>在所有输入/输出操作完成后，调用 <code>close()</code>，释放文件描述符 <code>fd</code> 以及与之相关的内核资源。</p>\n<blockquote>\n<p>使用IO 小例子(src/fileio/copy)： </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;$ clang copy.c error_functions.c get_num.c -o copy</span><br><span class=\"line\">&gt;$ ./copy newfile oldfile</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"Others-补充\"><a href=\"#Others-补充\" class=\"headerlink\" title=\"Others (补充)\"></a>Others (补充)</h1><h2 id=\"libc-amp-glibc\"><a href=\"#libc-amp-glibc\" class=\"headerlink\" title=\"libc &amp; glibc\"></a>libc &amp; glibc</h2><p><code>libc</code> 是 <code>ANSI C</code> 的函数库, <code>glibc</code> 是 <code>GNU C</code> 的函数库。</p>\n<p><code>ANSI C</code> 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： </p>\n<ul>\n<li><code>&lt;ctype.h&gt;</code>：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；</li>\n<li><code>&lt;errno.h&gt;</code>：定义用来报告错误条件的宏；</li>\n<li><code>&lt;float.h&gt;</code>：包含系统的浮点数大小限制；</li>\n<li><code>&lt;math.h&gt;</code>：包含数学库函数的函数原型；</li>\n<li><code>&lt;stddef.h&gt;</code>：包含执行某些计算 C 所用的常见的函数定义；</li>\n<li><code>&lt;stdio.h&gt;</code>：包含标准输入输出库函数的函数原型，以及他们所用的信息；</li>\n<li><code>&lt;stdlib.h&gt;</code>：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；</li>\n<li><code>&lt;string.h&gt;</code>：包含字符串处理函数的函数原型；</li>\n<li><code>&lt;time.h&gt;</code>：包含时间和日期操作的函数原型和类型；</li>\n<li><code>&lt;stdarg.h&gt;</code>：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；</li>\n<li><code>&lt;signal.h&gt;</code>：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；</li>\n<li><code>&lt;setjmp.h&gt;</code>：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；</li>\n<li><code>&lt;locale.h&gt;</code>：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。<br>地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；</li>\n<li><code>&lt;assert.h&gt;</code>：包含宏和信息，用于进行诊断，帮助程序调试。</li>\n</ul>\n<p><code>glibc</code>是linux下面c标准库的实现，即<code>GNU C Library</code>。<br><code>glibc</code>本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库<code>Linux libc</code>逐渐不再被维护。<br>Linux下面的标准c库不仅有这一个，如<code>uclibc</code>、<code>klibc</code>，以及上面被提到的<code>Linux libc</code>，但是glibc无疑是用得最多的。<br><code>glibc</code>在/lib目录下的.so文件为libc.so.6。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"系统调用\"><a href=\"#系统调用\" class=\"headerlink\" title=\"系统调用\"></a>系统调用</h2><p>在深入系统调用的运作方式之前，务必关注以下几点。</p>\n<ul>\n<li><p>系统调用将处理器从用户态切换到核心态，以便 CPU 访问受到保护的内核内存。</p>\n</li>\n<li><p>系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。<br>（程序通过名称来标识系统调用，对这一编号方案往往一无所知。）</p>\n</li>\n<li><p>每个系统调用可辅之以一套参数，对用户空间（亦即进程的虚拟地址空间）与内核空<br>间之间（相互）传递的信息加以规范。</p>\n</li>\n</ul>\n<p>从编程角度来看，系统调用与 C 语言函数的调用很相似。然而，在执行系统调用时，其<br>幕后会历经诸多步骤。为说明这点，下面以一个具体的硬件平台—x86-32 为例，按事件发<br>生的顺序对这些步骤加以分析。<br>1． 应用程序通过调用 C 语言函数库中的外壳（wrapper）函数，来发起系统调用。</p>\n<p>2． 对系统调用中断处理例程（稍后介绍）来说，外壳函数必须保证所有的系统调用参数可用。<br>通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。<br>因此，外壳函数会将上述参数复制到寄存器。</p>\n<p>3． 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函<br>数会将系统调用编号复制到一个特殊的 CPU 寄存器（%eax）中。</p>\n<p>4． 外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行<br>系统中断 0x80 (十进制数 128)的中断矢量所指向的代码。</p>\n<p>5． 为响应中断 0x80，内核会调用 system_call()例程（位于汇编文件 arch/i386/entry.S 中）来<br>处理这次中断，具体如下。<br>    a）在内核栈中保存寄存器值（参见 6.5 节）。 他<br>    b）审核系统调用编号的有效性。<br>    c）以系统调用编号对存放所有调用服务例程的列表（内核变量 sys_call_table）进行索引，<br>    发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。<br>    例如，会检查地址指向用户空间的内存位置是否有效。随后，该服务例程会执行必要的任务，这可能涉及对特定参数中指定地址处的值进行修改，以及在用户内存和内核内存间传递数据（比如，在 I/O 操作中）。<br>    最后，该服务例程会将结果状态返回给 system_call()例程。<br>    d）从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中。<br>    e）返回至外壳函数，同时将处理器切换回用户态。</p>\n<p>6． 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量 errno<br>（参见 3.4 节）。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统<br>调用是否成功。</p>\n<p><img src=\"imgs/linux_system_exec_steps.png\" alt=\"execve\"></p>\n<h2 id=\"文件I-O\"><a href=\"#文件I-O\" class=\"headerlink\" title=\"文件I/O\"></a>文件I/O</h2><p>所有执行 I/O 操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。<br>文件描述符用以表示所有类型的已打开文件，包括管道（pipe）、FIFO、socket、终端、<br>设备和普通文件。针对每个进程，文件描述符都自成一套。</p>\n<p>大多数程序都能够使用 3 种标准的文件描述符：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>用途</th>\n<th>POSIX</th>\n<th>stdio</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>标准输入</td>\n<td>STDIN_FILENO</td>\n<td>stdin</td>\n</tr>\n<tr>\n<td>1</td>\n<td>标准输出</td>\n<td>STDOUT_FILENO</td>\n<td>stdout</td>\n</tr>\n<tr>\n<td>2</td>\n<td>标准错误</td>\n<td>STDERR_FILENO</td>\n<td>stderr</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>程序中指代这些文件描述符时，可以使用数字（0、1、2）表示，但最好是采用&lt;unistd.h&gt;<br>所定义的 POSIX 标准名称。</p>\n</blockquote>\n<h3 id=\"IO-操作的主要系统调用函数\"><a href=\"#IO-操作的主要系统调用函数\" class=\"headerlink\" title=\"IO 操作的主要系统调用函数\"></a>IO 操作的主要系统调用函数</h3><h4 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open()\"></a>open()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd = open(pathname, flags, mode)</span><br></pre></td></tr></table></figure>\n<p>函数打开 <code>pathname</code> 所标识的文件，并返回文件描<br>述符，用以在后续函数调用中指代打开的文件。如果文件不存在，<code>open()</code>函数可以<br>创建之，这取决于对位掩码参数 <code>flags</code> <code>的设置。flags</code> 参数还可指定文件的打开方式：只<br><code>读、只写亦或是读写方式。mode</code> 参数则指定了由 <code>open()</code>调用创建文件的访问权限，<br>如果 <code>open()</code> 函数并未创建文件，那么可以忽略或省略 <code>mode</code> 参数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// open existing file for reading</span></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;start.up&quot;</span>, O_RDONLY);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// open new or existing file or reading and writing, truncating to zero</span></span><br><span class=\"line\"><span class=\"comment\">// bytes; file permissions read+write for owner, nothing for all others</span></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;myfile&quot;</span>, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR );</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;w.log&quot;</span>, O_WRONLY|O_CREAT|O_TRUNC|O_APPEND, S_IRUSR|S_IWUSR);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>SUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者。<br>可以利用该特性以特定文件描述符打开某一文件。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (close(STDIN_FILENO) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;close&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(pathname, O_RDONLY);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read()\"></a>read()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numread = read(fd, buffer, count)</span><br></pre></td></tr></table></figure>\n<p>调用从 <code>fd</code> 所指代的打开文件中读取至多 <code>count</code> 字节的数据，并存储到 <code>buffer</code> 中。<br><code>read()</code>调用的返回值为实际读取到的字节数。如果再无字节可读（例如：读到文件结尾符 <code>EOF</code> 时），则返回值为 0。</p>\n<h4 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write()\"></a>write()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numwritten = write(fd, buffer, count)</span><br></pre></td></tr></table></figure>\n<p>调用从 <code>buffer</code> 中读取多达 <code>count</code> 字节的数据写入由<br><code>fd</code> 所指代的已打开文件中。<code>write()</code>调用的返回值为实际写入文件中的字节数，且有可<br>能小于 <code>count。</code></p>\n<h4 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close()\"></a>close()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status = close(fd)</span><br></pre></td></tr></table></figure>\n<p>在所有输入/输出操作完成后，调用 <code>close()</code>，释放文件描述符 <code>fd</code> 以及与之相关的内核资源。</p>\n<blockquote>\n<p>使用IO 小例子(src/fileio/copy)： </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;$ clang copy.c error_functions.c get_num.c -o copy</span><br><span class=\"line\">&gt;$ ./copy newfile oldfile</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"Others-补充\"><a href=\"#Others-补充\" class=\"headerlink\" title=\"Others (补充)\"></a>Others (补充)</h1><h2 id=\"libc-amp-glibc\"><a href=\"#libc-amp-glibc\" class=\"headerlink\" title=\"libc &amp; glibc\"></a>libc &amp; glibc</h2><p><code>libc</code> 是 <code>ANSI C</code> 的函数库, <code>glibc</code> 是 <code>GNU C</code> 的函数库。</p>\n<p><code>ANSI C</code> 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： </p>\n<ul>\n<li><code>&lt;ctype.h&gt;</code>：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；</li>\n<li><code>&lt;errno.h&gt;</code>：定义用来报告错误条件的宏；</li>\n<li><code>&lt;float.h&gt;</code>：包含系统的浮点数大小限制；</li>\n<li><code>&lt;math.h&gt;</code>：包含数学库函数的函数原型；</li>\n<li><code>&lt;stddef.h&gt;</code>：包含执行某些计算 C 所用的常见的函数定义；</li>\n<li><code>&lt;stdio.h&gt;</code>：包含标准输入输出库函数的函数原型，以及他们所用的信息；</li>\n<li><code>&lt;stdlib.h&gt;</code>：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；</li>\n<li><code>&lt;string.h&gt;</code>：包含字符串处理函数的函数原型；</li>\n<li><code>&lt;time.h&gt;</code>：包含时间和日期操作的函数原型和类型；</li>\n<li><code>&lt;stdarg.h&gt;</code>：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；</li>\n<li><code>&lt;signal.h&gt;</code>：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；</li>\n<li><code>&lt;setjmp.h&gt;</code>：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；</li>\n<li><code>&lt;locale.h&gt;</code>：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。<br>地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；</li>\n<li><code>&lt;assert.h&gt;</code>：包含宏和信息，用于进行诊断，帮助程序调试。</li>\n</ul>\n<p><code>glibc</code>是linux下面c标准库的实现，即<code>GNU C Library</code>。<br><code>glibc</code>本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库<code>Linux libc</code>逐渐不再被维护。<br>Linux下面的标准c库不仅有这一个，如<code>uclibc</code>、<code>klibc</code>，以及上面被提到的<code>Linux libc</code>，但是glibc无疑是用得最多的。<br><code>glibc</code>在/lib目录下的.so文件为libc.so.6。</p>\n"},{"title":"常用位运算","date":"2021-12-05T05:57:32.000Z","_content":"\n\n## 位运算符\n\n* `&` : 对应位都为1时，结果为1\n\n* `|` : 对应位存在一个1时，结果为1\n\n* `^` : 对应位不同时，结果为1\n\n> 异或运算的逆元素是本身, 即两次异或同一个数，结果不变： `a ^ b ^ b = a`\n\n\n* `~` : 对一个数进行单目运算，把这个数的补码中的 0 和 1 全部取反，\n有符号整数的符号位在这 `~` 运算中同样会取反。\n\n> 补码： 在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。\n\n在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。\n\n$$\n5 =(00000101)_2 \\\\\n-5 =(11111010)_2 \\\\\n-5_补 =(11111011)_2 \\\\\n-(-5) =(00000100)_2 = 4\n$$\n\n\n* `<<` 和 `>>` : 将二进制向左（右）移动对应的位数的值，\n\n$$\n11 =(00001011)_2 \\\\\n11 << 3 =(01011000)_2 = 88 \\\\\n11 >> 2 =(00000010)_2 = 2\n$$\n\n> 在 C++ 中，右移操作中右侧多余的位将会被舍弃，而左侧较为复杂：\n> * 对于无符号数，会在左侧补 0；\n> * 对于有符号数，则会用最高位的数（其实就是符号位，非负数为 0，负数为 1）补齐。左移操作总是在右侧补 0。\n\n\n## 复合赋值位运算符\n\n和 `+=` , `-=` 等运算符类似，位运算也有复合赋值运算符： \n`&=` , `|=` , `^=` , `<<=` , `>>=` 。（取反是单目运算，所以没有。）\n\n> 位运算的优先级低于算术运算符（除了取反），而按位与、按位或及异或低于比较运算符，所以使用时需多加注意，在必要时添加括号。\n\n## 应用\n\n* 嵌入式中对寄存器进行按位计算，取值，置位\n\n* 高效地进行某些运算，代替其它低效的方式。\n\n* 表示集合。（常用于 状压 DP 。）\n\n* 要求进行位运算。\n\n### 常用运算\n\n|  操作\t | 运算 |\n|  --   |  -- |\n| 取出整数 n 在二进制表示下的第 k 位\t                |(n >> k) & 1        |   \n| 取出整数n 在二进制表示下的第 0 ~ k - 1 位 (后 k 位)\t | n & ((1 << k) - 1) |   \n| 对整数 n 在二进制表示下的第 k 位取反\t                | n xor (1 << k)      |\n| 对整数 n 在二进制表示下的第 k 位赋值 1\t            | n | (1 << k)        |\n| 对整数 n 在二进制表示下的第 k 位赋值 0\t            | n & (~(1 << k))     |\n\n### 表示集合\n\n| 操作\t | 集合表示  | \t位运算语句 \n| --    |    --   | --   |\n| 交集\t | a∩b\t  | a & b |\n| 并集\t | a∪b\t  | `a    |\n| 补集\t | \\overline{a}\t  | ~a （全集为二进制都是 1） |\n| 差集\t | a∖b\t  | a & (~b) |\n| 对称差 | \ta△b    |   a ^ b |\n\n\n### 实际代码\n\n* 幂运算\n\n```c\n// 乘 2 的非负整数次幂\nint mulPowerOfTwo(int n, int m) {  // 计算 n*(2^m)\n  return n << m;\n}\n\n// 除以 2 的非负整数次幂\nint divPowerOfTwo(int n, int m) {  // 计算 n/(2^m)\n  return n >> m;\n}\n\n// 对 2 的非负整数次幂取模\nint modPowerOfTwo(int x, int mod) { return x & (mod - 1); }\n\n\n// 判断一个数是不是 2 的正整数次幂\nbool isPowerOfTwo(int n) { return n > 0 && (n & (n - 1)) == 0; }\n\n// 取绝对值,在某些机器上，效率比 n > 0 ? n : -n 高。\nint Abs(int n) {\n  return (n ^ (n >> 31)) - (n >> 31);\n  /* n>>31 取得 n 的符号，若 n 为正数，n>>31 等于 0，若 n 为负数，n>>31 等于 -1\n     若 n 为正数 n^0=n, 数不变，若 n 为负数有 n^(-1)\n     需要计算 n 和 -1 的补码，然后进行异或运算，\n     结果 n 变号并且为 n 的绝对值减 1，再减去 -1 就是绝对值 */\n}\n\n// 取两个数的最大/最小值\n// 在某些机器上，效率比 a > b ? a : b 高。\n// 如果 a>=b,(a-b)>>31 为 0，否则为 -1\nint max(int a, int b) { return b & ((a - b) >> 31) | a & (~(a - b) >> 31); }\nint min(int a, int b) { return a & ((a - b) >> 31) | b & (~(a - b) >> 31); }\n\n//判断符号是否相同\nbool isSameSign(int x, int y) {  // 有 0 的情况例外\n  return (x ^ y) >= 0;\n}\n\n// 交换两个数\nvoid swap(int &a, int &b) { a ^= b ^= a ^= b; }\n\n// 获取一个数二进制的某一位\n// 获取 a 的第 b 位，最低位编号为 0\nint getBit(int a, int b) { return (a >> b) & 1; }\n\n```\n\n> 平常写除法是向 0 取整，而这里的右移是向下取整（注意这里的区别）:\n即当数大于等于 0 时两种方法等价，当数小于 0 时会有区别，如： -1 / 2 的值为 0 ，而 -1 >> 1 的值为 −1 。\n\n\n## C++ STL bitset 容器\n\nbitset 容器其实就是个01串。\n可以被看作是一个bool数组。它比bool数组更优秀的优点是：\n* 节约空间\n* 节约时间 \n* 支持基本的位运算。在bitset容器中，8位占一个字节，相比于bool数组4位一个字节的空间利用率要高很多。同时，n位的bitset在执行一次位运算的复杂度可以被看作是n/32，这都是bool数组所没有的优秀性质。\n\n包含在自带的，`bitset` 头文件中：\n\n### bitset 容器的声明\n因为bitset容器就是装01串的，所以不用在`< >`中装数据类型，这和一般的STL容器不太一样。`< >`中装01串的位数。\n\n如：（声明一个105位的bitset）\n\n```cpp\nbitset<100000> s;\n```\n\n### 对bitset容器的一些操作\n\n#### 1、常用的操作函数\n\n和其他的STL容器一样，对bitset的很多操作也是由自带函数来实现的\n\n##### count(), any(), none() \ncount，数数的意思。它的作用是数出1的个数。即s.count()返回s中有多少个1.\n```cpp\ns.count(); // s中有多少个1.\ns.any();   // s中存在0, true, 反之则为false\ns.none();  // s中不存在0， true\n```\n\n##### set(), reset(), flip() \nset()函数的作用是把bitset全部置为1.\n\n特别地，set()函数里面可以传参数。set(u,v)的意思是把bitset中的第u位变成v,v∈0/1。\n```cpp\ns.set(); // 全部置为1\ns.set(u,v); // 第u位变成v,v∈0/1\n\ns.reset(); // 所有位置为0\ns.reset(k); // 第k位变成0\n\ns.flip(); //全部按位取反\ns.flip(k);// 第k位取反\n```\n\n#### 2、位运算操作在bitset中的实现\nbitset的作用就是帮助我们方便地实现位运算的相关操作。它当然支持位运算的一些操作内容。编写程序的时候对数进行的二进制运算均可以用在bitset函数上。\n\n\n另外，bitset容器还支持直接取值和直接赋值的操作：具体操作方式如下：\n```cpp\ns[3]=1;\ns[5]=0;\n```\n> 这里要注意：在bitset容器中，最低位为0。这与数组实现仍然有区别。\n\n```cpp\nbitset的运算就像一个普通的整数一样，可以进行与(&)、或(|)、异或(^)、左移(<<)、右移(>>)等操作。\n\n// bitset operators\n#include <iostream>       // std::cout\n#include <string>         // std::string\n#include <bitset>         // std::bitset\n\nint main ()\n{\n  std::bitset<4> foo (std::string(\"1001\"));\n  std::bitset<4> bar (std::string(\"0011\"));\n\n  std::cout << (foo^=bar) << '\\n';       // 1010 (XOR,assign)\n  std::cout << (foo&=bar) << '\\n';       // 0010 (AND,assign)\n  std::cout << (foo|=bar) << '\\n';       // 0011 (OR,assign)\n\n  std::cout << (foo<<=2) << '\\n';        // 1100 (SHL,assign)\n  std::cout << (foo>>=1) << '\\n';        // 0110 (SHR,assign)\n\n  std::cout << (~bar) << '\\n';           // 1100 (NOT)\n  std::cout << (bar<<1) << '\\n';         // 0110 (SHL)\n  std::cout << (bar>>1) << '\\n';         // 0001 (SHR)\n\n  std::cout << (foo==bar) << '\\n';       // false (0110==0011)\n  std::cout << (foo!=bar) << '\\n';       // true  (0110!=0011)\n\n  std::cout << (foo&bar) << '\\n';        // 0010\n  std::cout << (foo|bar) << '\\n';        // 0111\n  std::cout << (foo^bar) << '\\n';        // 0101\n\n  return 0;\n}\n```\n\n\n","source":"_posts/常用位运算.md","raw":"---\ntitle: 常用位运算\ndate: 2021-12-05 13:57:32\ntags:\n    - bit op\n    - c/cpp\n---\n\n\n## 位运算符\n\n* `&` : 对应位都为1时，结果为1\n\n* `|` : 对应位存在一个1时，结果为1\n\n* `^` : 对应位不同时，结果为1\n\n> 异或运算的逆元素是本身, 即两次异或同一个数，结果不变： `a ^ b ^ b = a`\n\n\n* `~` : 对一个数进行单目运算，把这个数的补码中的 0 和 1 全部取反，\n有符号整数的符号位在这 `~` 运算中同样会取反。\n\n> 补码： 在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。\n\n在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。\n\n$$\n5 =(00000101)_2 \\\\\n-5 =(11111010)_2 \\\\\n-5_补 =(11111011)_2 \\\\\n-(-5) =(00000100)_2 = 4\n$$\n\n\n* `<<` 和 `>>` : 将二进制向左（右）移动对应的位数的值，\n\n$$\n11 =(00001011)_2 \\\\\n11 << 3 =(01011000)_2 = 88 \\\\\n11 >> 2 =(00000010)_2 = 2\n$$\n\n> 在 C++ 中，右移操作中右侧多余的位将会被舍弃，而左侧较为复杂：\n> * 对于无符号数，会在左侧补 0；\n> * 对于有符号数，则会用最高位的数（其实就是符号位，非负数为 0，负数为 1）补齐。左移操作总是在右侧补 0。\n\n\n## 复合赋值位运算符\n\n和 `+=` , `-=` 等运算符类似，位运算也有复合赋值运算符： \n`&=` , `|=` , `^=` , `<<=` , `>>=` 。（取反是单目运算，所以没有。）\n\n> 位运算的优先级低于算术运算符（除了取反），而按位与、按位或及异或低于比较运算符，所以使用时需多加注意，在必要时添加括号。\n\n## 应用\n\n* 嵌入式中对寄存器进行按位计算，取值，置位\n\n* 高效地进行某些运算，代替其它低效的方式。\n\n* 表示集合。（常用于 状压 DP 。）\n\n* 要求进行位运算。\n\n### 常用运算\n\n|  操作\t | 运算 |\n|  --   |  -- |\n| 取出整数 n 在二进制表示下的第 k 位\t                |(n >> k) & 1        |   \n| 取出整数n 在二进制表示下的第 0 ~ k - 1 位 (后 k 位)\t | n & ((1 << k) - 1) |   \n| 对整数 n 在二进制表示下的第 k 位取反\t                | n xor (1 << k)      |\n| 对整数 n 在二进制表示下的第 k 位赋值 1\t            | n | (1 << k)        |\n| 对整数 n 在二进制表示下的第 k 位赋值 0\t            | n & (~(1 << k))     |\n\n### 表示集合\n\n| 操作\t | 集合表示  | \t位运算语句 \n| --    |    --   | --   |\n| 交集\t | a∩b\t  | a & b |\n| 并集\t | a∪b\t  | `a    |\n| 补集\t | \\overline{a}\t  | ~a （全集为二进制都是 1） |\n| 差集\t | a∖b\t  | a & (~b) |\n| 对称差 | \ta△b    |   a ^ b |\n\n\n### 实际代码\n\n* 幂运算\n\n```c\n// 乘 2 的非负整数次幂\nint mulPowerOfTwo(int n, int m) {  // 计算 n*(2^m)\n  return n << m;\n}\n\n// 除以 2 的非负整数次幂\nint divPowerOfTwo(int n, int m) {  // 计算 n/(2^m)\n  return n >> m;\n}\n\n// 对 2 的非负整数次幂取模\nint modPowerOfTwo(int x, int mod) { return x & (mod - 1); }\n\n\n// 判断一个数是不是 2 的正整数次幂\nbool isPowerOfTwo(int n) { return n > 0 && (n & (n - 1)) == 0; }\n\n// 取绝对值,在某些机器上，效率比 n > 0 ? n : -n 高。\nint Abs(int n) {\n  return (n ^ (n >> 31)) - (n >> 31);\n  /* n>>31 取得 n 的符号，若 n 为正数，n>>31 等于 0，若 n 为负数，n>>31 等于 -1\n     若 n 为正数 n^0=n, 数不变，若 n 为负数有 n^(-1)\n     需要计算 n 和 -1 的补码，然后进行异或运算，\n     结果 n 变号并且为 n 的绝对值减 1，再减去 -1 就是绝对值 */\n}\n\n// 取两个数的最大/最小值\n// 在某些机器上，效率比 a > b ? a : b 高。\n// 如果 a>=b,(a-b)>>31 为 0，否则为 -1\nint max(int a, int b) { return b & ((a - b) >> 31) | a & (~(a - b) >> 31); }\nint min(int a, int b) { return a & ((a - b) >> 31) | b & (~(a - b) >> 31); }\n\n//判断符号是否相同\nbool isSameSign(int x, int y) {  // 有 0 的情况例外\n  return (x ^ y) >= 0;\n}\n\n// 交换两个数\nvoid swap(int &a, int &b) { a ^= b ^= a ^= b; }\n\n// 获取一个数二进制的某一位\n// 获取 a 的第 b 位，最低位编号为 0\nint getBit(int a, int b) { return (a >> b) & 1; }\n\n```\n\n> 平常写除法是向 0 取整，而这里的右移是向下取整（注意这里的区别）:\n即当数大于等于 0 时两种方法等价，当数小于 0 时会有区别，如： -1 / 2 的值为 0 ，而 -1 >> 1 的值为 −1 。\n\n\n## C++ STL bitset 容器\n\nbitset 容器其实就是个01串。\n可以被看作是一个bool数组。它比bool数组更优秀的优点是：\n* 节约空间\n* 节约时间 \n* 支持基本的位运算。在bitset容器中，8位占一个字节，相比于bool数组4位一个字节的空间利用率要高很多。同时，n位的bitset在执行一次位运算的复杂度可以被看作是n/32，这都是bool数组所没有的优秀性质。\n\n包含在自带的，`bitset` 头文件中：\n\n### bitset 容器的声明\n因为bitset容器就是装01串的，所以不用在`< >`中装数据类型，这和一般的STL容器不太一样。`< >`中装01串的位数。\n\n如：（声明一个105位的bitset）\n\n```cpp\nbitset<100000> s;\n```\n\n### 对bitset容器的一些操作\n\n#### 1、常用的操作函数\n\n和其他的STL容器一样，对bitset的很多操作也是由自带函数来实现的\n\n##### count(), any(), none() \ncount，数数的意思。它的作用是数出1的个数。即s.count()返回s中有多少个1.\n```cpp\ns.count(); // s中有多少个1.\ns.any();   // s中存在0, true, 反之则为false\ns.none();  // s中不存在0， true\n```\n\n##### set(), reset(), flip() \nset()函数的作用是把bitset全部置为1.\n\n特别地，set()函数里面可以传参数。set(u,v)的意思是把bitset中的第u位变成v,v∈0/1。\n```cpp\ns.set(); // 全部置为1\ns.set(u,v); // 第u位变成v,v∈0/1\n\ns.reset(); // 所有位置为0\ns.reset(k); // 第k位变成0\n\ns.flip(); //全部按位取反\ns.flip(k);// 第k位取反\n```\n\n#### 2、位运算操作在bitset中的实现\nbitset的作用就是帮助我们方便地实现位运算的相关操作。它当然支持位运算的一些操作内容。编写程序的时候对数进行的二进制运算均可以用在bitset函数上。\n\n\n另外，bitset容器还支持直接取值和直接赋值的操作：具体操作方式如下：\n```cpp\ns[3]=1;\ns[5]=0;\n```\n> 这里要注意：在bitset容器中，最低位为0。这与数组实现仍然有区别。\n\n```cpp\nbitset的运算就像一个普通的整数一样，可以进行与(&)、或(|)、异或(^)、左移(<<)、右移(>>)等操作。\n\n// bitset operators\n#include <iostream>       // std::cout\n#include <string>         // std::string\n#include <bitset>         // std::bitset\n\nint main ()\n{\n  std::bitset<4> foo (std::string(\"1001\"));\n  std::bitset<4> bar (std::string(\"0011\"));\n\n  std::cout << (foo^=bar) << '\\n';       // 1010 (XOR,assign)\n  std::cout << (foo&=bar) << '\\n';       // 0010 (AND,assign)\n  std::cout << (foo|=bar) << '\\n';       // 0011 (OR,assign)\n\n  std::cout << (foo<<=2) << '\\n';        // 1100 (SHL,assign)\n  std::cout << (foo>>=1) << '\\n';        // 0110 (SHR,assign)\n\n  std::cout << (~bar) << '\\n';           // 1100 (NOT)\n  std::cout << (bar<<1) << '\\n';         // 0110 (SHL)\n  std::cout << (bar>>1) << '\\n';         // 0001 (SHR)\n\n  std::cout << (foo==bar) << '\\n';       // false (0110==0011)\n  std::cout << (foo!=bar) << '\\n';       // true  (0110!=0011)\n\n  std::cout << (foo&bar) << '\\n';        // 0010\n  std::cout << (foo|bar) << '\\n';        // 0111\n  std::cout << (foo^bar) << '\\n';        // 0101\n\n  return 0;\n}\n```\n\n\n","slug":"常用位运算","published":1,"updated":"2021-12-05T07:29:59.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwsxf4t700065z9yg0fa9rqd","content":"<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><ul>\n<li><p><code>&amp;</code> : 对应位都为1时，结果为1</p>\n</li>\n<li><p><code>|</code> : 对应位存在一个1时，结果为1</p>\n</li>\n<li><p><code>^</code> : 对应位不同时，结果为1</p>\n</li>\n</ul>\n<blockquote>\n<p>异或运算的逆元素是本身, 即两次异或同一个数，结果不变： <code>a ^ b ^ b = a</code></p>\n</blockquote>\n<ul>\n<li><code>~</code> : 对一个数进行单目运算，把这个数的补码中的 0 和 1 全部取反，<br>有符号整数的符号位在这 <code>~</code> 运算中同样会取反。</li>\n</ul>\n<blockquote>\n<p>补码： 在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。</p>\n</blockquote>\n<p>在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。</p>\n<p>$$<br>5 =(00000101)_2 \\<br>-5 =(11111010)_2 \\<br>-5_补 =(11111011)_2 \\<br>-(-5) =(00000100)_2 = 4<br>$$</p>\n<ul>\n<li><code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> : 将二进制向左（右）移动对应的位数的值，</li>\n</ul>\n<p>$$<br>11 =(00001011)_2 \\<br>11 &lt;&lt; 3 =(01011000)_2 = 88 \\<br>11 &gt;&gt; 2 =(00000010)_2 = 2<br>$$</p>\n<blockquote>\n<p>在 C++ 中，右移操作中右侧多余的位将会被舍弃，而左侧较为复杂：</p>\n<ul>\n<li>对于无符号数，会在左侧补 0；</li>\n<li>对于有符号数，则会用最高位的数（其实就是符号位，非负数为 0，负数为 1）补齐。左移操作总是在右侧补 0。</li>\n</ul>\n</blockquote>\n<h2 id=\"复合赋值位运算符\"><a href=\"#复合赋值位运算符\" class=\"headerlink\" title=\"复合赋值位运算符\"></a>复合赋值位运算符</h2><p>和 <code>+=</code> , <code>-=</code> 等运算符类似，位运算也有复合赋值运算符：<br><code>&amp;=</code> , <code>|=</code> , <code>^=</code> , <code>&lt;&lt;=</code> , <code>&gt;&gt;=</code> 。（取反是单目运算，所以没有。）</p>\n<blockquote>\n<p>位运算的优先级低于算术运算符（除了取反），而按位与、按位或及异或低于比较运算符，所以使用时需多加注意，在必要时添加括号。</p>\n</blockquote>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ul>\n<li><p>嵌入式中对寄存器进行按位计算，取值，置位</p>\n</li>\n<li><p>高效地进行某些运算，代替其它低效的方式。</p>\n</li>\n<li><p>表示集合。（常用于 状压 DP 。）</p>\n</li>\n<li><p>要求进行位运算。</p>\n</li>\n</ul>\n<h3 id=\"常用运算\"><a href=\"#常用运算\" class=\"headerlink\" title=\"常用运算\"></a>常用运算</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>运算</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>取出整数 n 在二进制表示下的第 k 位</td>\n<td>(n &gt;&gt; k) &amp; 1</td>\n</tr>\n<tr>\n<td>取出整数n 在二进制表示下的第 0 ~ k - 1 位 (后 k 位)</td>\n<td>n &amp; ((1 &lt;&lt; k) - 1)</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位取反</td>\n<td>n xor (1 &lt;&lt; k)</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位赋值 1</td>\n<td>n</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位赋值 0</td>\n<td>n &amp; (~(1 &lt;&lt; k))</td>\n</tr>\n</tbody></table>\n<h3 id=\"表示集合\"><a href=\"#表示集合\" class=\"headerlink\" title=\"表示集合\"></a>表示集合</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>集合表示</th>\n<th>位运算语句</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>交集</td>\n<td>a∩b</td>\n<td>a &amp; b</td>\n</tr>\n<tr>\n<td>并集</td>\n<td>a∪b</td>\n<td>`a</td>\n</tr>\n<tr>\n<td>补集</td>\n<td>\\overline{a}</td>\n<td>~a （全集为二进制都是 1）</td>\n</tr>\n<tr>\n<td>差集</td>\n<td>a∖b</td>\n<td>a &amp; (~b)</td>\n</tr>\n<tr>\n<td>对称差</td>\n<td>a△b</td>\n<td>a ^ b</td>\n</tr>\n</tbody></table>\n<h3 id=\"实际代码\"><a href=\"#实际代码\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><ul>\n<li>幂运算</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 乘 2 的非负整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mulPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;  <span class=\"comment\">// 计算 n*(2^m)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &lt;&lt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 除以 2 的非负整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">divPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;  <span class=\"comment\">// 计算 n/(2^m)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &gt;&gt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对 2 的非负整数次幂取模</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">modPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> mod)</span> </span>&#123; <span class=\"keyword\">return</span> x &amp; (mod - <span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断一个数是不是 2 的正整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123; <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; (n &amp; (n - <span class=\"number\">1</span>)) == <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取绝对值,在某些机器上，效率比 n &gt; 0 ? n : -n 高。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Abs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (n ^ (n &gt;&gt; <span class=\"number\">31</span>)) - (n &gt;&gt; <span class=\"number\">31</span>);</span><br><span class=\"line\">  <span class=\"comment\">/* n&gt;&gt;31 取得 n 的符号，若 n 为正数，n&gt;&gt;31 等于 0，若 n 为负数，n&gt;&gt;31 等于 -1</span></span><br><span class=\"line\"><span class=\"comment\">     若 n 为正数 n^0=n, 数不变，若 n 为负数有 n^(-1)</span></span><br><span class=\"line\"><span class=\"comment\">     需要计算 n 和 -1 的补码，然后进行异或运算，</span></span><br><span class=\"line\"><span class=\"comment\">     结果 n 变号并且为 n 的绝对值减 1，再减去 -1 就是绝对值 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取两个数的最大/最小值</span></span><br><span class=\"line\"><span class=\"comment\">// 在某些机器上，效率比 a &gt; b ? a : b 高。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 a&gt;=b,(a-b)&gt;&gt;31 为 0，否则为 -1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> b &amp; ((a - b) &gt;&gt; <span class=\"number\">31</span>) | a &amp; (~(a - b) &gt;&gt; <span class=\"number\">31</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> a &amp; ((a - b) &gt;&gt; <span class=\"number\">31</span>) | b &amp; (~(a - b) &gt;&gt; <span class=\"number\">31</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断符号是否相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isSameSign</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;  <span class=\"comment\">// 有 0 的情况例外</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x ^ y) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交换两个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; a ^= b ^= a ^= b; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个数二进制的某一位</span></span><br><span class=\"line\"><span class=\"comment\">// 获取 a 的第 b 位，最低位编号为 0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getBit</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> (a &gt;&gt; b) &amp; <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>平常写除法是向 0 取整，而这里的右移是向下取整（注意这里的区别）:<br>即当数大于等于 0 时两种方法等价，当数小于 0 时会有区别，如： -1 / 2 的值为 0 ，而 -1 &gt;&gt; 1 的值为 −1 。</p>\n</blockquote>\n<h2 id=\"C-STL-bitset-容器\"><a href=\"#C-STL-bitset-容器\" class=\"headerlink\" title=\"C++ STL bitset 容器\"></a>C++ STL bitset 容器</h2><p>bitset 容器其实就是个01串。<br>可以被看作是一个bool数组。它比bool数组更优秀的优点是：</p>\n<ul>\n<li>节约空间</li>\n<li>节约时间 </li>\n<li>支持基本的位运算。在bitset容器中，8位占一个字节，相比于bool数组4位一个字节的空间利用率要高很多。同时，n位的bitset在执行一次位运算的复杂度可以被看作是n/32，这都是bool数组所没有的优秀性质。</li>\n</ul>\n<p>包含在自带的，<code>bitset</code> 头文件中：</p>\n<h3 id=\"bitset-容器的声明\"><a href=\"#bitset-容器的声明\" class=\"headerlink\" title=\"bitset 容器的声明\"></a>bitset 容器的声明</h3><p>因为bitset容器就是装01串的，所以不用在<code>&lt; &gt;</code>中装数据类型，这和一般的STL容器不太一样。<code>&lt; &gt;</code>中装01串的位数。</p>\n<p>如：（声明一个105位的bitset）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitset&lt;100000&gt; s;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对bitset容器的一些操作\"><a href=\"#对bitset容器的一些操作\" class=\"headerlink\" title=\"对bitset容器的一些操作\"></a>对bitset容器的一些操作</h3><h4 id=\"1、常用的操作函数\"><a href=\"#1、常用的操作函数\" class=\"headerlink\" title=\"1、常用的操作函数\"></a>1、常用的操作函数</h4><p>和其他的STL容器一样，对bitset的很多操作也是由自带函数来实现的</p>\n<h5 id=\"count-any-none\"><a href=\"#count-any-none\" class=\"headerlink\" title=\"count(), any(), none()\"></a>count(), any(), none()</h5><p>count，数数的意思。它的作用是数出1的个数。即s.count()返回s中有多少个1.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">count</span>(); <span class=\"comment\">// s中有多少个1.</span></span><br><span class=\"line\">s.<span class=\"built_in\">any</span>();   <span class=\"comment\">// s中存在0, true, 反之则为false</span></span><br><span class=\"line\">s.<span class=\"built_in\">none</span>();  <span class=\"comment\">// s中不存在0， true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"set-reset-flip\"><a href=\"#set-reset-flip\" class=\"headerlink\" title=\"set(), reset(), flip()\"></a>set(), reset(), flip()</h5><p>set()函数的作用是把bitset全部置为1.</p>\n<p>特别地，set()函数里面可以传参数。set(u,v)的意思是把bitset中的第u位变成v,v∈0/1。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">set</span>(); <span class=\"comment\">// 全部置为1</span></span><br><span class=\"line\">s.<span class=\"built_in\">set</span>(u,v); <span class=\"comment\">// 第u位变成v,v∈0/1</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">reset</span>(); <span class=\"comment\">// 所有位置为0</span></span><br><span class=\"line\">s.<span class=\"built_in\">reset</span>(k); <span class=\"comment\">// 第k位变成0</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">flip</span>(); <span class=\"comment\">//全部按位取反</span></span><br><span class=\"line\">s.<span class=\"built_in\">flip</span>(k);<span class=\"comment\">// 第k位取反</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、位运算操作在bitset中的实现\"><a href=\"#2、位运算操作在bitset中的实现\" class=\"headerlink\" title=\"2、位运算操作在bitset中的实现\"></a>2、位运算操作在bitset中的实现</h4><p>bitset的作用就是帮助我们方便地实现位运算的相关操作。它当然支持位运算的一些操作内容。编写程序的时候对数进行的二进制运算均可以用在bitset函数上。</p>\n<p>另外，bitset容器还支持直接取值和直接赋值的操作：具体操作方式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s[<span class=\"number\">3</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">s[<span class=\"number\">5</span>]=<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里要注意：在bitset容器中，最低位为0。这与数组实现仍然有区别。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitset的运算就像一个普通的整数一样，可以进行与(&amp;)、或(|)、异或(^)、左移(&lt;&lt;)、右移(&gt;&gt;)等操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bitset operators</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span>       <span class=\"comment\">// std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span>         <span class=\"comment\">// std::string</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span>         <span class=\"comment\">// std::bitset</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::bitset&lt;4&gt; <span class=\"title\">foo</span> <span class=\"params\">(std::string(<span class=\"string\">&quot;1001&quot;</span>))</span></span>;</span><br><span class=\"line\">  <span class=\"function\">std::bitset&lt;4&gt; <span class=\"title\">bar</span> <span class=\"params\">(std::string(<span class=\"string\">&quot;0011&quot;</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo^=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 1010 (XOR,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&amp;=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 0010 (AND,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo|=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 0011 (OR,assign)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&lt;&lt;=<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 1100 (SHL,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&gt;&gt;=<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0110 (SHR,assign)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (~bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;           <span class=\"comment\">// 1100 (NOT)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (bar&lt;&lt;<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;         <span class=\"comment\">// 0110 (SHL)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (bar&gt;&gt;<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;         <span class=\"comment\">// 0001 (SHR)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo==bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// false (0110==0011)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo!=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// true  (0110!=0011)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&amp;bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0010</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo|bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0111</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo^bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0101</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><ul>\n<li><p><code>&amp;</code> : 对应位都为1时，结果为1</p>\n</li>\n<li><p><code>|</code> : 对应位存在一个1时，结果为1</p>\n</li>\n<li><p><code>^</code> : 对应位不同时，结果为1</p>\n</li>\n</ul>\n<blockquote>\n<p>异或运算的逆元素是本身, 即两次异或同一个数，结果不变： <code>a ^ b ^ b = a</code></p>\n</blockquote>\n<ul>\n<li><code>~</code> : 对一个数进行单目运算，把这个数的补码中的 0 和 1 全部取反，<br>有符号整数的符号位在这 <code>~</code> 运算中同样会取反。</li>\n</ul>\n<blockquote>\n<p>补码： 在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。</p>\n</blockquote>\n<p>在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。</p>\n<p>$$<br>5 =(00000101)_2 \\<br>-5 =(11111010)_2 \\<br>-5_补 =(11111011)_2 \\<br>-(-5) =(00000100)_2 = 4<br>$$</p>\n<ul>\n<li><code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> : 将二进制向左（右）移动对应的位数的值，</li>\n</ul>\n<p>$$<br>11 =(00001011)_2 \\<br>11 &lt;&lt; 3 =(01011000)_2 = 88 \\<br>11 &gt;&gt; 2 =(00000010)_2 = 2<br>$$</p>\n<blockquote>\n<p>在 C++ 中，右移操作中右侧多余的位将会被舍弃，而左侧较为复杂：</p>\n<ul>\n<li>对于无符号数，会在左侧补 0；</li>\n<li>对于有符号数，则会用最高位的数（其实就是符号位，非负数为 0，负数为 1）补齐。左移操作总是在右侧补 0。</li>\n</ul>\n</blockquote>\n<h2 id=\"复合赋值位运算符\"><a href=\"#复合赋值位运算符\" class=\"headerlink\" title=\"复合赋值位运算符\"></a>复合赋值位运算符</h2><p>和 <code>+=</code> , <code>-=</code> 等运算符类似，位运算也有复合赋值运算符：<br><code>&amp;=</code> , <code>|=</code> , <code>^=</code> , <code>&lt;&lt;=</code> , <code>&gt;&gt;=</code> 。（取反是单目运算，所以没有。）</p>\n<blockquote>\n<p>位运算的优先级低于算术运算符（除了取反），而按位与、按位或及异或低于比较运算符，所以使用时需多加注意，在必要时添加括号。</p>\n</blockquote>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ul>\n<li><p>嵌入式中对寄存器进行按位计算，取值，置位</p>\n</li>\n<li><p>高效地进行某些运算，代替其它低效的方式。</p>\n</li>\n<li><p>表示集合。（常用于 状压 DP 。）</p>\n</li>\n<li><p>要求进行位运算。</p>\n</li>\n</ul>\n<h3 id=\"常用运算\"><a href=\"#常用运算\" class=\"headerlink\" title=\"常用运算\"></a>常用运算</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>运算</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>取出整数 n 在二进制表示下的第 k 位</td>\n<td>(n &gt;&gt; k) &amp; 1</td>\n</tr>\n<tr>\n<td>取出整数n 在二进制表示下的第 0 ~ k - 1 位 (后 k 位)</td>\n<td>n &amp; ((1 &lt;&lt; k) - 1)</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位取反</td>\n<td>n xor (1 &lt;&lt; k)</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位赋值 1</td>\n<td>n</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位赋值 0</td>\n<td>n &amp; (~(1 &lt;&lt; k))</td>\n</tr>\n</tbody></table>\n<h3 id=\"表示集合\"><a href=\"#表示集合\" class=\"headerlink\" title=\"表示集合\"></a>表示集合</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>集合表示</th>\n<th>位运算语句</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>交集</td>\n<td>a∩b</td>\n<td>a &amp; b</td>\n</tr>\n<tr>\n<td>并集</td>\n<td>a∪b</td>\n<td>`a</td>\n</tr>\n<tr>\n<td>补集</td>\n<td>\\overline{a}</td>\n<td>~a （全集为二进制都是 1）</td>\n</tr>\n<tr>\n<td>差集</td>\n<td>a∖b</td>\n<td>a &amp; (~b)</td>\n</tr>\n<tr>\n<td>对称差</td>\n<td>a△b</td>\n<td>a ^ b</td>\n</tr>\n</tbody></table>\n<h3 id=\"实际代码\"><a href=\"#实际代码\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><ul>\n<li>幂运算</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 乘 2 的非负整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mulPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;  <span class=\"comment\">// 计算 n*(2^m)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &lt;&lt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 除以 2 的非负整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">divPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;  <span class=\"comment\">// 计算 n/(2^m)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &gt;&gt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对 2 的非负整数次幂取模</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">modPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> mod)</span> </span>&#123; <span class=\"keyword\">return</span> x &amp; (mod - <span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断一个数是不是 2 的正整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123; <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; (n &amp; (n - <span class=\"number\">1</span>)) == <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取绝对值,在某些机器上，效率比 n &gt; 0 ? n : -n 高。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Abs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (n ^ (n &gt;&gt; <span class=\"number\">31</span>)) - (n &gt;&gt; <span class=\"number\">31</span>);</span><br><span class=\"line\">  <span class=\"comment\">/* n&gt;&gt;31 取得 n 的符号，若 n 为正数，n&gt;&gt;31 等于 0，若 n 为负数，n&gt;&gt;31 等于 -1</span></span><br><span class=\"line\"><span class=\"comment\">     若 n 为正数 n^0=n, 数不变，若 n 为负数有 n^(-1)</span></span><br><span class=\"line\"><span class=\"comment\">     需要计算 n 和 -1 的补码，然后进行异或运算，</span></span><br><span class=\"line\"><span class=\"comment\">     结果 n 变号并且为 n 的绝对值减 1，再减去 -1 就是绝对值 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取两个数的最大/最小值</span></span><br><span class=\"line\"><span class=\"comment\">// 在某些机器上，效率比 a &gt; b ? a : b 高。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 a&gt;=b,(a-b)&gt;&gt;31 为 0，否则为 -1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> b &amp; ((a - b) &gt;&gt; <span class=\"number\">31</span>) | a &amp; (~(a - b) &gt;&gt; <span class=\"number\">31</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> a &amp; ((a - b) &gt;&gt; <span class=\"number\">31</span>) | b &amp; (~(a - b) &gt;&gt; <span class=\"number\">31</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断符号是否相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isSameSign</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;  <span class=\"comment\">// 有 0 的情况例外</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x ^ y) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交换两个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; a ^= b ^= a ^= b; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个数二进制的某一位</span></span><br><span class=\"line\"><span class=\"comment\">// 获取 a 的第 b 位，最低位编号为 0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getBit</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> (a &gt;&gt; b) &amp; <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>平常写除法是向 0 取整，而这里的右移是向下取整（注意这里的区别）:<br>即当数大于等于 0 时两种方法等价，当数小于 0 时会有区别，如： -1 / 2 的值为 0 ，而 -1 &gt;&gt; 1 的值为 −1 。</p>\n</blockquote>\n<h2 id=\"C-STL-bitset-容器\"><a href=\"#C-STL-bitset-容器\" class=\"headerlink\" title=\"C++ STL bitset 容器\"></a>C++ STL bitset 容器</h2><p>bitset 容器其实就是个01串。<br>可以被看作是一个bool数组。它比bool数组更优秀的优点是：</p>\n<ul>\n<li>节约空间</li>\n<li>节约时间 </li>\n<li>支持基本的位运算。在bitset容器中，8位占一个字节，相比于bool数组4位一个字节的空间利用率要高很多。同时，n位的bitset在执行一次位运算的复杂度可以被看作是n/32，这都是bool数组所没有的优秀性质。</li>\n</ul>\n<p>包含在自带的，<code>bitset</code> 头文件中：</p>\n<h3 id=\"bitset-容器的声明\"><a href=\"#bitset-容器的声明\" class=\"headerlink\" title=\"bitset 容器的声明\"></a>bitset 容器的声明</h3><p>因为bitset容器就是装01串的，所以不用在<code>&lt; &gt;</code>中装数据类型，这和一般的STL容器不太一样。<code>&lt; &gt;</code>中装01串的位数。</p>\n<p>如：（声明一个105位的bitset）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitset&lt;100000&gt; s;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对bitset容器的一些操作\"><a href=\"#对bitset容器的一些操作\" class=\"headerlink\" title=\"对bitset容器的一些操作\"></a>对bitset容器的一些操作</h3><h4 id=\"1、常用的操作函数\"><a href=\"#1、常用的操作函数\" class=\"headerlink\" title=\"1、常用的操作函数\"></a>1、常用的操作函数</h4><p>和其他的STL容器一样，对bitset的很多操作也是由自带函数来实现的</p>\n<h5 id=\"count-any-none\"><a href=\"#count-any-none\" class=\"headerlink\" title=\"count(), any(), none()\"></a>count(), any(), none()</h5><p>count，数数的意思。它的作用是数出1的个数。即s.count()返回s中有多少个1.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">count</span>(); <span class=\"comment\">// s中有多少个1.</span></span><br><span class=\"line\">s.<span class=\"built_in\">any</span>();   <span class=\"comment\">// s中存在0, true, 反之则为false</span></span><br><span class=\"line\">s.<span class=\"built_in\">none</span>();  <span class=\"comment\">// s中不存在0， true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"set-reset-flip\"><a href=\"#set-reset-flip\" class=\"headerlink\" title=\"set(), reset(), flip()\"></a>set(), reset(), flip()</h5><p>set()函数的作用是把bitset全部置为1.</p>\n<p>特别地，set()函数里面可以传参数。set(u,v)的意思是把bitset中的第u位变成v,v∈0/1。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">set</span>(); <span class=\"comment\">// 全部置为1</span></span><br><span class=\"line\">s.<span class=\"built_in\">set</span>(u,v); <span class=\"comment\">// 第u位变成v,v∈0/1</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">reset</span>(); <span class=\"comment\">// 所有位置为0</span></span><br><span class=\"line\">s.<span class=\"built_in\">reset</span>(k); <span class=\"comment\">// 第k位变成0</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">flip</span>(); <span class=\"comment\">//全部按位取反</span></span><br><span class=\"line\">s.<span class=\"built_in\">flip</span>(k);<span class=\"comment\">// 第k位取反</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、位运算操作在bitset中的实现\"><a href=\"#2、位运算操作在bitset中的实现\" class=\"headerlink\" title=\"2、位运算操作在bitset中的实现\"></a>2、位运算操作在bitset中的实现</h4><p>bitset的作用就是帮助我们方便地实现位运算的相关操作。它当然支持位运算的一些操作内容。编写程序的时候对数进行的二进制运算均可以用在bitset函数上。</p>\n<p>另外，bitset容器还支持直接取值和直接赋值的操作：具体操作方式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s[<span class=\"number\">3</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">s[<span class=\"number\">5</span>]=<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里要注意：在bitset容器中，最低位为0。这与数组实现仍然有区别。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitset的运算就像一个普通的整数一样，可以进行与(&amp;)、或(|)、异或(^)、左移(&lt;&lt;)、右移(&gt;&gt;)等操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bitset operators</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span>       <span class=\"comment\">// std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span>         <span class=\"comment\">// std::string</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span>         <span class=\"comment\">// std::bitset</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::bitset&lt;4&gt; <span class=\"title\">foo</span> <span class=\"params\">(std::string(<span class=\"string\">&quot;1001&quot;</span>))</span></span>;</span><br><span class=\"line\">  <span class=\"function\">std::bitset&lt;4&gt; <span class=\"title\">bar</span> <span class=\"params\">(std::string(<span class=\"string\">&quot;0011&quot;</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo^=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 1010 (XOR,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&amp;=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 0010 (AND,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo|=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 0011 (OR,assign)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&lt;&lt;=<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 1100 (SHL,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&gt;&gt;=<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0110 (SHR,assign)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (~bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;           <span class=\"comment\">// 1100 (NOT)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (bar&lt;&lt;<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;         <span class=\"comment\">// 0110 (SHL)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (bar&gt;&gt;<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;         <span class=\"comment\">// 0001 (SHR)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo==bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// false (0110==0011)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo!=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// true  (0110!=0011)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&amp;bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0010</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo|bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0111</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo^bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0101</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckwsxf4t600055z9y0zc59gqi","category_id":"ckwsxf4t800075z9y31b29dqk","_id":"ckwsxf4tb000b5z9y7fwy5g7s"}],"PostTag":[{"post_id":"ckwsxf4sy00015z9yf30kdodc","tag_id":"ckwsxf4t300045z9y0xkf3j93","_id":"ckwsxf4ta00095z9y5b4y09qa"},{"post_id":"ckwsxf4t100035z9yamg1391z","tag_id":"ckwsxf4t900085z9yhs8t1mb1","_id":"ckwsxf4td000d5z9ydzbt0qjc"},{"post_id":"ckwsxf4t100035z9yamg1391z","tag_id":"ckwsxf4ta000a5z9y8i7o9vkr","_id":"ckwsxf4td000e5z9y0f1sfra4"},{"post_id":"ckwsxf4t600055z9y0zc59gqi","tag_id":"ckwsxf4t900085z9yhs8t1mb1","_id":"ckwsxf4te000h5z9yasr37vj9"},{"post_id":"ckwsxf4t600055z9y0zc59gqi","tag_id":"ckwsxf4td000f5z9ygav6791g","_id":"ckwsxf4te000i5z9yckwt9ykl"},{"post_id":"ckwsxf4t700065z9yg0fa9rqd","tag_id":"ckwsxf4td000g5z9y5u7ygmog","_id":"ckwsxf4te000k5z9y1wpiasfs"},{"post_id":"ckwsxf4t700065z9yg0fa9rqd","tag_id":"ckwsxf4te000j5z9yc8kf4ulj","_id":"ckwsxf4te000l5z9y9emh73kv"}],"Tag":[{"name":"adb","_id":"ckwsxf4t300045z9y0xkf3j93"},{"name":"Linux","_id":"ckwsxf4t900085z9yhs8t1mb1"},{"name":"gdb","_id":"ckwsxf4ta000a5z9y8i7o9vkr"},{"name":"C","_id":"ckwsxf4td000f5z9ygav6791g"},{"name":"bit op","_id":"ckwsxf4td000g5z9y5u7ygmog"},{"name":"c/cpp","_id":"ckwsxf4te000j5z9yc8kf4ulj"}]}}