{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/imgs/00_overview_source_arch.png","path":"imgs/00_overview_source_arch.png","modified":1,"renderable":0},{"_id":"source/imgs/memory.gif","path":"imgs/memory.gif","modified":1,"renderable":0},{"_id":"source/imgs/someip_sd_service_entry_type.png","path":"imgs/someip_sd_service_entry_type.png","modified":1,"renderable":0},{"_id":"source/imgs/vSOMEIP_source_messages_arch.png","path":"imgs/vSOMEIP_source_messages_arch.png","modified":1,"renderable":0},{"_id":"source/imgs/vSOMEIP_source_runtime.png","path":"imgs/vSOMEIP_source_runtime.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_abstraction.dio","path":"imgs/vsomeip_abstraction.dio","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_abstraction.png","path":"imgs/vsomeip_abstraction.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_configuration.png","path":"imgs/vsomeip_configuration.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_endpoint.png","path":"imgs/vsomeip_endpoint.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_example.png","path":"imgs/vsomeip_example.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_message.png","path":"imgs/vsomeip_message.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_payload.png","path":"imgs/vsomeip_payload.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_source_application.png","path":"imgs/vsomeip_source_application.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_source_daemon.png","path":"imgs/vsomeip_source_daemon.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_source_datatype.png","path":"imgs/vsomeip_source_datatype.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_source_endpoint.png","path":"imgs/vsomeip_source_endpoint.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_source_message.png","path":"imgs/vsomeip_source_message.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_source_overview.png","path":"imgs/vsomeip_source_overview.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_source_routing.png","path":"imgs/vsomeip_source_routing.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_source_routing_init.png","path":"imgs/vsomeip_source_routing_init.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_source_routing_start.png","path":"imgs/vsomeip_source_routing_start.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_source_sd_init.png","path":"imgs/vsomeip_source_sd_init.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_source_sd_start.png","path":"imgs/vsomeip_source_sd_start.png","modified":1,"renderable":0},{"_id":"source/imgs/vsomeip_source_service_discovery.png","path":"imgs/vsomeip_source_service_discovery.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Linux-Kernel-编译调试.md","hash":"49ee448e1f6d51dcf79c9a8cd0f9ed71815e4f76","modified":1637771953107},{"_id":"source/_posts/c-memory.md","hash":"f8bdf8ca2ed606afeac16e335d3f0d25e5428ee8","modified":1641223336761},{"_id":"source/_posts/huawei-adb.md","hash":"228d321442afaf0e22f2fbdf09d10215a7463257","modified":1638637567319},{"_id":"source/_posts/linux-system-programming.md","hash":"21343f3d8de3c0b401c9950dfe2f7ffd7e380816","modified":1637416670249},{"_id":"source/_posts/manjaro-swap.md","hash":"7abdd1af20fc878d1d586a171dffb866cb96ac0f","modified":1640511068279},{"_id":"source/_posts/osi-phy-mac.md","hash":"a5c943c1ef962b5a7d047d33e858847b9bb9591e","modified":1640513504654},{"_id":"source/_posts/service-discovery.md","hash":"292edb5b20423351487dd9170dbdca0a62f4b20d","modified":1640512404226},{"_id":"source/_posts/someip-00：-vsomeip.md","hash":"0d00b83ecabdc80366179fae92766749f48ab32b","modified":1640513097466},{"_id":"source/_posts/someip-01-code.md","hash":"edb7f6c5b9d6bdb00ce34db3e2256c0ae03cc2f0","modified":1640513334843},{"_id":"source/_posts/someip-02-vsomeip-with-ap.md","hash":"cda495452475b36ea91e39fd9978de8256f72ae1","modified":1640513488903},{"_id":"source/_posts/vSOMEIP-source-reading.md","hash":"26a0bce4aa0306f4336adf22f431eb603bc99f5e","modified":1641406453677},{"_id":"source/_posts/对象创建限制在堆或栈.md","hash":"ae6b8af9e4f46b028199f51874330a5f1a045a90","modified":1641741934257},{"_id":"source/_posts/常用位运算.md","hash":"7e1204a0f9b240e7a7888fae7284c691b651943f","modified":1638689399409},{"_id":"source/categories/index.md","hash":"8e2d32c6571cc7a429127391bd1e33a1c3abc7fc","modified":1637416670249},{"_id":"source/imgs/00_overview_source_arch.png","hash":"4cf396c37bc31920abc98834ec8fa7309643c53d","modified":1641406117120},{"_id":"source/imgs/memory.gif","hash":"684c8406656a77cb40bae38e8650c50a5be77b7a","modified":1641223248185},{"_id":"source/imgs/vSOMEIP_source_messages_arch.png","hash":"5b49a13d9ab1c9d022460402f1e7f85d55a9aeeb","modified":1641406130254},{"_id":"source/imgs/someip_sd_service_entry_type.png","hash":"7dae7499d30fdd50829c52e4d9abd89f78d7510c","modified":1640512735587},{"_id":"source/imgs/vsomeip_abstraction.dio","hash":"dd75ed69e615f4679772cb6db2d0fd46dd52e835","modified":1640512735607},{"_id":"source/imgs/vsomeip_abstraction.png","hash":"811d62048fba2ce9682fe6419b5a1764192660b8","modified":1640512735607},{"_id":"source/imgs/vsomeip_configuration.png","hash":"ce3151ef1717d360cd6519caf619bf490ac0f01a","modified":1640512903865},{"_id":"source/imgs/vsomeip_example.png","hash":"f408a4a159d65740d863dbb5fec721c0beda23b6","modified":1640512921704},{"_id":"source/imgs/vsomeip_message.png","hash":"12fcfb914c6c95d9f5cf2d52982bab304fc89a90","modified":1640512927366},{"_id":"source/imgs/vsomeip_payload.png","hash":"f62861fcf677a2b7358da8c2a17c30ada6df1b34","modified":1640512932959},{"_id":"source/imgs/vsomeip_source_daemon.png","hash":"b84530e7f99e1dad38b256de8d4a9a64ab921dec","modified":1640512941799},{"_id":"source/imgs/vsomeip_source_datatype.png","hash":"c8fbf20d1a61a037e6ab1ea2a3a66c3878f36b95","modified":1640512948503},{"_id":"source/imgs/vsomeip_source_endpoint.png","hash":"792735823f47affb04470f2fa01b583acb2caa55","modified":1640512953981},{"_id":"source/imgs/vsomeip_source_routing.png","hash":"52592ad4cb5c19b21889d4bd21e3e6ff77c669a0","modified":1640512976105},{"_id":"source/imgs/vsomeip_source_overview.png","hash":"d7732abfbe55cc2fac07134d4ca4062ed2e54ca1","modified":1640512962646},{"_id":"source/imgs/vsomeip_source_routing_init.png","hash":"1914bdd8432c37fb795e71972a5bb06f3d0ca455","modified":1640512967020},{"_id":"source/imgs/vsomeip_source_routing_start.png","hash":"f36a2c0b8ee43d296aa6b330eabf2ea1a37534e3","modified":1640512971575},{"_id":"source/imgs/vsomeip_source_sd_init.png","hash":"29fd36180cee3aa35bbc29a186d9d33f894201c8","modified":1640512980462},{"_id":"source/imgs/vsomeip_source_sd_start.png","hash":"c9b6cf86c9bb2f4140277b32f71f17c9622b2536","modified":1640512984902},{"_id":"source/imgs/vsomeip_source_service_discovery.png","hash":"4ab7c13a2e376ea421ff977497cb0ddd8b6d55ae","modified":1640512989266},{"_id":"source/tags/index.md","hash":"1fc2f9954bc72e1ed7ddba2779c6ccb12dcee5f3","modified":1637416670249},{"_id":"source/imgs/vsomeip_endpoint.png","hash":"a271c8f6f56e24bf02b89707feb5003780a50a04","modified":1640512914887},{"_id":"source/imgs/vSOMEIP_source_runtime.png","hash":"741fe233b1cbc367b5974b9d68a29261778d1e74","modified":1641406179890},{"_id":"source/imgs/vsomeip_source_application.png","hash":"96d93bb0c84495f695ee1bc5ce057c191521c8ae","modified":1640512937438},{"_id":"source/imgs/vsomeip_source_message.png","hash":"43f2e80914dc29aa54d7156961481576ad381890","modified":1640512958110},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1637416670249},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1637416670249},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1637416670249},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1637416670249},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1637416670253},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1637416670249},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1637416670249},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1637416670249},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1637416670249},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1637416670249},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1637416670249},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1637416670249},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1637416670249},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1637416670249},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1637416670249},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1637416670249},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1637416670249},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1637416670249},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1637416670249},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1637416670249},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1637416670249},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1637416670249},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1637416670249},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1637416670249},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1637416670249},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1637416670249},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1637416670249},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1637416670249},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1637416670253},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1637416670253},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1637416670253},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1637416670253},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1637416670253},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1637416670253},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1637416670253},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1637416670249},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1637416670249},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1637416670249},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1637416670249},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1637416670249},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1637416670249},{"_id":"themes/next/_config.yml","hash":"9d5153f1612b02ed3e82790351dde8a69c331458","modified":1641742853667},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1637416670249},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1637416670249},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1637416670253},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1637416670253},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1637416670253},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1637416670253},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1637416670253},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1637416670253},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1637416670253},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1637416670253},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1637416670253},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1637416670253},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1637416670253},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1637416670253},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1637416670253},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1637416670249},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1637416670253},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1637416670253},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1637416670253},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1637416670253},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1637416670253},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1637416670253},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1637416670253},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1637416670253},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1637416670253},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1637416670253},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1637416670253},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1637416670253},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1637416670253},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1637416670253},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1637416670253},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1637416670253},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1637416670253},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1637416670256},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1637416670256},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1637416670256},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1637416670256},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1637416670256},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1637416670256},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1637416670256},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1637416670256},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1637416670256},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1637416670256},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1637416670256},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1637416670256},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1637416670256},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1637416670249},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1637416670249},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1637416670256},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1637416670249},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1637416670256},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1637416670249},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1637416670256},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1637416670249},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1637416670249},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1637416670249},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1637416670249},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1637416670249},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1637416670249},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1637416670249},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1637416670253},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1637416670253},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1637416670249},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1637416670253},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1637416670253},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1637416670253},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1637416670253},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1637416670253},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1637416670253},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1637416670253},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1637416670253},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1637416670253},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1637416670249},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1637416670253},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1637416670253},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1637416670249},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1637416670253},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1637416670253},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1637416670253},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1637416670253},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1637416670253},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1637416670253},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1637416670253},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1637416670253},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1637416670253},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1637416670253},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1637416670256},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1637416670256},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1637416670256},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1637416670256},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1637416670256},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1637416670256},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1637416670256},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1637416670253},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1637416670256},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1637416670253},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1637416670256},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1637416670253},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1637416670256},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1637416670256},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1637416670253},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1637416670256},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1637416670253},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1637416670256},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1637416670256},{"_id":"public/categories/index.html","hash":"178c4c338af47640f3e47a504a367446d01799e4","modified":1641742890515},{"_id":"public/tags/index.html","hash":"215b19d691d363045213313d8fc0f50b2907486a","modified":1641742890515},{"_id":"public/archives/page/2/index.html","hash":"cd8223176857905be8504f07ea8231a2ff47825f","modified":1641742890515},{"_id":"public/archives/2021/11/index.html","hash":"44320c0ab323eda4d7427617cf9c256579a1cfa0","modified":1641742890515},{"_id":"public/archives/2022/index.html","hash":"09a4bea4a93fd21b59cd6d3f24fa68b87c987f60","modified":1641742890515},{"_id":"public/archives/2022/01/index.html","hash":"55b74f8e4f6e5543b054dc65d2f81f528cb3458e","modified":1641742890515},{"_id":"public/categories/Linux编程/index.html","hash":"ffbe43c56651c3d4ab2bbb6c7beaed6c0cb5d83a","modified":1641742890515},{"_id":"public/categories/concepts/index.html","hash":"813c572281040199713eb4ec9b8051d5e93558ab","modified":1641742890515},{"_id":"public/tags/Linux/index.html","hash":"1a9d8815abcb664e58c3a0bc2cca6c4c52f7b72c","modified":1641742890515},{"_id":"public/tags/gdb/index.html","hash":"cb2e20a34c288c740ad5c073fd6805ebfc515b4b","modified":1641742890515},{"_id":"public/tags/C/index.html","hash":"6256972d00a677342a66cced4744deff843090c6","modified":1641742890515},{"_id":"public/tags/Memory/index.html","hash":"3551b3c6caeede25f73f0a7bcb189174f999320c","modified":1641742890515},{"_id":"public/tags/Notes/index.html","hash":"74d85f36dca831819c3e394467eeef4462eaa871","modified":1641742890515},{"_id":"public/tags/adb/index.html","hash":"267f5b12fd0958697743b1f6b220e67d8db2edb9","modified":1641742890515},{"_id":"public/tags/osi/index.html","hash":"4ae751781556f738d8828e8ac83b4765df550b11","modified":1641742890515},{"_id":"public/tags/phy/index.html","hash":"628d063ddbbff93e7f36084e81266ee3f5d58b1b","modified":1641742890515},{"_id":"public/tags/mac/index.html","hash":"9181667dd9e6571c41615c46ca3e2daa43d81279","modified":1641742890515},{"_id":"public/tags/someip-sd/index.html","hash":"539821493b86faf54a817c0227a0f4216e966f03","modified":1641742890515},{"_id":"public/tags/service-discovery/index.html","hash":"0fac891ae3bdd90881f04dbcc3bab53dff541116","modified":1641742890515},{"_id":"public/tags/someip/index.html","hash":"523a8feb2013679688b21d65177637bed27f82c6","modified":1641742890515},{"_id":"public/tags/vSOMEIP/index.html","hash":"09a3a922597a1f98cc3daf7d4367224d33953368","modified":1641742890515},{"_id":"public/tags/CPP/index.html","hash":"9e440660c596139117baf3c588d0afea035ed498","modified":1641742890515},{"_id":"public/tags/SOMEIP/index.html","hash":"b37a1b5ed9ef44b43e90ff3dca35c14a76c93eb0","modified":1641742890515},{"_id":"public/tags/sources/index.html","hash":"fce4f7c801e673b75ac17a7ca0d06c90cdf72fa8","modified":1641742890515},{"_id":"public/tags/notes/index.html","hash":"6f2d38ad8d3a6a50aa13600371545fb38cd4b4b8","modified":1641742890515},{"_id":"public/tags/cpp/index.html","hash":"8a161c885ee516bb41dab8a91d5a3702397b263f","modified":1641742890515},{"_id":"public/tags/bit-op/index.html","hash":"1bde716f5a3585bd3a5aaa63b7f13f2a273db618","modified":1641742890515},{"_id":"public/tags/c-cpp/index.html","hash":"78fe9d52ec3120fe1d0d064e1568bc24da1b3e4a","modified":1641742890515},{"_id":"public/2022/01/08/对象创建限制在堆或栈/index.html","hash":"24dc80b16dd864d1b5cf15fb3a1bc586c0f7edee","modified":1641742890515},{"_id":"public/2022/01/06/vSOMEIP-source-reading/index.html","hash":"74a8a94f2ca297c5e209ae979fbb7905b6cea94a","modified":1641742890515},{"_id":"public/2022/01/03/c-memory/index.html","hash":"0aea12414c69ec0cd9cc4be6b9306e0878fe0074","modified":1641742890515},{"_id":"public/2021/12/26/service-discovery/index.html","hash":"acbb4e8e53662d749daad47240a27edaf63070fc","modified":1641742890515},{"_id":"public/2021/12/23/osi-phy-mac/index.html","hash":"20983e60951fa3e3abffe3118aefc6cf7806daea","modified":1641742890515},{"_id":"public/2021/12/22/someip-02-vsomeip-with-ap/index.html","hash":"c914d0e644dd6f72ede4f69bf85979f09b63b05c","modified":1641742890515},{"_id":"public/2021/12/21/someip-01-code/index.html","hash":"1acab2c2ca35f87fed52ad150b73fd675d5007e0","modified":1641742890515},{"_id":"public/2021/12/20/someip-00：-vsomeip/index.html","hash":"58a6e9224ffa99c70e8d523e94ecd04b6a5f606c","modified":1641742890515},{"_id":"public/2021/12/16/manjaro-swap/index.html","hash":"c103b2907b90ed444e0a9bf4b62bf33f89f9476c","modified":1641742890515},{"_id":"public/2021/12/05/常用位运算/index.html","hash":"3e7ee371260ea6b4bb8efc8bbd236971913a56c2","modified":1641742890515},{"_id":"public/2021/12/05/huawei-adb/index.html","hash":"2456af7cec7e1ad338d6f895123d022ad76f36e9","modified":1641742890515},{"_id":"public/2021/11/24/Linux-Kernel-编译调试/index.html","hash":"1653060a152303d89f4cbb755cae812ca6e527f3","modified":1641742890515},{"_id":"public/2021/11/20/linux-system-programming/index.html","hash":"ee64fcd3455e8f3ce9c37ece3ef8cc67fce4033d","modified":1641742890515},{"_id":"public/archives/index.html","hash":"db499839dcfed0f321089945d484455770f976f8","modified":1641742890515},{"_id":"public/archives/2021/index.html","hash":"cee8425521dea09169dc253f903d238ab4311702","modified":1641742890515},{"_id":"public/archives/2021/12/index.html","hash":"f256fb9d7f221682298cf7d744ca24a87c581a9e","modified":1641742890515},{"_id":"public/index.html","hash":"4d7772741af58a1ddd495d4a99d0f8f93d145d7e","modified":1641742890515},{"_id":"public/page/2/index.html","hash":"9c29f3be8a9a3a78e8b50a8e2edde92a4afe6384","modified":1641742890515},{"_id":"public/page/3/index.html","hash":"ef643ccc199e5083ce1f314c4086e444d8afb388","modified":1641742890515},{"_id":"public/page/4/index.html","hash":"c8aa7e86ab0239e09779d254de0a4e90a550452c","modified":1641742890515},{"_id":"public/page/5/index.html","hash":"a60f6ba68254a4c060e35fee6fe8bb2be35ae30f","modified":1641742890515},{"_id":"public/page/6/index.html","hash":"2e7f6dde38bc026582f72c46096721912cb1d80f","modified":1641742890515},{"_id":"public/page/7/index.html","hash":"7b182fc24b9bc9cf2e5c920a29c500ccddd24802","modified":1641742890515},{"_id":"public/page/8/index.html","hash":"6dc9649fec0626b37b417e37b6bcd31985c45043","modified":1641742890515},{"_id":"public/page/9/index.html","hash":"96eb13c0b5753d40b8c7e7a895cfd18bf66d2655","modified":1641742890515},{"_id":"public/page/10/index.html","hash":"8ab4d266e3a7655731774082918f87c551a54601","modified":1641742890515},{"_id":"public/page/11/index.html","hash":"d1e3ee07d060a9726b3f0a384626dd944c85f464","modified":1641742890515},{"_id":"public/page/12/index.html","hash":"7a26dc02e9ca1e0095ab79e5f01f6ef627c1c925","modified":1641742890515},{"_id":"public/page/13/index.html","hash":"5c6ee85c1ce575988980c1e766319e940cf1bb7e","modified":1641742890515},{"_id":"public/imgs/00_overview_source_arch.png","hash":"4cf396c37bc31920abc98834ec8fa7309643c53d","modified":1641742890515},{"_id":"public/imgs/memory.gif","hash":"684c8406656a77cb40bae38e8650c50a5be77b7a","modified":1641742890515},{"_id":"public/imgs/someip_sd_service_entry_type.png","hash":"7dae7499d30fdd50829c52e4d9abd89f78d7510c","modified":1641742890515},{"_id":"public/imgs/vSOMEIP_source_messages_arch.png","hash":"5b49a13d9ab1c9d022460402f1e7f85d55a9aeeb","modified":1641742890515},{"_id":"public/imgs/vsomeip_abstraction.dio","hash":"dd75ed69e615f4679772cb6db2d0fd46dd52e835","modified":1641742890515},{"_id":"public/imgs/vsomeip_configuration.png","hash":"ce3151ef1717d360cd6519caf619bf490ac0f01a","modified":1641742890515},{"_id":"public/imgs/vsomeip_abstraction.png","hash":"811d62048fba2ce9682fe6419b5a1764192660b8","modified":1641742890515},{"_id":"public/imgs/vsomeip_example.png","hash":"f408a4a159d65740d863dbb5fec721c0beda23b6","modified":1641742890515},{"_id":"public/imgs/vsomeip_message.png","hash":"12fcfb914c6c95d9f5cf2d52982bab304fc89a90","modified":1641742890515},{"_id":"public/imgs/vsomeip_payload.png","hash":"f62861fcf677a2b7358da8c2a17c30ada6df1b34","modified":1641742890515},{"_id":"public/imgs/vsomeip_source_daemon.png","hash":"b84530e7f99e1dad38b256de8d4a9a64ab921dec","modified":1641742890515},{"_id":"public/imgs/vsomeip_source_endpoint.png","hash":"792735823f47affb04470f2fa01b583acb2caa55","modified":1641742890515},{"_id":"public/imgs/vsomeip_source_datatype.png","hash":"c8fbf20d1a61a037e6ab1ea2a3a66c3878f36b95","modified":1641742890515},{"_id":"public/imgs/vsomeip_source_overview.png","hash":"d7732abfbe55cc2fac07134d4ca4062ed2e54ca1","modified":1641742890515},{"_id":"public/imgs/vsomeip_source_routing_init.png","hash":"1914bdd8432c37fb795e71972a5bb06f3d0ca455","modified":1641742890515},{"_id":"public/imgs/vsomeip_source_routing_start.png","hash":"f36a2c0b8ee43d296aa6b330eabf2ea1a37534e3","modified":1641742890515},{"_id":"public/imgs/vsomeip_source_routing.png","hash":"52592ad4cb5c19b21889d4bd21e3e6ff77c669a0","modified":1641742890515},{"_id":"public/imgs/vsomeip_source_sd_init.png","hash":"29fd36180cee3aa35bbc29a186d9d33f894201c8","modified":1641742890515},{"_id":"public/imgs/vsomeip_source_sd_start.png","hash":"c9b6cf86c9bb2f4140277b32f71f17c9622b2536","modified":1641742890515},{"_id":"public/imgs/vsomeip_source_service_discovery.png","hash":"4ab7c13a2e376ea421ff977497cb0ddd8b6d55ae","modified":1641742890515},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1641742890515},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1641742890515},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1641742890515},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1641742890515},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1641742890515},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1641742890515},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1641742890515},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1641742890515},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1641742890515},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1641742890515},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1641742890515},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1641742890515},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1641742890515},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1641742890515},{"_id":"public/imgs/vsomeip_endpoint.png","hash":"a271c8f6f56e24bf02b89707feb5003780a50a04","modified":1641742890515},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1641742890515},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1641742890515},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1641742890515},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1641742890515},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1641742890515},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1641742890515},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1641742890515},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1641742890515},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1641742890515},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1641742890515},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1641742890515},{"_id":"public/css/main.css","hash":"c8d9f028cbae4f751000fc79c79d1bc4084a099a","modified":1641742890515},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1641742890515},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1641742890515},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1641742890515},{"_id":"public/imgs/vSOMEIP_source_runtime.png","hash":"741fe233b1cbc367b5974b9d68a29261778d1e74","modified":1641742890515},{"_id":"public/imgs/vsomeip_source_application.png","hash":"96d93bb0c84495f695ee1bc5ce057c191521c8ae","modified":1641742890515},{"_id":"public/imgs/vsomeip_source_message.png","hash":"43f2e80914dc29aa54d7156961481576ad381890","modified":1641742890515}],"Category":[{"name":"Linux编程","_id":"cky7fbtve0009z59y4vxmf98t"},{"name":"concepts","_id":"cky7fbtvm000lz59y1of13xgr"}],"Data":[],"Page":[{"title":"categories","date":"2021-11-20T11:33:51.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-11-20 19:33:51\ntype: \"categories\"\n---\n","updated":"2021-11-20T13:57:50.249Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cky7fbtv20000z59y4lufepe0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-11-20T11:34:15.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-11-20 19:34:15\ntype: \"tags\"\n---\n","updated":"2021-11-20T13:57:50.249Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cky7fbtv70002z59y5872f4xe","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Linux Kernel 编译调试（Qemu + gdb）","date":"2021-11-24T14:03:26.000Z","_content":"\n## 编译环境\n\n```bash\n\n ██████████████████  ████████     4soos@dev\n ██████████████████  ████████     OS: Manjaro 21.2.0 Qonos\n ██████████████████  ████████     Kernel: x86_64 Linux 5.10.79-1-MANJARO\n ██████████████████  ████████     Uptime: 19m\n ████████            ████████     Packages: 1324\n ████████  ████████  ████████     Shell: bash 5.1.8\n ████████  ████████  ████████     Resolution: 2560x1440\n ████████  ████████  ████████     DE: GNOME 41.1\n ████████  ████████  ████████     WM: Mutter\n ████████  ████████  ████████     WM Theme: \n ████████  ████████  ████████     GTK Theme: Matcha-dark-pueril [GTK2/3]\n ████████  ████████  ████████     Icon Theme: Papirus-Adapta-Maia\n ████████  ████████  ████████     Font: Noto Sans 12\n ████████  ████████  ████████     Disk: 150G / 946G (17%)\n                                  CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz\n                                  GPU: AMD RENOIR (DRM 3.40.0, 5.10.79-1-MANJARO, LLVM 13.0.0)\n                                  RAM: 2030MiB / 15453MiB\n\n```\n\n## 源码： \n\nhttps://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz\n\n\n## 工具集\n```bash\nyay -S base-devel\n```\n\n## 编译步骤\n```bash\nmake menuconfig # 内核配置， 可以默认配置\n\nmake -j$(nproc) # -j job 一般为线程数\n\n......\n\narch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x6455b190)\nKernel: arch/x86/boot/bzImage is ready  (#1)\n\n```\n编好之后的产物为 `arch/x86/boot/bzImage`。\n\n## rootfs 和文件系统简介\n\n`rootfs`是基于内存的文件系统，所有操作都在内存中完成；也没有实际的存储设备，所以不需要设备驱动程序的参与。\n基于以上原因，linux在启动阶段使用`rootfs`文件系统，当磁盘驱动程序和磁盘文件系统成功加载后，linux系统会将系统根目录从`rootfs`切换到磁盘文件系统。\n\n大致的启动流程\n\n```\nstart_kernel\n　　vfs_caches_init\n　　　　mnt_init\n　　　　　　init_rootfs注册rootfs文件系统\n　　　　　　init_mount_tree 挂载rootfs文件系统\n　　　　　　　　vfs_kern_mount\n　　　　　　　　　　mount_fs\n　　　　　　　　　　　　type->mount其实是rootfs_mount\n　　　　　　　　　　　　　　mount_nodev\n　　　　　　　　　　　　　　　　fill_super 其实是ramfs_fill_super\n　　　　　　　　　　　　　　　　　　inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi->mount_opts.mode, 0);\n　　　　　　　　　　　　　　　　　　sb->s_root = d_make_root(inode);\n　　　　　　　　　　　　　　　　　　　　static const struct qstr name = QSTR_INIT(“/”, 1);[1*]\n　　　　　　　　　　　　　　　　　　　　__d_alloc(root_inode->i_sb, &name);\n　　　　　　　　　　…\n　　　　　　　　　　mnt->mnt.mnt_root = root;[2*]\n　　　　　　　　　　mnt->mnt.mnt_sb = root->d_sb;[3*]\n　　　　　　　　　　mnt->mnt_mountpoint = mnt->mnt.mnt_root;[4*]\n　　　　　　　　　　mnt->mnt_parent = mnt;[5*]\nroot.mnt = mnt;\n　　　　　　　　root.dentry = mnt->mnt_root;\n　　　　　　　　mnt->mnt_flags |= MNT_LOCKED;\n　　　　　　　　set_fs_pwd(current->fs, &root);\n　　　　　　　　set_fs_root(current->fs, &root);\n　　…\n　　rest_init\n　　kernel_thread(kernel_init, NULL, CLONE_FS);\n\n```\n正常来说，根文件系统至少包括以下目录：\n\n* /etc/：存储重要的配置文件。\n\n* /bin/：存储常用且开机时必须用到的执行文件。\n\n* /sbin/：存储着开机过程中所需的系统执行文件。\n\n* /lib/：存储/bin/及/sbin/的执行文件所需的链接库，以及Linux的内核模块。\n\n* /dev/：存储设备文件。\n\n> 以上列举出的目录必须存储在根文件系统上，缺一不可。\n\n* /proc\n\n这是一个空目录，常作为proc文件系统的挂接点，proc文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。\n\n### 制作一个临时的rootfs\n```bash\ntouch main.c\nvim main.c\n```\n\n#### 代码\n\n```c\n#include <stdio.h>\n\nint main()\n{\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    fflush(stdout);\n    while(1) {\n        printf(\"linux-5.14 > \\n\");\n    };\n    return 0;\n}\n\n```\n\n#### 生成rootfs\n\n```bash\ngcc --static -o hello_kernel main.c\necho hello_kernel | cpio -o --format=newc > rootfs\n```\n\n#### QEMU 启动\n```bash\nqemu-system-x86_64 \\\n> -kernel ./arch/x86/boot/bzImage \\\n> -initrd ./rootfs \\\n> -append \"root=/dev/ram rdinit=hello_kernel\" \\\n> -smp 2 \\\n> -s -S\n\n```\n这时的Qemu 会进入等待状态, \n\n#### GDB 启动\n```\ngdb ./vmlinux\n......\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from ./vmlinux...\n(gdb) target remote:1234\nRemote debugging using :1234\n0x000000000000fff0 in exception_stacks ()\n(gdb) b start_kernel\nBreakpoint 1 at 0xfff0\n(gdb) c\nContinuing.\n\n```\n\n_target remote:1234_， gdb 连接上qemu,\n\n_b start_kernel_， 设置断点： `start_kernel`\n\n_c_， 继续执行：\n\n\n##  VS Code 上面调试\n\n需要安装好gdb插件\n然后, 三个配置文件：\n\nc_cpp_properties.json\n\n```json\n{\n    \"configurations\": [\n        {\n            \"name\": \"Linux kernel\",\n            \"cStandard\": \"c11\",\n            \"intelliSenseMode\": \"linux-clang-x64\",\n            \"compileCommands\": \"${}/compile_commands.json\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\nlaunch.json\n\n```json\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n\n        {\n            \"name\": \"(gdb) Launch\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"qemu\",\n            \"miDebuggerServerAddress\":\"127.0.0.1:1234\",\n            \"program\": \"${workspaceFolder}/vmlinux\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${fileDirname}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ]\n        }\n    ]\n}\n```\n\ntasks.json\n```json\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n      {\n        \"label\": \"qemu\",\n        \"type\": \"shell\",\n        \"command\": \"qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ./rootfs -append \\\"root=/dev/ram rdinit=hello_kernel\\\" -smp 2 -s -S\",\n        \"presentation\": {\n          \"echo\": true,\n          \"clear\": true,\n          \"group\": \"qemu\"\n        },\n        \"isBackground\": true,\n        \"problemMatcher\": [\n          {\n            \"pattern\": [\n              {\n                \"regexp\": \".\",\n                \"file\": 1,\n                \"location\": 2,\n                \"message\": 3\n              }\n            ],\n            \"background\": {\n              \"activeOnStart\": true,\n              \"beginsPattern\": \".\",\n              \"endsPattern\": \".\"\n            }\n          }\n        ]\n      },\n      {\n        \"label\": \"build\",\n        \"type\": \"shell\",\n        \"command\": \"make\",\n        \"group\": {\n          \"kind\": \"build\",\n          \"isDefault\": true\n        },\n        \"presentation\": {\n          \"echo\": false,\n          \"group\": \"build\"\n        }\n      }\n    ]\n  }\n```\n\n\n","source":"_posts/Linux-Kernel-编译调试.md","raw":"---\ntitle: Linux Kernel 编译调试（Qemu + gdb）\ndate: 2021-11-24 22:03:26\ntags:\n    - Linux\n    - gdb\n---\n\n## 编译环境\n\n```bash\n\n ██████████████████  ████████     4soos@dev\n ██████████████████  ████████     OS: Manjaro 21.2.0 Qonos\n ██████████████████  ████████     Kernel: x86_64 Linux 5.10.79-1-MANJARO\n ██████████████████  ████████     Uptime: 19m\n ████████            ████████     Packages: 1324\n ████████  ████████  ████████     Shell: bash 5.1.8\n ████████  ████████  ████████     Resolution: 2560x1440\n ████████  ████████  ████████     DE: GNOME 41.1\n ████████  ████████  ████████     WM: Mutter\n ████████  ████████  ████████     WM Theme: \n ████████  ████████  ████████     GTK Theme: Matcha-dark-pueril [GTK2/3]\n ████████  ████████  ████████     Icon Theme: Papirus-Adapta-Maia\n ████████  ████████  ████████     Font: Noto Sans 12\n ████████  ████████  ████████     Disk: 150G / 946G (17%)\n                                  CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz\n                                  GPU: AMD RENOIR (DRM 3.40.0, 5.10.79-1-MANJARO, LLVM 13.0.0)\n                                  RAM: 2030MiB / 15453MiB\n\n```\n\n## 源码： \n\nhttps://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz\n\n\n## 工具集\n```bash\nyay -S base-devel\n```\n\n## 编译步骤\n```bash\nmake menuconfig # 内核配置， 可以默认配置\n\nmake -j$(nproc) # -j job 一般为线程数\n\n......\n\narch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x6455b190)\nKernel: arch/x86/boot/bzImage is ready  (#1)\n\n```\n编好之后的产物为 `arch/x86/boot/bzImage`。\n\n## rootfs 和文件系统简介\n\n`rootfs`是基于内存的文件系统，所有操作都在内存中完成；也没有实际的存储设备，所以不需要设备驱动程序的参与。\n基于以上原因，linux在启动阶段使用`rootfs`文件系统，当磁盘驱动程序和磁盘文件系统成功加载后，linux系统会将系统根目录从`rootfs`切换到磁盘文件系统。\n\n大致的启动流程\n\n```\nstart_kernel\n　　vfs_caches_init\n　　　　mnt_init\n　　　　　　init_rootfs注册rootfs文件系统\n　　　　　　init_mount_tree 挂载rootfs文件系统\n　　　　　　　　vfs_kern_mount\n　　　　　　　　　　mount_fs\n　　　　　　　　　　　　type->mount其实是rootfs_mount\n　　　　　　　　　　　　　　mount_nodev\n　　　　　　　　　　　　　　　　fill_super 其实是ramfs_fill_super\n　　　　　　　　　　　　　　　　　　inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi->mount_opts.mode, 0);\n　　　　　　　　　　　　　　　　　　sb->s_root = d_make_root(inode);\n　　　　　　　　　　　　　　　　　　　　static const struct qstr name = QSTR_INIT(“/”, 1);[1*]\n　　　　　　　　　　　　　　　　　　　　__d_alloc(root_inode->i_sb, &name);\n　　　　　　　　　　…\n　　　　　　　　　　mnt->mnt.mnt_root = root;[2*]\n　　　　　　　　　　mnt->mnt.mnt_sb = root->d_sb;[3*]\n　　　　　　　　　　mnt->mnt_mountpoint = mnt->mnt.mnt_root;[4*]\n　　　　　　　　　　mnt->mnt_parent = mnt;[5*]\nroot.mnt = mnt;\n　　　　　　　　root.dentry = mnt->mnt_root;\n　　　　　　　　mnt->mnt_flags |= MNT_LOCKED;\n　　　　　　　　set_fs_pwd(current->fs, &root);\n　　　　　　　　set_fs_root(current->fs, &root);\n　　…\n　　rest_init\n　　kernel_thread(kernel_init, NULL, CLONE_FS);\n\n```\n正常来说，根文件系统至少包括以下目录：\n\n* /etc/：存储重要的配置文件。\n\n* /bin/：存储常用且开机时必须用到的执行文件。\n\n* /sbin/：存储着开机过程中所需的系统执行文件。\n\n* /lib/：存储/bin/及/sbin/的执行文件所需的链接库，以及Linux的内核模块。\n\n* /dev/：存储设备文件。\n\n> 以上列举出的目录必须存储在根文件系统上，缺一不可。\n\n* /proc\n\n这是一个空目录，常作为proc文件系统的挂接点，proc文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。\n\n### 制作一个临时的rootfs\n```bash\ntouch main.c\nvim main.c\n```\n\n#### 代码\n\n```c\n#include <stdio.h>\n\nint main()\n{\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    fflush(stdout);\n    while(1) {\n        printf(\"linux-5.14 > \\n\");\n    };\n    return 0;\n}\n\n```\n\n#### 生成rootfs\n\n```bash\ngcc --static -o hello_kernel main.c\necho hello_kernel | cpio -o --format=newc > rootfs\n```\n\n#### QEMU 启动\n```bash\nqemu-system-x86_64 \\\n> -kernel ./arch/x86/boot/bzImage \\\n> -initrd ./rootfs \\\n> -append \"root=/dev/ram rdinit=hello_kernel\" \\\n> -smp 2 \\\n> -s -S\n\n```\n这时的Qemu 会进入等待状态, \n\n#### GDB 启动\n```\ngdb ./vmlinux\n......\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from ./vmlinux...\n(gdb) target remote:1234\nRemote debugging using :1234\n0x000000000000fff0 in exception_stacks ()\n(gdb) b start_kernel\nBreakpoint 1 at 0xfff0\n(gdb) c\nContinuing.\n\n```\n\n_target remote:1234_， gdb 连接上qemu,\n\n_b start_kernel_， 设置断点： `start_kernel`\n\n_c_， 继续执行：\n\n\n##  VS Code 上面调试\n\n需要安装好gdb插件\n然后, 三个配置文件：\n\nc_cpp_properties.json\n\n```json\n{\n    \"configurations\": [\n        {\n            \"name\": \"Linux kernel\",\n            \"cStandard\": \"c11\",\n            \"intelliSenseMode\": \"linux-clang-x64\",\n            \"compileCommands\": \"${}/compile_commands.json\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\nlaunch.json\n\n```json\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n\n        {\n            \"name\": \"(gdb) Launch\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"qemu\",\n            \"miDebuggerServerAddress\":\"127.0.0.1:1234\",\n            \"program\": \"${workspaceFolder}/vmlinux\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${fileDirname}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ]\n        }\n    ]\n}\n```\n\ntasks.json\n```json\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n      {\n        \"label\": \"qemu\",\n        \"type\": \"shell\",\n        \"command\": \"qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ./rootfs -append \\\"root=/dev/ram rdinit=hello_kernel\\\" -smp 2 -s -S\",\n        \"presentation\": {\n          \"echo\": true,\n          \"clear\": true,\n          \"group\": \"qemu\"\n        },\n        \"isBackground\": true,\n        \"problemMatcher\": [\n          {\n            \"pattern\": [\n              {\n                \"regexp\": \".\",\n                \"file\": 1,\n                \"location\": 2,\n                \"message\": 3\n              }\n            ],\n            \"background\": {\n              \"activeOnStart\": true,\n              \"beginsPattern\": \".\",\n              \"endsPattern\": \".\"\n            }\n          }\n        ]\n      },\n      {\n        \"label\": \"build\",\n        \"type\": \"shell\",\n        \"command\": \"make\",\n        \"group\": {\n          \"kind\": \"build\",\n          \"isDefault\": true\n        },\n        \"presentation\": {\n          \"echo\": false,\n          \"group\": \"build\"\n        }\n      }\n    ]\n  }\n```\n\n\n","slug":"Linux-Kernel-编译调试","published":1,"updated":"2021-11-24T16:39:13.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtv50001z59y8teb8ob9","content":"<h2 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">██████████████████  ████████     4soos@dev</span><br><span class=\"line\">██████████████████  ████████     OS: Manjaro 21.2.0 Qonos</span><br><span class=\"line\">██████████████████  ████████     Kernel: x86_64 Linux 5.10.79-1-MANJARO</span><br><span class=\"line\">██████████████████  ████████     Uptime: 19m</span><br><span class=\"line\">████████            ████████     Packages: 1324</span><br><span class=\"line\">████████  ████████  ████████     Shell: bash 5.1.8</span><br><span class=\"line\">████████  ████████  ████████     Resolution: 2560x1440</span><br><span class=\"line\">████████  ████████  ████████     DE: GNOME 41.1</span><br><span class=\"line\">████████  ████████  ████████     WM: Mutter</span><br><span class=\"line\">████████  ████████  ████████     WM Theme: </span><br><span class=\"line\">████████  ████████  ████████     GTK Theme: Matcha-dark-pueril [GTK2/3]</span><br><span class=\"line\">████████  ████████  ████████     Icon Theme: Papirus-Adapta-Maia</span><br><span class=\"line\">████████  ████████  ████████     Font: Noto Sans 12</span><br><span class=\"line\">████████  ████████  ████████     Disk: 150G / 946G (17%)</span><br><span class=\"line\">                                 CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz</span><br><span class=\"line\">                                 GPU: AMD RENOIR (DRM 3.40.0, 5.10.79-1-MANJARO, LLVM 13.0.0)</span><br><span class=\"line\">                                 RAM: 2030MiB / 15453MiB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h2><p><a href=\"https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz\">https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz</a></p>\n<h2 id=\"工具集\"><a href=\"#工具集\" class=\"headerlink\" title=\"工具集\"></a>工具集</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -S base-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译步骤\"><a href=\"#编译步骤\" class=\"headerlink\" title=\"编译步骤\"></a>编译步骤</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make menuconfig <span class=\"comment\"># 内核配置， 可以默认配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">make -j$(nproc) <span class=\"comment\"># -j job 一般为线程数</span></span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">arch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x6455b190)</span><br><span class=\"line\">Kernel: arch/x86/boot/bzImage is ready  (<span class=\"comment\">#1)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编好之后的产物为 <code>arch/x86/boot/bzImage</code>。</p>\n<h2 id=\"rootfs-和文件系统简介\"><a href=\"#rootfs-和文件系统简介\" class=\"headerlink\" title=\"rootfs 和文件系统简介\"></a>rootfs 和文件系统简介</h2><p><code>rootfs</code>是基于内存的文件系统，所有操作都在内存中完成；也没有实际的存储设备，所以不需要设备驱动程序的参与。<br>基于以上原因，linux在启动阶段使用<code>rootfs</code>文件系统，当磁盘驱动程序和磁盘文件系统成功加载后，linux系统会将系统根目录从<code>rootfs</code>切换到磁盘文件系统。</p>\n<p>大致的启动流程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start_kernel</span><br><span class=\"line\">　　vfs_caches_init</span><br><span class=\"line\">　　　　mnt_init</span><br><span class=\"line\">　　　　　　init_rootfs注册rootfs文件系统</span><br><span class=\"line\">　　　　　　init_mount_tree 挂载rootfs文件系统</span><br><span class=\"line\">　　　　　　　　vfs_kern_mount</span><br><span class=\"line\">　　　　　　　　　　mount_fs</span><br><span class=\"line\">　　　　　　　　　　　　type-&gt;mount其实是rootfs_mount</span><br><span class=\"line\">　　　　　　　　　　　　　　mount_nodev</span><br><span class=\"line\">　　　　　　　　　　　　　　　　fill_super 其实是ramfs_fill_super</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi-&gt;mount_opts.mode, 0);</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　sb-&gt;s_root = d_make_root(inode);</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　　　static const struct qstr name = QSTR_INIT(“/”, 1);[1*]</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　　　__d_alloc(root_inode-&gt;i_sb, &amp;name);</span><br><span class=\"line\">　　　　　　　　　　…</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt.mnt_root = root;[2*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt.mnt_sb = root-&gt;d_sb;[3*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt_mountpoint = mnt-&gt;mnt.mnt_root;[4*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt_parent = mnt;[5*]</span><br><span class=\"line\">root.mnt = mnt;</span><br><span class=\"line\">　　　　　　　　root.dentry = mnt-&gt;mnt_root;</span><br><span class=\"line\">　　　　　　　　mnt-&gt;mnt_flags |= MNT_LOCKED;</span><br><span class=\"line\">　　　　　　　　set_fs_pwd(current-&gt;fs, &amp;root);</span><br><span class=\"line\">　　　　　　　　set_fs_root(current-&gt;fs, &amp;root);</span><br><span class=\"line\">　　…</span><br><span class=\"line\">　　rest_init</span><br><span class=\"line\">　　kernel_thread(kernel_init, NULL, CLONE_FS);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>正常来说，根文件系统至少包括以下目录：</p>\n<ul>\n<li><p>/etc/：存储重要的配置文件。</p>\n</li>\n<li><p>/bin/：存储常用且开机时必须用到的执行文件。</p>\n</li>\n<li><p>/sbin/：存储着开机过程中所需的系统执行文件。</p>\n</li>\n<li><p>/lib/：存储/bin/及/sbin/的执行文件所需的链接库，以及Linux的内核模块。</p>\n</li>\n<li><p>/dev/：存储设备文件。</p>\n</li>\n</ul>\n<blockquote>\n<p>以上列举出的目录必须存储在根文件系统上，缺一不可。</p>\n</blockquote>\n<ul>\n<li>/proc</li>\n</ul>\n<p>这是一个空目录，常作为proc文件系统的挂接点，proc文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。</p>\n<h3 id=\"制作一个临时的rootfs\"><a href=\"#制作一个临时的rootfs\" class=\"headerlink\" title=\"制作一个临时的rootfs\"></a>制作一个临时的rootfs</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch main.c</span><br><span class=\"line\">vim main.c</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;linux-5.14 &gt; \\n&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成rootfs\"><a href=\"#生成rootfs\" class=\"headerlink\" title=\"生成rootfs\"></a>生成rootfs</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --static -o hello_kernel main.c</span><br><span class=\"line\"><span class=\"built_in\">echo</span> hello_kernel | cpio -o --format=newc &gt; rootfs</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"QEMU-启动\"><a href=\"#QEMU-启动\" class=\"headerlink\" title=\"QEMU 启动\"></a>QEMU 启动</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-system-x86_64 \\</span><br><span class=\"line\">&gt; -kernel ./arch/x86/boot/bzImage \\</span><br><span class=\"line\">&gt; -initrd ./rootfs \\</span><br><span class=\"line\">&gt; -append <span class=\"string\">&quot;root=/dev/ram rdinit=hello_kernel&quot;</span> \\</span><br><span class=\"line\">&gt; -smp 2 \\</span><br><span class=\"line\">&gt; -s -S</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这时的Qemu 会进入等待状态, </p>\n<h4 id=\"GDB-启动\"><a href=\"#GDB-启动\" class=\"headerlink\" title=\"GDB 启动\"></a>GDB 启动</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ./vmlinux</span><br><span class=\"line\">......</span><br><span class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class=\"line\">Reading symbols from ./vmlinux...</span><br><span class=\"line\">(gdb) target remote:1234</span><br><span class=\"line\">Remote debugging using :1234</span><br><span class=\"line\">0x000000000000fff0 in exception_stacks ()</span><br><span class=\"line\">(gdb) b start_kernel</span><br><span class=\"line\">Breakpoint 1 at 0xfff0</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>_target remote:1234_， gdb 连接上qemu,</p>\n<p>_b start_kernel_， 设置断点： <code>start_kernel</code></p>\n<p>_c_， 继续执行：</p>\n<h2 id=\"VS-Code-上面调试\"><a href=\"#VS-Code-上面调试\" class=\"headerlink\" title=\"VS Code 上面调试\"></a>VS Code 上面调试</h2><p>需要安装好gdb插件<br>然后, 三个配置文件：</p>\n<p>c_cpp_properties.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Linux kernel&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cStandard&quot;</span>: <span class=\"string\">&quot;c11&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;intelliSenseMode&quot;</span>: <span class=\"string\">&quot;linux-clang-x64&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;compileCommands&quot;</span>: <span class=\"string\">&quot;$&#123;&#125;/compile_commands.json&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>launch.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Use IntelliSense to learn about possible attributes.</span></span><br><span class=\"line\">    <span class=\"comment\">// Hover to view descriptions of existing attributes.</span></span><br><span class=\"line\">    <span class=\"comment\">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;(gdb) Launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppdbg&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;preLaunchTask&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;miDebuggerServerAddress&quot;</span>:<span class=\"string\">&quot;127.0.0.1:1234&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/vmlinux&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;stopAtEntry&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;environment&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;externalConsole&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;MIMode&quot;</span>: <span class=\"string\">&quot;gdb&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;setupCommands&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;ignoreFailures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tasks.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class=\"line\">    <span class=\"comment\">// for the documentation about the tasks.json format</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ./rootfs -append \\&quot;root=/dev/ram rdinit=hello_kernel\\&quot; -smp 2 -s -S&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;presentation&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;echo&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;clear&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;isBackground&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;problemMatcher&quot;</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;pattern&quot;</span>: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;regexp&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;file&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;location&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;message&quot;</span>: <span class=\"number\">3</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">&quot;background&quot;</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">&quot;activeOnStart&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;beginsPattern&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;endsPattern&quot;</span>: <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;make&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;group&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;kind&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;isDefault&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;presentation&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;echo&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;build&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">██████████████████  ████████     4soos@dev</span><br><span class=\"line\">██████████████████  ████████     OS: Manjaro 21.2.0 Qonos</span><br><span class=\"line\">██████████████████  ████████     Kernel: x86_64 Linux 5.10.79-1-MANJARO</span><br><span class=\"line\">██████████████████  ████████     Uptime: 19m</span><br><span class=\"line\">████████            ████████     Packages: 1324</span><br><span class=\"line\">████████  ████████  ████████     Shell: bash 5.1.8</span><br><span class=\"line\">████████  ████████  ████████     Resolution: 2560x1440</span><br><span class=\"line\">████████  ████████  ████████     DE: GNOME 41.1</span><br><span class=\"line\">████████  ████████  ████████     WM: Mutter</span><br><span class=\"line\">████████  ████████  ████████     WM Theme: </span><br><span class=\"line\">████████  ████████  ████████     GTK Theme: Matcha-dark-pueril [GTK2/3]</span><br><span class=\"line\">████████  ████████  ████████     Icon Theme: Papirus-Adapta-Maia</span><br><span class=\"line\">████████  ████████  ████████     Font: Noto Sans 12</span><br><span class=\"line\">████████  ████████  ████████     Disk: 150G / 946G (17%)</span><br><span class=\"line\">                                 CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz</span><br><span class=\"line\">                                 GPU: AMD RENOIR (DRM 3.40.0, 5.10.79-1-MANJARO, LLVM 13.0.0)</span><br><span class=\"line\">                                 RAM: 2030MiB / 15453MiB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h2><p><a href=\"https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz\">https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz</a></p>\n<h2 id=\"工具集\"><a href=\"#工具集\" class=\"headerlink\" title=\"工具集\"></a>工具集</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -S base-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译步骤\"><a href=\"#编译步骤\" class=\"headerlink\" title=\"编译步骤\"></a>编译步骤</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make menuconfig <span class=\"comment\"># 内核配置， 可以默认配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">make -j$(nproc) <span class=\"comment\"># -j job 一般为线程数</span></span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">arch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x6455b190)</span><br><span class=\"line\">Kernel: arch/x86/boot/bzImage is ready  (<span class=\"comment\">#1)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编好之后的产物为 <code>arch/x86/boot/bzImage</code>。</p>\n<h2 id=\"rootfs-和文件系统简介\"><a href=\"#rootfs-和文件系统简介\" class=\"headerlink\" title=\"rootfs 和文件系统简介\"></a>rootfs 和文件系统简介</h2><p><code>rootfs</code>是基于内存的文件系统，所有操作都在内存中完成；也没有实际的存储设备，所以不需要设备驱动程序的参与。<br>基于以上原因，linux在启动阶段使用<code>rootfs</code>文件系统，当磁盘驱动程序和磁盘文件系统成功加载后，linux系统会将系统根目录从<code>rootfs</code>切换到磁盘文件系统。</p>\n<p>大致的启动流程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start_kernel</span><br><span class=\"line\">　　vfs_caches_init</span><br><span class=\"line\">　　　　mnt_init</span><br><span class=\"line\">　　　　　　init_rootfs注册rootfs文件系统</span><br><span class=\"line\">　　　　　　init_mount_tree 挂载rootfs文件系统</span><br><span class=\"line\">　　　　　　　　vfs_kern_mount</span><br><span class=\"line\">　　　　　　　　　　mount_fs</span><br><span class=\"line\">　　　　　　　　　　　　type-&gt;mount其实是rootfs_mount</span><br><span class=\"line\">　　　　　　　　　　　　　　mount_nodev</span><br><span class=\"line\">　　　　　　　　　　　　　　　　fill_super 其实是ramfs_fill_super</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi-&gt;mount_opts.mode, 0);</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　sb-&gt;s_root = d_make_root(inode);</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　　　static const struct qstr name = QSTR_INIT(“/”, 1);[1*]</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　　　__d_alloc(root_inode-&gt;i_sb, &amp;name);</span><br><span class=\"line\">　　　　　　　　　　…</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt.mnt_root = root;[2*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt.mnt_sb = root-&gt;d_sb;[3*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt_mountpoint = mnt-&gt;mnt.mnt_root;[4*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt_parent = mnt;[5*]</span><br><span class=\"line\">root.mnt = mnt;</span><br><span class=\"line\">　　　　　　　　root.dentry = mnt-&gt;mnt_root;</span><br><span class=\"line\">　　　　　　　　mnt-&gt;mnt_flags |= MNT_LOCKED;</span><br><span class=\"line\">　　　　　　　　set_fs_pwd(current-&gt;fs, &amp;root);</span><br><span class=\"line\">　　　　　　　　set_fs_root(current-&gt;fs, &amp;root);</span><br><span class=\"line\">　　…</span><br><span class=\"line\">　　rest_init</span><br><span class=\"line\">　　kernel_thread(kernel_init, NULL, CLONE_FS);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>正常来说，根文件系统至少包括以下目录：</p>\n<ul>\n<li><p>/etc/：存储重要的配置文件。</p>\n</li>\n<li><p>/bin/：存储常用且开机时必须用到的执行文件。</p>\n</li>\n<li><p>/sbin/：存储着开机过程中所需的系统执行文件。</p>\n</li>\n<li><p>/lib/：存储/bin/及/sbin/的执行文件所需的链接库，以及Linux的内核模块。</p>\n</li>\n<li><p>/dev/：存储设备文件。</p>\n</li>\n</ul>\n<blockquote>\n<p>以上列举出的目录必须存储在根文件系统上，缺一不可。</p>\n</blockquote>\n<ul>\n<li>/proc</li>\n</ul>\n<p>这是一个空目录，常作为proc文件系统的挂接点，proc文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。</p>\n<h3 id=\"制作一个临时的rootfs\"><a href=\"#制作一个临时的rootfs\" class=\"headerlink\" title=\"制作一个临时的rootfs\"></a>制作一个临时的rootfs</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch main.c</span><br><span class=\"line\">vim main.c</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;linux-5.14 &gt; \\n&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成rootfs\"><a href=\"#生成rootfs\" class=\"headerlink\" title=\"生成rootfs\"></a>生成rootfs</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --static -o hello_kernel main.c</span><br><span class=\"line\"><span class=\"built_in\">echo</span> hello_kernel | cpio -o --format=newc &gt; rootfs</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"QEMU-启动\"><a href=\"#QEMU-启动\" class=\"headerlink\" title=\"QEMU 启动\"></a>QEMU 启动</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-system-x86_64 \\</span><br><span class=\"line\">&gt; -kernel ./arch/x86/boot/bzImage \\</span><br><span class=\"line\">&gt; -initrd ./rootfs \\</span><br><span class=\"line\">&gt; -append <span class=\"string\">&quot;root=/dev/ram rdinit=hello_kernel&quot;</span> \\</span><br><span class=\"line\">&gt; -smp 2 \\</span><br><span class=\"line\">&gt; -s -S</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这时的Qemu 会进入等待状态, </p>\n<h4 id=\"GDB-启动\"><a href=\"#GDB-启动\" class=\"headerlink\" title=\"GDB 启动\"></a>GDB 启动</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ./vmlinux</span><br><span class=\"line\">......</span><br><span class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class=\"line\">Reading symbols from ./vmlinux...</span><br><span class=\"line\">(gdb) target remote:1234</span><br><span class=\"line\">Remote debugging using :1234</span><br><span class=\"line\">0x000000000000fff0 in exception_stacks ()</span><br><span class=\"line\">(gdb) b start_kernel</span><br><span class=\"line\">Breakpoint 1 at 0xfff0</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>_target remote:1234_， gdb 连接上qemu,</p>\n<p>_b start_kernel_， 设置断点： <code>start_kernel</code></p>\n<p>_c_， 继续执行：</p>\n<h2 id=\"VS-Code-上面调试\"><a href=\"#VS-Code-上面调试\" class=\"headerlink\" title=\"VS Code 上面调试\"></a>VS Code 上面调试</h2><p>需要安装好gdb插件<br>然后, 三个配置文件：</p>\n<p>c_cpp_properties.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Linux kernel&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cStandard&quot;</span>: <span class=\"string\">&quot;c11&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;intelliSenseMode&quot;</span>: <span class=\"string\">&quot;linux-clang-x64&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;compileCommands&quot;</span>: <span class=\"string\">&quot;$&#123;&#125;/compile_commands.json&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>launch.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Use IntelliSense to learn about possible attributes.</span></span><br><span class=\"line\">    <span class=\"comment\">// Hover to view descriptions of existing attributes.</span></span><br><span class=\"line\">    <span class=\"comment\">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;(gdb) Launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppdbg&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;preLaunchTask&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;miDebuggerServerAddress&quot;</span>:<span class=\"string\">&quot;127.0.0.1:1234&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/vmlinux&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;stopAtEntry&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;environment&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;externalConsole&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;MIMode&quot;</span>: <span class=\"string\">&quot;gdb&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;setupCommands&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;ignoreFailures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tasks.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class=\"line\">    <span class=\"comment\">// for the documentation about the tasks.json format</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ./rootfs -append \\&quot;root=/dev/ram rdinit=hello_kernel\\&quot; -smp 2 -s -S&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;presentation&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;echo&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;clear&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;isBackground&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;problemMatcher&quot;</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;pattern&quot;</span>: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;regexp&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;file&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;location&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;message&quot;</span>: <span class=\"number\">3</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">&quot;background&quot;</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">&quot;activeOnStart&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;beginsPattern&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;endsPattern&quot;</span>: <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;make&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;group&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;kind&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;isDefault&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;presentation&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;echo&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;build&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"c_memory","date":"2022-01-03T15:20:06.000Z","_content":"\n## 内存分区\n* 栈区（stack）:\n  \n  栈又称堆栈，是用户存放程序临时创建的局部变量,\n  存放函数形参和局部变量（auto类型），由编译器自动分配和释放。\n\n  在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。\n\n  由于栈的先进先出(FIFO)特点，所以栈特别方便用来保存/恢复调用现场。\n\n\n* 堆区（heap）:\n  \n  堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。\n  该区由程序员申请后使用，需要手动释放否则会造成内存泄漏。\n  如果程序员没有手动释放，那么程序结束时可能由OS回收。\n\n* 全局/静态存储区：\n  \n  存放全局变量和静态变量（包括静态全局变量与静态局部变量），初始化的全局变量和静态局部变量放在一块，未初始化的放在另一块。\n\n* 文字常量区：\n  \n  常量在统一运行被创建，常量区的内存是只读的，程序结束后由系统释放。\n\n* 程序代码区：\n  \n  存放程序的二进制代码，内存由系统管理\n\n## 可执行分段\n一个程序本质上都是由 bss段、data段、text段三个组成的。\n\n- `text`\n  \n  这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。\n  在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等\n\n- `date`\n\n  存放在编译阶段（而非运行时）就能确定的数据，可读可写, 是指用来存放程序中已初始化的全局变量的一块内存区域。\n  也就是通常所说的静态存储区，赋了初值的全局变量和赋初值的静态变量存放在这个区域，常量也存在这个区域.\n  数据段属于静态内存分配.\n\n- `bss`\n  bss段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。\n  bss是英文Block Started by Symbol的简称。\n  bss段属于静态内存分配。\n  已经定义但没赋初值的全局变量和静态变量存放在这个区域。\n\n> `text` 段在内存中被映射为只读，但 `date` 段与 `bss` 段是可写的.\n\n\n![m](../imgs/memory.gif)\n\n\n> 代码段，数据段，堆栈段是cpu级别的概念，五大分区属于语言级别的概念\n","source":"_posts/c-memory.md","raw":"---\ntitle: c_memory\ndate: 2022-01-03 23:20:06\ntags:\n    - Linux\n    - C\n    - Memory\n    - Notes\n---\n\n## 内存分区\n* 栈区（stack）:\n  \n  栈又称堆栈，是用户存放程序临时创建的局部变量,\n  存放函数形参和局部变量（auto类型），由编译器自动分配和释放。\n\n  在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。\n\n  由于栈的先进先出(FIFO)特点，所以栈特别方便用来保存/恢复调用现场。\n\n\n* 堆区（heap）:\n  \n  堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。\n  该区由程序员申请后使用，需要手动释放否则会造成内存泄漏。\n  如果程序员没有手动释放，那么程序结束时可能由OS回收。\n\n* 全局/静态存储区：\n  \n  存放全局变量和静态变量（包括静态全局变量与静态局部变量），初始化的全局变量和静态局部变量放在一块，未初始化的放在另一块。\n\n* 文字常量区：\n  \n  常量在统一运行被创建，常量区的内存是只读的，程序结束后由系统释放。\n\n* 程序代码区：\n  \n  存放程序的二进制代码，内存由系统管理\n\n## 可执行分段\n一个程序本质上都是由 bss段、data段、text段三个组成的。\n\n- `text`\n  \n  这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。\n  在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等\n\n- `date`\n\n  存放在编译阶段（而非运行时）就能确定的数据，可读可写, 是指用来存放程序中已初始化的全局变量的一块内存区域。\n  也就是通常所说的静态存储区，赋了初值的全局变量和赋初值的静态变量存放在这个区域，常量也存在这个区域.\n  数据段属于静态内存分配.\n\n- `bss`\n  bss段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。\n  bss是英文Block Started by Symbol的简称。\n  bss段属于静态内存分配。\n  已经定义但没赋初值的全局变量和静态变量存放在这个区域。\n\n> `text` 段在内存中被映射为只读，但 `date` 段与 `bss` 段是可写的.\n\n\n![m](../imgs/memory.gif)\n\n\n> 代码段，数据段，堆栈段是cpu级别的概念，五大分区属于语言级别的概念\n","slug":"c-memory","published":1,"updated":"2022-01-03T15:22:16.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtv70003z59ya9y7dcup","content":"<h2 id=\"内存分区\"><a href=\"#内存分区\" class=\"headerlink\" title=\"内存分区\"></a>内存分区</h2><ul>\n<li><p>栈区（stack）:</p>\n<p>栈又称堆栈，是用户存放程序临时创建的局部变量,<br>存放函数形参和局部变量（auto类型），由编译器自动分配和释放。</p>\n<p>在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。</p>\n<p>由于栈的先进先出(FIFO)特点，所以栈特别方便用来保存/恢复调用现场。</p>\n</li>\n</ul>\n<ul>\n<li><p>堆区（heap）:</p>\n<p>堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。<br>该区由程序员申请后使用，需要手动释放否则会造成内存泄漏。<br>如果程序员没有手动释放，那么程序结束时可能由OS回收。</p>\n</li>\n<li><p>全局/静态存储区：</p>\n<p>存放全局变量和静态变量（包括静态全局变量与静态局部变量），初始化的全局变量和静态局部变量放在一块，未初始化的放在另一块。</p>\n</li>\n<li><p>文字常量区：</p>\n<p>常量在统一运行被创建，常量区的内存是只读的，程序结束后由系统释放。</p>\n</li>\n<li><p>程序代码区：</p>\n<p>存放程序的二进制代码，内存由系统管理</p>\n</li>\n</ul>\n<h2 id=\"可执行分段\"><a href=\"#可执行分段\" class=\"headerlink\" title=\"可执行分段\"></a>可执行分段</h2><p>一个程序本质上都是由 bss段、data段、text段三个组成的。</p>\n<ul>\n<li><p><code>text</code></p>\n<p>这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。<br>在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等</p>\n</li>\n<li><p><code>date</code></p>\n<p>存放在编译阶段（而非运行时）就能确定的数据，可读可写, 是指用来存放程序中已初始化的全局变量的一块内存区域。<br>也就是通常所说的静态存储区，赋了初值的全局变量和赋初值的静态变量存放在这个区域，常量也存在这个区域.<br>数据段属于静态内存分配.</p>\n</li>\n<li><p><code>bss</code><br>bss段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。<br>bss是英文Block Started by Symbol的简称。<br>bss段属于静态内存分配。<br>已经定义但没赋初值的全局变量和静态变量存放在这个区域。</p>\n</li>\n</ul>\n<blockquote>\n<p><code>text</code> 段在内存中被映射为只读，但 <code>date</code> 段与 <code>bss</code> 段是可写的.</p>\n</blockquote>\n<p><img src=\"../imgs/memory.gif\" alt=\"m\"></p>\n<blockquote>\n<p>代码段，数据段，堆栈段是cpu级别的概念，五大分区属于语言级别的概念</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内存分区\"><a href=\"#内存分区\" class=\"headerlink\" title=\"内存分区\"></a>内存分区</h2><ul>\n<li><p>栈区（stack）:</p>\n<p>栈又称堆栈，是用户存放程序临时创建的局部变量,<br>存放函数形参和局部变量（auto类型），由编译器自动分配和释放。</p>\n<p>在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。</p>\n<p>由于栈的先进先出(FIFO)特点，所以栈特别方便用来保存/恢复调用现场。</p>\n</li>\n</ul>\n<ul>\n<li><p>堆区（heap）:</p>\n<p>堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。<br>该区由程序员申请后使用，需要手动释放否则会造成内存泄漏。<br>如果程序员没有手动释放，那么程序结束时可能由OS回收。</p>\n</li>\n<li><p>全局/静态存储区：</p>\n<p>存放全局变量和静态变量（包括静态全局变量与静态局部变量），初始化的全局变量和静态局部变量放在一块，未初始化的放在另一块。</p>\n</li>\n<li><p>文字常量区：</p>\n<p>常量在统一运行被创建，常量区的内存是只读的，程序结束后由系统释放。</p>\n</li>\n<li><p>程序代码区：</p>\n<p>存放程序的二进制代码，内存由系统管理</p>\n</li>\n</ul>\n<h2 id=\"可执行分段\"><a href=\"#可执行分段\" class=\"headerlink\" title=\"可执行分段\"></a>可执行分段</h2><p>一个程序本质上都是由 bss段、data段、text段三个组成的。</p>\n<ul>\n<li><p><code>text</code></p>\n<p>这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。<br>在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等</p>\n</li>\n<li><p><code>date</code></p>\n<p>存放在编译阶段（而非运行时）就能确定的数据，可读可写, 是指用来存放程序中已初始化的全局变量的一块内存区域。<br>也就是通常所说的静态存储区，赋了初值的全局变量和赋初值的静态变量存放在这个区域，常量也存在这个区域.<br>数据段属于静态内存分配.</p>\n</li>\n<li><p><code>bss</code><br>bss段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。<br>bss是英文Block Started by Symbol的简称。<br>bss段属于静态内存分配。<br>已经定义但没赋初值的全局变量和静态变量存放在这个区域。</p>\n</li>\n</ul>\n<blockquote>\n<p><code>text</code> 段在内存中被映射为只读，但 <code>date</code> 段与 <code>bss</code> 段是可写的.</p>\n</blockquote>\n<p><img src=\"../imgs/memory.gif\" alt=\"m\"></p>\n<blockquote>\n<p>代码段，数据段，堆栈段是cpu级别的概念，五大分区属于语言级别的概念</p>\n</blockquote>\n"},{"title":"huawei adb","date":"2021-12-04T17:03:46.000Z","_content":"\n\n\n## 环境\n* 系统:Manjaro\n* 桌面:GNOME\n\n## ADB链接手机\nUSB连接具体的解决办法如下：\n\n### 1、打开拨号界面,输入: `*#*#2846579#*#*`。自动进入工程菜单,选择后台设置——>usb端口设置——>生产模式.\n\n### 2、打开调试\n\n设置--系统和更新--开发者选项--打开调试.\n\n### 3、USB连接方式\n\n选择传输文件\n\n### 4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\n\n### 5、回到adb命令下查看是否已经连接上了\n```bash\nadb devices\n```\n","source":"_posts/huawei-adb.md","raw":"---\ntitle: huawei adb \ndate: 2021-12-05 01:03:46\ntags:\n    - adb\n---\n\n\n\n## 环境\n* 系统:Manjaro\n* 桌面:GNOME\n\n## ADB链接手机\nUSB连接具体的解决办法如下：\n\n### 1、打开拨号界面,输入: `*#*#2846579#*#*`。自动进入工程菜单,选择后台设置——>usb端口设置——>生产模式.\n\n### 2、打开调试\n\n设置--系统和更新--开发者选项--打开调试.\n\n### 3、USB连接方式\n\n选择传输文件\n\n### 4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\n\n### 5、回到adb命令下查看是否已经连接上了\n```bash\nadb devices\n```\n","slug":"huawei-adb","published":1,"updated":"2021-12-04T17:06:07.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtva0005z59y7i3j5iz0","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>系统:Manjaro</li>\n<li>桌面:GNOME</li>\n</ul>\n<h2 id=\"ADB链接手机\"><a href=\"#ADB链接手机\" class=\"headerlink\" title=\"ADB链接手机\"></a>ADB链接手机</h2><p>USB连接具体的解决办法如下：</p>\n<h3 id=\"1、打开拨号界面-输入-2846579-。自动进入工程菜单-选择后台设置——-gt-usb端口设置——-gt-生产模式\"><a href=\"#1、打开拨号界面-输入-2846579-。自动进入工程菜单-选择后台设置——-gt-usb端口设置——-gt-生产模式\" class=\"headerlink\" title=\"1、打开拨号界面,输入: *#*#2846579#*#*。自动进入工程菜单,选择后台设置——&gt;usb端口设置——&gt;生产模式.\"></a>1、打开拨号界面,输入: <code>*#*#2846579#*#*</code>。自动进入工程菜单,选择后台设置——&gt;usb端口设置——&gt;生产模式.</h3><h3 id=\"2、打开调试\"><a href=\"#2、打开调试\" class=\"headerlink\" title=\"2、打开调试\"></a>2、打开调试</h3><p>设置–系统和更新–开发者选项–打开调试.</p>\n<h3 id=\"3、USB连接方式\"><a href=\"#3、USB连接方式\" class=\"headerlink\" title=\"3、USB连接方式\"></a>3、USB连接方式</h3><p>选择传输文件</p>\n<h3 id=\"4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\"><a href=\"#4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\" class=\"headerlink\" title=\"4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\"></a>4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备</h3><h3 id=\"5、回到adb命令下查看是否已经连接上了\"><a href=\"#5、回到adb命令下查看是否已经连接上了\" class=\"headerlink\" title=\"5、回到adb命令下查看是否已经连接上了\"></a>5、回到adb命令下查看是否已经连接上了</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>系统:Manjaro</li>\n<li>桌面:GNOME</li>\n</ul>\n<h2 id=\"ADB链接手机\"><a href=\"#ADB链接手机\" class=\"headerlink\" title=\"ADB链接手机\"></a>ADB链接手机</h2><p>USB连接具体的解决办法如下：</p>\n<h3 id=\"1、打开拨号界面-输入-2846579-。自动进入工程菜单-选择后台设置——-gt-usb端口设置——-gt-生产模式\"><a href=\"#1、打开拨号界面-输入-2846579-。自动进入工程菜单-选择后台设置——-gt-usb端口设置——-gt-生产模式\" class=\"headerlink\" title=\"1、打开拨号界面,输入: *#*#2846579#*#*。自动进入工程菜单,选择后台设置——&gt;usb端口设置——&gt;生产模式.\"></a>1、打开拨号界面,输入: <code>*#*#2846579#*#*</code>。自动进入工程菜单,选择后台设置——&gt;usb端口设置——&gt;生产模式.</h3><h3 id=\"2、打开调试\"><a href=\"#2、打开调试\" class=\"headerlink\" title=\"2、打开调试\"></a>2、打开调试</h3><p>设置–系统和更新–开发者选项–打开调试.</p>\n<h3 id=\"3、USB连接方式\"><a href=\"#3、USB连接方式\" class=\"headerlink\" title=\"3、USB连接方式\"></a>3、USB连接方式</h3><p>选择传输文件</p>\n<h3 id=\"4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\"><a href=\"#4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\" class=\"headerlink\" title=\"4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\"></a>4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备</h3><h3 id=\"5、回到adb命令下查看是否已经连接上了\"><a href=\"#5、回到adb命令下查看是否已经连接上了\" class=\"headerlink\" title=\"5、回到adb命令下查看是否已经连接上了\"></a>5、回到adb命令下查看是否已经连接上了</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n"},{"title":"linux_system_programming","date":"2021-11-20T11:22:00.000Z","_content":"\n## 系统调用\n在深入系统调用的运作方式之前，务必关注以下几点。\n* 系统调用将处理器从用户态切换到核心态，以便 CPU 访问受到保护的内核内存。\n\n* 系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。\n（程序通过名称来标识系统调用，对这一编号方案往往一无所知。）\n\n* 每个系统调用可辅之以一套参数，对用户空间（亦即进程的虚拟地址空间）与内核空\n间之间（相互）传递的信息加以规范。\n\n从编程角度来看，系统调用与 C 语言函数的调用很相似。然而，在执行系统调用时，其\n幕后会历经诸多步骤。为说明这点，下面以一个具体的硬件平台—x86-32 为例，按事件发\n生的顺序对这些步骤加以分析。\n1． 应用程序通过调用 C 语言函数库中的外壳（wrapper）函数，来发起系统调用。\n\n2． 对系统调用中断处理例程（稍后介绍）来说，外壳函数必须保证所有的系统调用参数可用。\n通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。\n因此，外壳函数会将上述参数复制到寄存器。\n\n3． 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函\n数会将系统调用编号复制到一个特殊的 CPU 寄存器（%eax）中。\n\n4． 外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行\n系统中断 0x80 (十进制数 128)的中断矢量所指向的代码。\n\n5． 为响应中断 0x80，内核会调用 system_call()例程（位于汇编文件 arch/i386/entry.S 中）来\n处理这次中断，具体如下。\n    a）在内核栈中保存寄存器值（参见 6.5 节）。 他\n    b）审核系统调用编号的有效性。\n    c）以系统调用编号对存放所有调用服务例程的列表（内核变量 sys_call_table）进行索引，\n    发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。\n    例如，会检查地址指向用户空间的内存位置是否有效。随后，该服务例程会执行必要的任务，这可能涉及对特定参数中指定地址处的值进行修改，以及在用户内存和内核内存间传递数据（比如，在 I/O 操作中）。\n    最后，该服务例程会将结果状态返回给 system_call()例程。\n    d）从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中。\n    e）返回至外壳函数，同时将处理器切换回用户态。\n\n6． 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量 errno\n（参见 3.4 节）。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统\n调用是否成功。\n\n![execve](imgs/linux_system_exec_steps.png)\n\n\n## 文件I/O\n\n所有执行 I/O 操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。\n文件描述符用以表示所有类型的已打开文件，包括管道（pipe）、FIFO、socket、终端、\n设备和普通文件。针对每个进程，文件描述符都自成一套。\n\n大多数程序都能够使用 3 种标准的文件描述符：\n\n| 描述符 | 用途       | POSIX         | stdio  |\n| ----- | --------- | ------------- | ------ |\n| 0     | 标准输入    | STDIN_FILENO  | stdin  |\n| 1     | 标准输出    | STDOUT_FILENO | stdout |\n| 2     | 标准错误    | STDERR_FILENO | stderr |\n\n> 程序中指代这些文件描述符时，可以使用数字（0、1、2）表示，但最好是采用<unistd.h>\n所定义的 POSIX 标准名称。\n\n### IO 操作的主要系统调用函数\n\n#### open()\n```c\nfd = open(pathname, flags, mode)\n```\n函数打开 `pathname` 所标识的文件，并返回文件描\n述符，用以在后续函数调用中指代打开的文件。如果文件不存在，`open()`函数可以\n创建之，这取决于对位掩码参数 `flags` `的设置。flags` 参数还可指定文件的打开方式：只\n`读、只写亦或是读写方式。mode` 参数则指定了由 `open()`调用创建文件的访问权限，\n如果 `open()` 函数并未创建文件，那么可以忽略或省略 `mode` 参数。\n\n```C\n// open existing file for reading\nfd = open(\"start.up\", O_RDONLY);\nif (fd == -1)\n    printf(\"can't open\");\n\n// open new or existing file or reading and writing, truncating to zero\n// bytes; file permissions read+write for owner, nothing for all others\nfd = open(\"myfile\", O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR );\nif (fd == -1)\n    printf(\"can't open\");\n\nfd = open(\"w.log\", O_WRONLY|O_CREAT|O_TRUNC|O_APPEND, S_IRUSR|S_IWUSR);\n\nif (fd == -1)\n    printf(\"can't open\");\n\n```\n\nSUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者。\n可以利用该特性以特定文件描述符打开某一文件。\n\n```C\nif (close(STDIN_FILENO) == -1)\n    print(\"close\");\n\nfd = open(pathname, O_RDONLY);\nif (fd == -1)\n    print(\"open\");\n\n```\n\n\n#### read()\n```C\nnumread = read(fd, buffer, count)\n```\n调用从 `fd` 所指代的打开文件中读取至多 `count` 字节的数据，并存储到 `buffer` 中。\n`read()`调用的返回值为实际读取到的字节数。如果再无字节可读（例如：读到文件结尾符 `EOF` 时），则返回值为 0。\n\n#### write()\n```C\nnumwritten = write(fd, buffer, count)\n```\n调用从 `buffer` 中读取多达 `count` 字节的数据写入由\n`fd` 所指代的已打开文件中。`write()`调用的返回值为实际写入文件中的字节数，且有可\n能小于 `count。`\n\n#### close()\n```C\nstatus = close(fd)\n```\n在所有输入/输出操作完成后，调用 `close()`，释放文件描述符 `fd` 以及与之相关的内核资源。\n\n\n> 使用IO 小例子(src/fileio/copy)： \n> ```C\n>$ clang copy.c error_functions.c get_num.c -o copy\n>$ ./copy newfile oldfile\n> ```\n\n\n\n# Others (补充)\n\n## libc & glibc\n`libc` 是 `ANSI C` 的函数库, `glibc` 是 `GNU C` 的函数库。\n\n\n`ANSI C` 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： \n\n* `<ctype.h>`：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；\n* `<errno.h>`：定义用来报告错误条件的宏；\n* `<float.h>`：包含系统的浮点数大小限制；\n* `<math.h>`：包含数学库函数的函数原型；\n* `<stddef.h>`：包含执行某些计算 C 所用的常见的函数定义；\n* `<stdio.h>`：包含标准输入输出库函数的函数原型，以及他们所用的信息；\n* `<stdlib.h>`：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；\n* `<string.h>`：包含字符串处理函数的函数原型；\n* `<time.h>`：包含时间和日期操作的函数原型和类型；\n* `<stdarg.h>`：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；\n* `<signal.h>`：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；\n* `<setjmp.h>`：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；\n* `<locale.h>`：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。\n 地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；\n* `<assert.h>`：包含宏和信息，用于进行诊断，帮助程序调试。\n\n`glibc`是linux下面c标准库的实现，即`GNU C Library`。\n`glibc`本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库`Linux libc`逐渐不再被维护。\nLinux下面的标准c库不仅有这一个，如`uclibc`、`klibc`，以及上面被提到的`Linux libc`，但是glibc无疑是用得最多的。\n`glibc`在/lib目录下的.so文件为libc.so.6。\n\n\n","source":"_posts/linux-system-programming.md","raw":"---\ntitle: linux_system_programming\ndate: 2021-11-20 19:22:00\ntags:\n    - Linux\n    - C\ncategories:\n    - Linux编程\n---\n\n## 系统调用\n在深入系统调用的运作方式之前，务必关注以下几点。\n* 系统调用将处理器从用户态切换到核心态，以便 CPU 访问受到保护的内核内存。\n\n* 系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。\n（程序通过名称来标识系统调用，对这一编号方案往往一无所知。）\n\n* 每个系统调用可辅之以一套参数，对用户空间（亦即进程的虚拟地址空间）与内核空\n间之间（相互）传递的信息加以规范。\n\n从编程角度来看，系统调用与 C 语言函数的调用很相似。然而，在执行系统调用时，其\n幕后会历经诸多步骤。为说明这点，下面以一个具体的硬件平台—x86-32 为例，按事件发\n生的顺序对这些步骤加以分析。\n1． 应用程序通过调用 C 语言函数库中的外壳（wrapper）函数，来发起系统调用。\n\n2． 对系统调用中断处理例程（稍后介绍）来说，外壳函数必须保证所有的系统调用参数可用。\n通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。\n因此，外壳函数会将上述参数复制到寄存器。\n\n3． 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函\n数会将系统调用编号复制到一个特殊的 CPU 寄存器（%eax）中。\n\n4． 外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行\n系统中断 0x80 (十进制数 128)的中断矢量所指向的代码。\n\n5． 为响应中断 0x80，内核会调用 system_call()例程（位于汇编文件 arch/i386/entry.S 中）来\n处理这次中断，具体如下。\n    a）在内核栈中保存寄存器值（参见 6.5 节）。 他\n    b）审核系统调用编号的有效性。\n    c）以系统调用编号对存放所有调用服务例程的列表（内核变量 sys_call_table）进行索引，\n    发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。\n    例如，会检查地址指向用户空间的内存位置是否有效。随后，该服务例程会执行必要的任务，这可能涉及对特定参数中指定地址处的值进行修改，以及在用户内存和内核内存间传递数据（比如，在 I/O 操作中）。\n    最后，该服务例程会将结果状态返回给 system_call()例程。\n    d）从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中。\n    e）返回至外壳函数，同时将处理器切换回用户态。\n\n6． 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量 errno\n（参见 3.4 节）。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统\n调用是否成功。\n\n![execve](imgs/linux_system_exec_steps.png)\n\n\n## 文件I/O\n\n所有执行 I/O 操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。\n文件描述符用以表示所有类型的已打开文件，包括管道（pipe）、FIFO、socket、终端、\n设备和普通文件。针对每个进程，文件描述符都自成一套。\n\n大多数程序都能够使用 3 种标准的文件描述符：\n\n| 描述符 | 用途       | POSIX         | stdio  |\n| ----- | --------- | ------------- | ------ |\n| 0     | 标准输入    | STDIN_FILENO  | stdin  |\n| 1     | 标准输出    | STDOUT_FILENO | stdout |\n| 2     | 标准错误    | STDERR_FILENO | stderr |\n\n> 程序中指代这些文件描述符时，可以使用数字（0、1、2）表示，但最好是采用<unistd.h>\n所定义的 POSIX 标准名称。\n\n### IO 操作的主要系统调用函数\n\n#### open()\n```c\nfd = open(pathname, flags, mode)\n```\n函数打开 `pathname` 所标识的文件，并返回文件描\n述符，用以在后续函数调用中指代打开的文件。如果文件不存在，`open()`函数可以\n创建之，这取决于对位掩码参数 `flags` `的设置。flags` 参数还可指定文件的打开方式：只\n`读、只写亦或是读写方式。mode` 参数则指定了由 `open()`调用创建文件的访问权限，\n如果 `open()` 函数并未创建文件，那么可以忽略或省略 `mode` 参数。\n\n```C\n// open existing file for reading\nfd = open(\"start.up\", O_RDONLY);\nif (fd == -1)\n    printf(\"can't open\");\n\n// open new or existing file or reading and writing, truncating to zero\n// bytes; file permissions read+write for owner, nothing for all others\nfd = open(\"myfile\", O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR );\nif (fd == -1)\n    printf(\"can't open\");\n\nfd = open(\"w.log\", O_WRONLY|O_CREAT|O_TRUNC|O_APPEND, S_IRUSR|S_IWUSR);\n\nif (fd == -1)\n    printf(\"can't open\");\n\n```\n\nSUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者。\n可以利用该特性以特定文件描述符打开某一文件。\n\n```C\nif (close(STDIN_FILENO) == -1)\n    print(\"close\");\n\nfd = open(pathname, O_RDONLY);\nif (fd == -1)\n    print(\"open\");\n\n```\n\n\n#### read()\n```C\nnumread = read(fd, buffer, count)\n```\n调用从 `fd` 所指代的打开文件中读取至多 `count` 字节的数据，并存储到 `buffer` 中。\n`read()`调用的返回值为实际读取到的字节数。如果再无字节可读（例如：读到文件结尾符 `EOF` 时），则返回值为 0。\n\n#### write()\n```C\nnumwritten = write(fd, buffer, count)\n```\n调用从 `buffer` 中读取多达 `count` 字节的数据写入由\n`fd` 所指代的已打开文件中。`write()`调用的返回值为实际写入文件中的字节数，且有可\n能小于 `count。`\n\n#### close()\n```C\nstatus = close(fd)\n```\n在所有输入/输出操作完成后，调用 `close()`，释放文件描述符 `fd` 以及与之相关的内核资源。\n\n\n> 使用IO 小例子(src/fileio/copy)： \n> ```C\n>$ clang copy.c error_functions.c get_num.c -o copy\n>$ ./copy newfile oldfile\n> ```\n\n\n\n# Others (补充)\n\n## libc & glibc\n`libc` 是 `ANSI C` 的函数库, `glibc` 是 `GNU C` 的函数库。\n\n\n`ANSI C` 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： \n\n* `<ctype.h>`：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；\n* `<errno.h>`：定义用来报告错误条件的宏；\n* `<float.h>`：包含系统的浮点数大小限制；\n* `<math.h>`：包含数学库函数的函数原型；\n* `<stddef.h>`：包含执行某些计算 C 所用的常见的函数定义；\n* `<stdio.h>`：包含标准输入输出库函数的函数原型，以及他们所用的信息；\n* `<stdlib.h>`：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；\n* `<string.h>`：包含字符串处理函数的函数原型；\n* `<time.h>`：包含时间和日期操作的函数原型和类型；\n* `<stdarg.h>`：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；\n* `<signal.h>`：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；\n* `<setjmp.h>`：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；\n* `<locale.h>`：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。\n 地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；\n* `<assert.h>`：包含宏和信息，用于进行诊断，帮助程序调试。\n\n`glibc`是linux下面c标准库的实现，即`GNU C Library`。\n`glibc`本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库`Linux libc`逐渐不再被维护。\nLinux下面的标准c库不仅有这一个，如`uclibc`、`klibc`，以及上面被提到的`Linux libc`，但是glibc无疑是用得最多的。\n`glibc`在/lib目录下的.so文件为libc.so.6。\n\n\n","slug":"linux-system-programming","published":1,"updated":"2021-11-20T13:57:50.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtvc0006z59y2qhsb55m","content":"<h2 id=\"系统调用\"><a href=\"#系统调用\" class=\"headerlink\" title=\"系统调用\"></a>系统调用</h2><p>在深入系统调用的运作方式之前，务必关注以下几点。</p>\n<ul>\n<li><p>系统调用将处理器从用户态切换到核心态，以便 CPU 访问受到保护的内核内存。</p>\n</li>\n<li><p>系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。<br>（程序通过名称来标识系统调用，对这一编号方案往往一无所知。）</p>\n</li>\n<li><p>每个系统调用可辅之以一套参数，对用户空间（亦即进程的虚拟地址空间）与内核空<br>间之间（相互）传递的信息加以规范。</p>\n</li>\n</ul>\n<p>从编程角度来看，系统调用与 C 语言函数的调用很相似。然而，在执行系统调用时，其<br>幕后会历经诸多步骤。为说明这点，下面以一个具体的硬件平台—x86-32 为例，按事件发<br>生的顺序对这些步骤加以分析。<br>1． 应用程序通过调用 C 语言函数库中的外壳（wrapper）函数，来发起系统调用。</p>\n<p>2． 对系统调用中断处理例程（稍后介绍）来说，外壳函数必须保证所有的系统调用参数可用。<br>通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。<br>因此，外壳函数会将上述参数复制到寄存器。</p>\n<p>3． 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函<br>数会将系统调用编号复制到一个特殊的 CPU 寄存器（%eax）中。</p>\n<p>4． 外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行<br>系统中断 0x80 (十进制数 128)的中断矢量所指向的代码。</p>\n<p>5． 为响应中断 0x80，内核会调用 system_call()例程（位于汇编文件 arch/i386/entry.S 中）来<br>处理这次中断，具体如下。<br>    a）在内核栈中保存寄存器值（参见 6.5 节）。 他<br>    b）审核系统调用编号的有效性。<br>    c）以系统调用编号对存放所有调用服务例程的列表（内核变量 sys_call_table）进行索引，<br>    发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。<br>    例如，会检查地址指向用户空间的内存位置是否有效。随后，该服务例程会执行必要的任务，这可能涉及对特定参数中指定地址处的值进行修改，以及在用户内存和内核内存间传递数据（比如，在 I/O 操作中）。<br>    最后，该服务例程会将结果状态返回给 system_call()例程。<br>    d）从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中。<br>    e）返回至外壳函数，同时将处理器切换回用户态。</p>\n<p>6． 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量 errno<br>（参见 3.4 节）。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统<br>调用是否成功。</p>\n<p><img src=\"imgs/linux_system_exec_steps.png\" alt=\"execve\"></p>\n<h2 id=\"文件I-O\"><a href=\"#文件I-O\" class=\"headerlink\" title=\"文件I/O\"></a>文件I/O</h2><p>所有执行 I/O 操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。<br>文件描述符用以表示所有类型的已打开文件，包括管道（pipe）、FIFO、socket、终端、<br>设备和普通文件。针对每个进程，文件描述符都自成一套。</p>\n<p>大多数程序都能够使用 3 种标准的文件描述符：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>用途</th>\n<th>POSIX</th>\n<th>stdio</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>标准输入</td>\n<td>STDIN_FILENO</td>\n<td>stdin</td>\n</tr>\n<tr>\n<td>1</td>\n<td>标准输出</td>\n<td>STDOUT_FILENO</td>\n<td>stdout</td>\n</tr>\n<tr>\n<td>2</td>\n<td>标准错误</td>\n<td>STDERR_FILENO</td>\n<td>stderr</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>程序中指代这些文件描述符时，可以使用数字（0、1、2）表示，但最好是采用&lt;unistd.h&gt;<br>所定义的 POSIX 标准名称。</p>\n</blockquote>\n<h3 id=\"IO-操作的主要系统调用函数\"><a href=\"#IO-操作的主要系统调用函数\" class=\"headerlink\" title=\"IO 操作的主要系统调用函数\"></a>IO 操作的主要系统调用函数</h3><h4 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open()\"></a>open()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd = open(pathname, flags, mode)</span><br></pre></td></tr></table></figure>\n<p>函数打开 <code>pathname</code> 所标识的文件，并返回文件描<br>述符，用以在后续函数调用中指代打开的文件。如果文件不存在，<code>open()</code>函数可以<br>创建之，这取决于对位掩码参数 <code>flags</code> <code>的设置。flags</code> 参数还可指定文件的打开方式：只<br><code>读、只写亦或是读写方式。mode</code> 参数则指定了由 <code>open()</code>调用创建文件的访问权限，<br>如果 <code>open()</code> 函数并未创建文件，那么可以忽略或省略 <code>mode</code> 参数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// open existing file for reading</span></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;start.up&quot;</span>, O_RDONLY);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// open new or existing file or reading and writing, truncating to zero</span></span><br><span class=\"line\"><span class=\"comment\">// bytes; file permissions read+write for owner, nothing for all others</span></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;myfile&quot;</span>, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR );</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;w.log&quot;</span>, O_WRONLY|O_CREAT|O_TRUNC|O_APPEND, S_IRUSR|S_IWUSR);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>SUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者。<br>可以利用该特性以特定文件描述符打开某一文件。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (close(STDIN_FILENO) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;close&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(pathname, O_RDONLY);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read()\"></a>read()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numread = read(fd, buffer, count)</span><br></pre></td></tr></table></figure>\n<p>调用从 <code>fd</code> 所指代的打开文件中读取至多 <code>count</code> 字节的数据，并存储到 <code>buffer</code> 中。<br><code>read()</code>调用的返回值为实际读取到的字节数。如果再无字节可读（例如：读到文件结尾符 <code>EOF</code> 时），则返回值为 0。</p>\n<h4 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write()\"></a>write()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numwritten = write(fd, buffer, count)</span><br></pre></td></tr></table></figure>\n<p>调用从 <code>buffer</code> 中读取多达 <code>count</code> 字节的数据写入由<br><code>fd</code> 所指代的已打开文件中。<code>write()</code>调用的返回值为实际写入文件中的字节数，且有可<br>能小于 <code>count。</code></p>\n<h4 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close()\"></a>close()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status = close(fd)</span><br></pre></td></tr></table></figure>\n<p>在所有输入/输出操作完成后，调用 <code>close()</code>，释放文件描述符 <code>fd</code> 以及与之相关的内核资源。</p>\n<blockquote>\n<p>使用IO 小例子(src/fileio/copy)： </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;$ clang copy.c error_functions.c get_num.c -o copy</span><br><span class=\"line\">&gt;$ ./copy newfile oldfile</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"Others-补充\"><a href=\"#Others-补充\" class=\"headerlink\" title=\"Others (补充)\"></a>Others (补充)</h1><h2 id=\"libc-amp-glibc\"><a href=\"#libc-amp-glibc\" class=\"headerlink\" title=\"libc &amp; glibc\"></a>libc &amp; glibc</h2><p><code>libc</code> 是 <code>ANSI C</code> 的函数库, <code>glibc</code> 是 <code>GNU C</code> 的函数库。</p>\n<p><code>ANSI C</code> 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： </p>\n<ul>\n<li><code>&lt;ctype.h&gt;</code>：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；</li>\n<li><code>&lt;errno.h&gt;</code>：定义用来报告错误条件的宏；</li>\n<li><code>&lt;float.h&gt;</code>：包含系统的浮点数大小限制；</li>\n<li><code>&lt;math.h&gt;</code>：包含数学库函数的函数原型；</li>\n<li><code>&lt;stddef.h&gt;</code>：包含执行某些计算 C 所用的常见的函数定义；</li>\n<li><code>&lt;stdio.h&gt;</code>：包含标准输入输出库函数的函数原型，以及他们所用的信息；</li>\n<li><code>&lt;stdlib.h&gt;</code>：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；</li>\n<li><code>&lt;string.h&gt;</code>：包含字符串处理函数的函数原型；</li>\n<li><code>&lt;time.h&gt;</code>：包含时间和日期操作的函数原型和类型；</li>\n<li><code>&lt;stdarg.h&gt;</code>：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；</li>\n<li><code>&lt;signal.h&gt;</code>：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；</li>\n<li><code>&lt;setjmp.h&gt;</code>：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；</li>\n<li><code>&lt;locale.h&gt;</code>：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。<br>地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；</li>\n<li><code>&lt;assert.h&gt;</code>：包含宏和信息，用于进行诊断，帮助程序调试。</li>\n</ul>\n<p><code>glibc</code>是linux下面c标准库的实现，即<code>GNU C Library</code>。<br><code>glibc</code>本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库<code>Linux libc</code>逐渐不再被维护。<br>Linux下面的标准c库不仅有这一个，如<code>uclibc</code>、<code>klibc</code>，以及上面被提到的<code>Linux libc</code>，但是glibc无疑是用得最多的。<br><code>glibc</code>在/lib目录下的.so文件为libc.so.6。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"系统调用\"><a href=\"#系统调用\" class=\"headerlink\" title=\"系统调用\"></a>系统调用</h2><p>在深入系统调用的运作方式之前，务必关注以下几点。</p>\n<ul>\n<li><p>系统调用将处理器从用户态切换到核心态，以便 CPU 访问受到保护的内核内存。</p>\n</li>\n<li><p>系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。<br>（程序通过名称来标识系统调用，对这一编号方案往往一无所知。）</p>\n</li>\n<li><p>每个系统调用可辅之以一套参数，对用户空间（亦即进程的虚拟地址空间）与内核空<br>间之间（相互）传递的信息加以规范。</p>\n</li>\n</ul>\n<p>从编程角度来看，系统调用与 C 语言函数的调用很相似。然而，在执行系统调用时，其<br>幕后会历经诸多步骤。为说明这点，下面以一个具体的硬件平台—x86-32 为例，按事件发<br>生的顺序对这些步骤加以分析。<br>1． 应用程序通过调用 C 语言函数库中的外壳（wrapper）函数，来发起系统调用。</p>\n<p>2． 对系统调用中断处理例程（稍后介绍）来说，外壳函数必须保证所有的系统调用参数可用。<br>通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。<br>因此，外壳函数会将上述参数复制到寄存器。</p>\n<p>3． 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函<br>数会将系统调用编号复制到一个特殊的 CPU 寄存器（%eax）中。</p>\n<p>4． 外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行<br>系统中断 0x80 (十进制数 128)的中断矢量所指向的代码。</p>\n<p>5． 为响应中断 0x80，内核会调用 system_call()例程（位于汇编文件 arch/i386/entry.S 中）来<br>处理这次中断，具体如下。<br>    a）在内核栈中保存寄存器值（参见 6.5 节）。 他<br>    b）审核系统调用编号的有效性。<br>    c）以系统调用编号对存放所有调用服务例程的列表（内核变量 sys_call_table）进行索引，<br>    发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。<br>    例如，会检查地址指向用户空间的内存位置是否有效。随后，该服务例程会执行必要的任务，这可能涉及对特定参数中指定地址处的值进行修改，以及在用户内存和内核内存间传递数据（比如，在 I/O 操作中）。<br>    最后，该服务例程会将结果状态返回给 system_call()例程。<br>    d）从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中。<br>    e）返回至外壳函数，同时将处理器切换回用户态。</p>\n<p>6． 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量 errno<br>（参见 3.4 节）。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统<br>调用是否成功。</p>\n<p><img src=\"imgs/linux_system_exec_steps.png\" alt=\"execve\"></p>\n<h2 id=\"文件I-O\"><a href=\"#文件I-O\" class=\"headerlink\" title=\"文件I/O\"></a>文件I/O</h2><p>所有执行 I/O 操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。<br>文件描述符用以表示所有类型的已打开文件，包括管道（pipe）、FIFO、socket、终端、<br>设备和普通文件。针对每个进程，文件描述符都自成一套。</p>\n<p>大多数程序都能够使用 3 种标准的文件描述符：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>用途</th>\n<th>POSIX</th>\n<th>stdio</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>标准输入</td>\n<td>STDIN_FILENO</td>\n<td>stdin</td>\n</tr>\n<tr>\n<td>1</td>\n<td>标准输出</td>\n<td>STDOUT_FILENO</td>\n<td>stdout</td>\n</tr>\n<tr>\n<td>2</td>\n<td>标准错误</td>\n<td>STDERR_FILENO</td>\n<td>stderr</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>程序中指代这些文件描述符时，可以使用数字（0、1、2）表示，但最好是采用&lt;unistd.h&gt;<br>所定义的 POSIX 标准名称。</p>\n</blockquote>\n<h3 id=\"IO-操作的主要系统调用函数\"><a href=\"#IO-操作的主要系统调用函数\" class=\"headerlink\" title=\"IO 操作的主要系统调用函数\"></a>IO 操作的主要系统调用函数</h3><h4 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open()\"></a>open()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd = open(pathname, flags, mode)</span><br></pre></td></tr></table></figure>\n<p>函数打开 <code>pathname</code> 所标识的文件，并返回文件描<br>述符，用以在后续函数调用中指代打开的文件。如果文件不存在，<code>open()</code>函数可以<br>创建之，这取决于对位掩码参数 <code>flags</code> <code>的设置。flags</code> 参数还可指定文件的打开方式：只<br><code>读、只写亦或是读写方式。mode</code> 参数则指定了由 <code>open()</code>调用创建文件的访问权限，<br>如果 <code>open()</code> 函数并未创建文件，那么可以忽略或省略 <code>mode</code> 参数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// open existing file for reading</span></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;start.up&quot;</span>, O_RDONLY);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// open new or existing file or reading and writing, truncating to zero</span></span><br><span class=\"line\"><span class=\"comment\">// bytes; file permissions read+write for owner, nothing for all others</span></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;myfile&quot;</span>, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR );</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;w.log&quot;</span>, O_WRONLY|O_CREAT|O_TRUNC|O_APPEND, S_IRUSR|S_IWUSR);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>SUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者。<br>可以利用该特性以特定文件描述符打开某一文件。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (close(STDIN_FILENO) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;close&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(pathname, O_RDONLY);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read()\"></a>read()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numread = read(fd, buffer, count)</span><br></pre></td></tr></table></figure>\n<p>调用从 <code>fd</code> 所指代的打开文件中读取至多 <code>count</code> 字节的数据，并存储到 <code>buffer</code> 中。<br><code>read()</code>调用的返回值为实际读取到的字节数。如果再无字节可读（例如：读到文件结尾符 <code>EOF</code> 时），则返回值为 0。</p>\n<h4 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write()\"></a>write()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numwritten = write(fd, buffer, count)</span><br></pre></td></tr></table></figure>\n<p>调用从 <code>buffer</code> 中读取多达 <code>count</code> 字节的数据写入由<br><code>fd</code> 所指代的已打开文件中。<code>write()</code>调用的返回值为实际写入文件中的字节数，且有可<br>能小于 <code>count。</code></p>\n<h4 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close()\"></a>close()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status = close(fd)</span><br></pre></td></tr></table></figure>\n<p>在所有输入/输出操作完成后，调用 <code>close()</code>，释放文件描述符 <code>fd</code> 以及与之相关的内核资源。</p>\n<blockquote>\n<p>使用IO 小例子(src/fileio/copy)： </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;$ clang copy.c error_functions.c get_num.c -o copy</span><br><span class=\"line\">&gt;$ ./copy newfile oldfile</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"Others-补充\"><a href=\"#Others-补充\" class=\"headerlink\" title=\"Others (补充)\"></a>Others (补充)</h1><h2 id=\"libc-amp-glibc\"><a href=\"#libc-amp-glibc\" class=\"headerlink\" title=\"libc &amp; glibc\"></a>libc &amp; glibc</h2><p><code>libc</code> 是 <code>ANSI C</code> 的函数库, <code>glibc</code> 是 <code>GNU C</code> 的函数库。</p>\n<p><code>ANSI C</code> 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： </p>\n<ul>\n<li><code>&lt;ctype.h&gt;</code>：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；</li>\n<li><code>&lt;errno.h&gt;</code>：定义用来报告错误条件的宏；</li>\n<li><code>&lt;float.h&gt;</code>：包含系统的浮点数大小限制；</li>\n<li><code>&lt;math.h&gt;</code>：包含数学库函数的函数原型；</li>\n<li><code>&lt;stddef.h&gt;</code>：包含执行某些计算 C 所用的常见的函数定义；</li>\n<li><code>&lt;stdio.h&gt;</code>：包含标准输入输出库函数的函数原型，以及他们所用的信息；</li>\n<li><code>&lt;stdlib.h&gt;</code>：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；</li>\n<li><code>&lt;string.h&gt;</code>：包含字符串处理函数的函数原型；</li>\n<li><code>&lt;time.h&gt;</code>：包含时间和日期操作的函数原型和类型；</li>\n<li><code>&lt;stdarg.h&gt;</code>：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；</li>\n<li><code>&lt;signal.h&gt;</code>：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；</li>\n<li><code>&lt;setjmp.h&gt;</code>：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；</li>\n<li><code>&lt;locale.h&gt;</code>：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。<br>地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；</li>\n<li><code>&lt;assert.h&gt;</code>：包含宏和信息，用于进行诊断，帮助程序调试。</li>\n</ul>\n<p><code>glibc</code>是linux下面c标准库的实现，即<code>GNU C Library</code>。<br><code>glibc</code>本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库<code>Linux libc</code>逐渐不再被维护。<br>Linux下面的标准c库不仅有这一个，如<code>uclibc</code>、<code>klibc</code>，以及上面被提到的<code>Linux libc</code>，但是glibc无疑是用得最多的。<br><code>glibc</code>在/lib目录下的.so文件为libc.so.6。</p>\n"},{"title":"manjaro_swap","date":"2021-12-16T09:04:07.000Z","_content":"\n\n> 起因： 编译AOSP源码， 提示最小内存为 16gb\n\n\n本机环境：\n```bash\n ████████  ████████  ████████     young@dev\n ████████  ████████  ████████     young@dev\n ████████  ████████  ████████     Uptime: 3h 52m\n                                  Shell: bash 5.1.12\n ████████  ████████  ████████     DE: GNOME 41.2\n ████████  ████████  ████████     GTK Theme: Matcha-light-sea [GTK2/3]\n                                  Icon Theme: Papirus-Adapta-Maia\n ████████  ████████  ████████     CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz\n ██████████████████  ████████     GPU: AMD/ATI\n ████████  ████████  ████████     Kernel: x86_64 Linux 5.15.7-1-MANJARO\n ██████████████████  ████████     Resolution: 2560x1440\n ████████  ████████  ████████     WM Theme: \n ██████████████████  ████████     Disk: 383G / 946G (43%)\n ██████████████████  ████████     RAM: 3558MiB / 15448MiB\n ████████  ████████  ████████     Packages: 1375\n                                  OS: Manjaro 21.2.0 Qonos\n ████████  ████████  ████████     Font: Noto Sans 12\n ████████  ████████  ████████     WM: Mutter\n```\n\n## 配置及安装相应软件\n```bash\nsudo yay -Syyu\n\nyay -S lineageos-devel\n\n```\n\n## 建立交换文件\n\n使用dd去创建一个由你自己指定大小的交换文件。例如，创建一个 20 GiB 的交换文件:\n```bash\nsudo dd if=/dev/zero of=/swapfile bs=1G count=20 status=progress\n```\n\n为交换文件设置权限（交换文件全局可读是一个巨大的本地漏洞）：\n\n```bash\nsudo chmod 600 /swapfile\n```\n\n创建正确大小的文件后，将其格式化用来作为交换文件：\n\n```bash\nsudo mkswap /swapfile\n```\n\n启用交换文件：\n\n```bash\nsudo swapon /swapfile\n```\n\n最后，编辑 /etc/fstab，在为交换文件添加一个条目：\n\n```bash\n/swapfile none swap defaults 0 0\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/manjaro-swap.md","raw":"---\ntitle: manjaro_swap\ndate: 2021-12-16 17:04:07\ntags:\n    - Linux\ncategories:\n    - Linux编程\n---\n\n\n> 起因： 编译AOSP源码， 提示最小内存为 16gb\n\n\n本机环境：\n```bash\n ████████  ████████  ████████     young@dev\n ████████  ████████  ████████     young@dev\n ████████  ████████  ████████     Uptime: 3h 52m\n                                  Shell: bash 5.1.12\n ████████  ████████  ████████     DE: GNOME 41.2\n ████████  ████████  ████████     GTK Theme: Matcha-light-sea [GTK2/3]\n                                  Icon Theme: Papirus-Adapta-Maia\n ████████  ████████  ████████     CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz\n ██████████████████  ████████     GPU: AMD/ATI\n ████████  ████████  ████████     Kernel: x86_64 Linux 5.15.7-1-MANJARO\n ██████████████████  ████████     Resolution: 2560x1440\n ████████  ████████  ████████     WM Theme: \n ██████████████████  ████████     Disk: 383G / 946G (43%)\n ██████████████████  ████████     RAM: 3558MiB / 15448MiB\n ████████  ████████  ████████     Packages: 1375\n                                  OS: Manjaro 21.2.0 Qonos\n ████████  ████████  ████████     Font: Noto Sans 12\n ████████  ████████  ████████     WM: Mutter\n```\n\n## 配置及安装相应软件\n```bash\nsudo yay -Syyu\n\nyay -S lineageos-devel\n\n```\n\n## 建立交换文件\n\n使用dd去创建一个由你自己指定大小的交换文件。例如，创建一个 20 GiB 的交换文件:\n```bash\nsudo dd if=/dev/zero of=/swapfile bs=1G count=20 status=progress\n```\n\n为交换文件设置权限（交换文件全局可读是一个巨大的本地漏洞）：\n\n```bash\nsudo chmod 600 /swapfile\n```\n\n创建正确大小的文件后，将其格式化用来作为交换文件：\n\n```bash\nsudo mkswap /swapfile\n```\n\n启用交换文件：\n\n```bash\nsudo swapon /swapfile\n```\n\n最后，编辑 /etc/fstab，在为交换文件添加一个条目：\n\n```bash\n/swapfile none swap defaults 0 0\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"manjaro-swap","published":1,"updated":"2021-12-26T09:31:08.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtvc0007z59yg17bh7v9","content":"<blockquote>\n<p>起因： 编译AOSP源码， 提示最小内存为 16gb</p>\n</blockquote>\n<p>本机环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">████████  ████████  ████████     young@dev</span><br><span class=\"line\">████████  ████████  ████████     young@dev</span><br><span class=\"line\">████████  ████████  ████████     Uptime: 3h 52m</span><br><span class=\"line\">                                 Shell: bash 5.1.12</span><br><span class=\"line\">████████  ████████  ████████     DE: GNOME 41.2</span><br><span class=\"line\">████████  ████████  ████████     GTK Theme: Matcha-light-sea [GTK2/3]</span><br><span class=\"line\">                                 Icon Theme: Papirus-Adapta-Maia</span><br><span class=\"line\">████████  ████████  ████████     CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz</span><br><span class=\"line\">██████████████████  ████████     GPU: AMD/ATI</span><br><span class=\"line\">████████  ████████  ████████     Kernel: x86_64 Linux 5.15.7-1-MANJARO</span><br><span class=\"line\">██████████████████  ████████     Resolution: 2560x1440</span><br><span class=\"line\">████████  ████████  ████████     WM Theme: </span><br><span class=\"line\">██████████████████  ████████     Disk: 383G / 946G (43%)</span><br><span class=\"line\">██████████████████  ████████     RAM: 3558MiB / 15448MiB</span><br><span class=\"line\">████████  ████████  ████████     Packages: 1375</span><br><span class=\"line\">                                 OS: Manjaro 21.2.0 Qonos</span><br><span class=\"line\">████████  ████████  ████████     Font: Noto Sans 12</span><br><span class=\"line\">████████  ████████  ████████     WM: Mutter</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置及安装相应软件\"><a href=\"#配置及安装相应软件\" class=\"headerlink\" title=\"配置及安装相应软件\"></a>配置及安装相应软件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yay -Syyu</span><br><span class=\"line\"></span><br><span class=\"line\">yay -S lineageos-devel</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立交换文件\"><a href=\"#建立交换文件\" class=\"headerlink\" title=\"建立交换文件\"></a>建立交换文件</h2><p>使用dd去创建一个由你自己指定大小的交换文件。例如，创建一个 20 GiB 的交换文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dd <span class=\"keyword\">if</span>=/dev/zero of=/swapfile bs=1G count=20 status=progress</span><br></pre></td></tr></table></figure>\n\n<p>为交换文件设置权限（交换文件全局可读是一个巨大的本地漏洞）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 600 /swapfile</span><br></pre></td></tr></table></figure>\n\n<p>创建正确大小的文件后，将其格式化用来作为交换文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkswap /swapfile</span><br></pre></td></tr></table></figure>\n\n<p>启用交换文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapon /swapfile</span><br></pre></td></tr></table></figure>\n\n<p>最后，编辑 /etc/fstab，在为交换文件添加一个条目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/swapfile none swap defaults 0 0</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>起因： 编译AOSP源码， 提示最小内存为 16gb</p>\n</blockquote>\n<p>本机环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">████████  ████████  ████████     young@dev</span><br><span class=\"line\">████████  ████████  ████████     young@dev</span><br><span class=\"line\">████████  ████████  ████████     Uptime: 3h 52m</span><br><span class=\"line\">                                 Shell: bash 5.1.12</span><br><span class=\"line\">████████  ████████  ████████     DE: GNOME 41.2</span><br><span class=\"line\">████████  ████████  ████████     GTK Theme: Matcha-light-sea [GTK2/3]</span><br><span class=\"line\">                                 Icon Theme: Papirus-Adapta-Maia</span><br><span class=\"line\">████████  ████████  ████████     CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz</span><br><span class=\"line\">██████████████████  ████████     GPU: AMD/ATI</span><br><span class=\"line\">████████  ████████  ████████     Kernel: x86_64 Linux 5.15.7-1-MANJARO</span><br><span class=\"line\">██████████████████  ████████     Resolution: 2560x1440</span><br><span class=\"line\">████████  ████████  ████████     WM Theme: </span><br><span class=\"line\">██████████████████  ████████     Disk: 383G / 946G (43%)</span><br><span class=\"line\">██████████████████  ████████     RAM: 3558MiB / 15448MiB</span><br><span class=\"line\">████████  ████████  ████████     Packages: 1375</span><br><span class=\"line\">                                 OS: Manjaro 21.2.0 Qonos</span><br><span class=\"line\">████████  ████████  ████████     Font: Noto Sans 12</span><br><span class=\"line\">████████  ████████  ████████     WM: Mutter</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置及安装相应软件\"><a href=\"#配置及安装相应软件\" class=\"headerlink\" title=\"配置及安装相应软件\"></a>配置及安装相应软件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yay -Syyu</span><br><span class=\"line\"></span><br><span class=\"line\">yay -S lineageos-devel</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立交换文件\"><a href=\"#建立交换文件\" class=\"headerlink\" title=\"建立交换文件\"></a>建立交换文件</h2><p>使用dd去创建一个由你自己指定大小的交换文件。例如，创建一个 20 GiB 的交换文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dd <span class=\"keyword\">if</span>=/dev/zero of=/swapfile bs=1G count=20 status=progress</span><br></pre></td></tr></table></figure>\n\n<p>为交换文件设置权限（交换文件全局可读是一个巨大的本地漏洞）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 600 /swapfile</span><br></pre></td></tr></table></figure>\n\n<p>创建正确大小的文件后，将其格式化用来作为交换文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkswap /swapfile</span><br></pre></td></tr></table></figure>\n\n<p>启用交换文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapon /swapfile</span><br></pre></td></tr></table></figure>\n\n<p>最后，编辑 /etc/fstab，在为交换文件添加一个条目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/swapfile none swap defaults 0 0</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"osi: phy&mac","date":"2021-12-23T10:10:54.000Z","_content":"\n# BLock\n![pic](https://blog.zeerd.com/public/2021/01/19/ieee802.3.96.1.svg)\n\n\n## PHY & MAC\n从上到下：\n| | |\n| -- | -- |\n| I/F  |比如PCI总线。负责将IP数据包（或其他协议）传递给MAC层。  |\n| MAC  |包含MAC子层和LLC子层。|\n| MII/SMI |\tMedia Independed Interfade，介质独立界面。连接MAC和PHY。MAC对PHY的工作状态的确定和对PHY的控制则是使用SMI（Serial Management Interface）界面通过读写PHY的寄存器来完成的。|\n| PHY\t| 以太网的物理层又包括MII/GMII（介质独立接口）子层、PCS（物理编码子层）、PMA（物理介质附加）子层、PMD（物理介质相关）子层、MDI子层。 对PHY来说，没有帧的概念，都是二进制数据。|\n| I/F\t| 如RJ45。|\n\n\n当然，肯定还有其他的，什么稳压的、滤波的，就不写在这里了。\n可以看到，基本上涉及算法的东西应该都在MAC里面。毕竟到了PHY就不能区分协议了。\n\n## 固件与驱动：\n固件：运行在设备自身的微控制器内部的代码。原则上，应该将尽可能多的功能做入到固件中。只有固件没有驱动才是最完美的。\n驱动：那些操作系统相关的、无法跨系统共通的、必须独立出来的代码留在驱动中。\n\n## Hardware Arch\n\n```mermaid\ngraph TD;\n    DMA-->CPU/MCU;\n    DMA-->MAC;\n    CPU/MCU-->DMA;\n\n    CPU/MCU-->MAC;\n    MAC-->CPU/MCU;\n    MAC-->DMA\n    MAC-->PHY\n    PHY-->MAC\n```\n","source":"_posts/osi-phy-mac.md","raw":"---\ntitle: 'osi: phy&mac'\ndate: 2021-12-23 18:10:54\ntags:\n    - osi\n    - phy\n    - mac\n---\n\n# BLock\n![pic](https://blog.zeerd.com/public/2021/01/19/ieee802.3.96.1.svg)\n\n\n## PHY & MAC\n从上到下：\n| | |\n| -- | -- |\n| I/F  |比如PCI总线。负责将IP数据包（或其他协议）传递给MAC层。  |\n| MAC  |包含MAC子层和LLC子层。|\n| MII/SMI |\tMedia Independed Interfade，介质独立界面。连接MAC和PHY。MAC对PHY的工作状态的确定和对PHY的控制则是使用SMI（Serial Management Interface）界面通过读写PHY的寄存器来完成的。|\n| PHY\t| 以太网的物理层又包括MII/GMII（介质独立接口）子层、PCS（物理编码子层）、PMA（物理介质附加）子层、PMD（物理介质相关）子层、MDI子层。 对PHY来说，没有帧的概念，都是二进制数据。|\n| I/F\t| 如RJ45。|\n\n\n当然，肯定还有其他的，什么稳压的、滤波的，就不写在这里了。\n可以看到，基本上涉及算法的东西应该都在MAC里面。毕竟到了PHY就不能区分协议了。\n\n## 固件与驱动：\n固件：运行在设备自身的微控制器内部的代码。原则上，应该将尽可能多的功能做入到固件中。只有固件没有驱动才是最完美的。\n驱动：那些操作系统相关的、无法跨系统共通的、必须独立出来的代码留在驱动中。\n\n## Hardware Arch\n\n```mermaid\ngraph TD;\n    DMA-->CPU/MCU;\n    DMA-->MAC;\n    CPU/MCU-->DMA;\n\n    CPU/MCU-->MAC;\n    MAC-->CPU/MCU;\n    MAC-->DMA\n    MAC-->PHY\n    PHY-->MAC\n```\n","slug":"osi-phy-mac","published":1,"updated":"2021-12-26T10:11:44.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtvf000az59y096v7hbk","content":"<h1 id=\"BLock\"><a href=\"#BLock\" class=\"headerlink\" title=\"BLock\"></a>BLock</h1><p><img src=\"https://blog.zeerd.com/public/2021/01/19/ieee802.3.96.1.svg\" alt=\"pic\"></p>\n<h2 id=\"PHY-amp-MAC\"><a href=\"#PHY-amp-MAC\" class=\"headerlink\" title=\"PHY &amp; MAC\"></a>PHY &amp; MAC</h2><p>从上到下：<br>| | |<br>| – | – |<br>| I/F  |比如PCI总线。负责将IP数据包（或其他协议）传递给MAC层。  |<br>| MAC  |包含MAC子层和LLC子层。|<br>| MII/SMI |    Media Independed Interfade，介质独立界面。连接MAC和PHY。MAC对PHY的工作状态的确定和对PHY的控制则是使用SMI（Serial Management Interface）界面通过读写PHY的寄存器来完成的。|<br>| PHY    | 以太网的物理层又包括MII/GMII（介质独立接口）子层、PCS（物理编码子层）、PMA（物理介质附加）子层、PMD（物理介质相关）子层、MDI子层。 对PHY来说，没有帧的概念，都是二进制数据。|<br>| I/F    | 如RJ45。|</p>\n<p>当然，肯定还有其他的，什么稳压的、滤波的，就不写在这里了。<br>可以看到，基本上涉及算法的东西应该都在MAC里面。毕竟到了PHY就不能区分协议了。</p>\n<h2 id=\"固件与驱动：\"><a href=\"#固件与驱动：\" class=\"headerlink\" title=\"固件与驱动：\"></a>固件与驱动：</h2><p>固件：运行在设备自身的微控制器内部的代码。原则上，应该将尽可能多的功能做入到固件中。只有固件没有驱动才是最完美的。<br>驱动：那些操作系统相关的、无法跨系统共通的、必须独立出来的代码留在驱动中。</p>\n<h2 id=\"Hardware-Arch\"><a href=\"#Hardware-Arch\" class=\"headerlink\" title=\"Hardware Arch\"></a>Hardware Arch</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    DMA--&gt;CPU/MCU;</span><br><span class=\"line\">    DMA--&gt;MAC;</span><br><span class=\"line\">    CPU/MCU--&gt;DMA;</span><br><span class=\"line\"></span><br><span class=\"line\">    CPU/MCU--&gt;MAC;</span><br><span class=\"line\">    MAC--&gt;CPU/MCU;</span><br><span class=\"line\">    MAC--&gt;DMA</span><br><span class=\"line\">    MAC--&gt;PHY</span><br><span class=\"line\">    PHY--&gt;MAC</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"BLock\"><a href=\"#BLock\" class=\"headerlink\" title=\"BLock\"></a>BLock</h1><p><img src=\"https://blog.zeerd.com/public/2021/01/19/ieee802.3.96.1.svg\" alt=\"pic\"></p>\n<h2 id=\"PHY-amp-MAC\"><a href=\"#PHY-amp-MAC\" class=\"headerlink\" title=\"PHY &amp; MAC\"></a>PHY &amp; MAC</h2><p>从上到下：<br>| | |<br>| – | – |<br>| I/F  |比如PCI总线。负责将IP数据包（或其他协议）传递给MAC层。  |<br>| MAC  |包含MAC子层和LLC子层。|<br>| MII/SMI |    Media Independed Interfade，介质独立界面。连接MAC和PHY。MAC对PHY的工作状态的确定和对PHY的控制则是使用SMI（Serial Management Interface）界面通过读写PHY的寄存器来完成的。|<br>| PHY    | 以太网的物理层又包括MII/GMII（介质独立接口）子层、PCS（物理编码子层）、PMA（物理介质附加）子层、PMD（物理介质相关）子层、MDI子层。 对PHY来说，没有帧的概念，都是二进制数据。|<br>| I/F    | 如RJ45。|</p>\n<p>当然，肯定还有其他的，什么稳压的、滤波的，就不写在这里了。<br>可以看到，基本上涉及算法的东西应该都在MAC里面。毕竟到了PHY就不能区分协议了。</p>\n<h2 id=\"固件与驱动：\"><a href=\"#固件与驱动：\" class=\"headerlink\" title=\"固件与驱动：\"></a>固件与驱动：</h2><p>固件：运行在设备自身的微控制器内部的代码。原则上，应该将尽可能多的功能做入到固件中。只有固件没有驱动才是最完美的。<br>驱动：那些操作系统相关的、无法跨系统共通的、必须独立出来的代码留在驱动中。</p>\n<h2 id=\"Hardware-Arch\"><a href=\"#Hardware-Arch\" class=\"headerlink\" title=\"Hardware Arch\"></a>Hardware Arch</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    DMA--&gt;CPU/MCU;</span><br><span class=\"line\">    DMA--&gt;MAC;</span><br><span class=\"line\">    CPU/MCU--&gt;DMA;</span><br><span class=\"line\"></span><br><span class=\"line\">    CPU/MCU--&gt;MAC;</span><br><span class=\"line\">    MAC--&gt;CPU/MCU;</span><br><span class=\"line\">    MAC--&gt;DMA</span><br><span class=\"line\">    MAC--&gt;PHY</span><br><span class=\"line\">    PHY--&gt;MAC</span><br></pre></td></tr></table></figure>\n"},{"title":"service-discovery","date":"2021-12-26T09:46:21.000Z","_content":"\n# 服务发现\n\n## 基本流程\n\n* Register, 服务启动时候进行注册\n\n* Query, 查询已注册服务信息\n\n* Healthy Check,确认服务状态是否健康\n\n整个过程很简单。大致就是在服务启动的时候，先去进行注册，并且定时反馈本身功能是否正常。由服务发现机制统一负责维护一份正确或者可用的服务清单。因此，服务本身需要能随时接受查下，反馈调用方服务所要的信息。\n\n## 注册\n\n一整套服务发现机制顺利运行，需要维护一份可用的服务列表。包含服务注册与移除功能，以及健康检查。\n\n常见的注册模式\n\n### 自主注册\n\n自主注册模式，由服务(client)本身来维护。\n每个服务启动后，需要到统一的服务注册中心进行注册登记，服务正常终止后，也可以到注册中心移除自身的注册记录。\n在服务执行过程中，通过不断的发送心跳信息，来通知注册中心，本服务运行正常。注册中心只要超过一定的时间没有收到心跳消息，\n就可以将这个服务状态判断为异常，进而移除该服务的注册记录。\n\n### 第三方注册 \n这个模式与自主注册相比，区别是健康检查的动作不是由服务本身(client)来负责，而是由第三方服务来确认。\n因为有时候服务自身发送心跳信息的方式并不精确，因为可能服务本身已经存在故障，某些接口功能不可用，\n但仍然可以不断的发送心跳信息，导致注册中心没有发觉该服务已经异常，从而源源不断的将流量打到已经异常的服务上来。\n所以, 确认服务是否正常运转的健康检查机制，就不能只依靠心跳，必须通过其它第三方的验证，不断的从外部来确认服务本身的健康状态。\n\n在实际应用中, 需要根据需求合理搭配服务, 和管理机制.\n\n\n## 发现\n\n发现机制主要包括三种：\n\n* 服务提供者：\n服务启动时将服务信息注册到注册中心，服务退出时将注册中心的服务信息删除掉。\n\n* 服务消费者：\n从服务注册表获取服务提供者的最新网络位置等服务信息，维护与服务提供者之间的通信。\n\n* 注册中心：\n服务提供者和服务消费者之间的一个桥梁\n\n服务发现机制的关键部分是注册中心。注册中心提供管理和查询服务注册信息的API。\n当服务提供者的实例发生变更时（新增/删除服务），服务注册表更新最新的状态列表，并将其最新列表以适当的方式通知给服务消费者。\n\n\n### 常用的发现模式\n\n#### 客户端发现模式\n\n首先要进行的是到服务注册中心获取服务列表，然后再根据调用端本地的负载均衡策略，进行服务调用:\n\n* 1.服务提供者向注册中心进行注册，提交自己的相关信息 (register)\n\n* 2.服务消费者定期从注册中心获取服务提供者列表 (keep alive)\n\n* 3.服务消费者通过自身的负载均衡算法，在服务提供者列表里面选择一个合适的服务提供者，进行访问\n\n#### 服务端发现模式。\n* 1 服务提供者向注册中心进行服务注册 \n* 2 注册中心提供负载均衡功能， \n* 3 服务消费者去请求注册中心，由注册中心根据服务提供列表的健康情况，选择合适的服务提供者供服务消费者调用\n\n> 本质区别在于，客户端是否保存服务列表信息\n\n### 实现方案\n\n#### file\n\n以文件的形式实现服务发现，这是一个比较简单的方案。\n其基本原理就是将服务提供者的信息(ip:port)写入文件中，服务消费者加载该文件，\n获取服务提供者的信息，根据一定的策略，进行访问。\n\n需要注意的是，因为以文件形式提供服务发现，服务消费者要定期的去访问该文件，\n以获得最新的服务提供者列表，这里有个小优化点，就是可以有个线程定时去做该任务，\n首先去用该文件的最后一次修改时间跟服务上一次读取文件时候存储的修改时间做对比，\n如果时间一致，表明文件未做修改，那么就不需要重新做加载了，反之，重新加载文件。\n\n文件方式实现服务发现，其特点显而易见：\n\n* 优点：\n实现简单，去中心化\n\n* 缺点：\n需要服务消费者去定时操作，如果某一个文件推送失败，那么就会造成异常现象\n\n> SOME/IP 就是通过文件的方式实现.\n\n#### 其他第三方实现:\n\n* zookeeper\n* redis\n* etcd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/service-discovery.md","raw":"---\ntitle: service-discovery\ndate: 2021-12-26 17:46:21\ntags:\n    - someip-sd\n    - service discovery\ncategories:\n    - concepts\n---\n\n# 服务发现\n\n## 基本流程\n\n* Register, 服务启动时候进行注册\n\n* Query, 查询已注册服务信息\n\n* Healthy Check,确认服务状态是否健康\n\n整个过程很简单。大致就是在服务启动的时候，先去进行注册，并且定时反馈本身功能是否正常。由服务发现机制统一负责维护一份正确或者可用的服务清单。因此，服务本身需要能随时接受查下，反馈调用方服务所要的信息。\n\n## 注册\n\n一整套服务发现机制顺利运行，需要维护一份可用的服务列表。包含服务注册与移除功能，以及健康检查。\n\n常见的注册模式\n\n### 自主注册\n\n自主注册模式，由服务(client)本身来维护。\n每个服务启动后，需要到统一的服务注册中心进行注册登记，服务正常终止后，也可以到注册中心移除自身的注册记录。\n在服务执行过程中，通过不断的发送心跳信息，来通知注册中心，本服务运行正常。注册中心只要超过一定的时间没有收到心跳消息，\n就可以将这个服务状态判断为异常，进而移除该服务的注册记录。\n\n### 第三方注册 \n这个模式与自主注册相比，区别是健康检查的动作不是由服务本身(client)来负责，而是由第三方服务来确认。\n因为有时候服务自身发送心跳信息的方式并不精确，因为可能服务本身已经存在故障，某些接口功能不可用，\n但仍然可以不断的发送心跳信息，导致注册中心没有发觉该服务已经异常，从而源源不断的将流量打到已经异常的服务上来。\n所以, 确认服务是否正常运转的健康检查机制，就不能只依靠心跳，必须通过其它第三方的验证，不断的从外部来确认服务本身的健康状态。\n\n在实际应用中, 需要根据需求合理搭配服务, 和管理机制.\n\n\n## 发现\n\n发现机制主要包括三种：\n\n* 服务提供者：\n服务启动时将服务信息注册到注册中心，服务退出时将注册中心的服务信息删除掉。\n\n* 服务消费者：\n从服务注册表获取服务提供者的最新网络位置等服务信息，维护与服务提供者之间的通信。\n\n* 注册中心：\n服务提供者和服务消费者之间的一个桥梁\n\n服务发现机制的关键部分是注册中心。注册中心提供管理和查询服务注册信息的API。\n当服务提供者的实例发生变更时（新增/删除服务），服务注册表更新最新的状态列表，并将其最新列表以适当的方式通知给服务消费者。\n\n\n### 常用的发现模式\n\n#### 客户端发现模式\n\n首先要进行的是到服务注册中心获取服务列表，然后再根据调用端本地的负载均衡策略，进行服务调用:\n\n* 1.服务提供者向注册中心进行注册，提交自己的相关信息 (register)\n\n* 2.服务消费者定期从注册中心获取服务提供者列表 (keep alive)\n\n* 3.服务消费者通过自身的负载均衡算法，在服务提供者列表里面选择一个合适的服务提供者，进行访问\n\n#### 服务端发现模式。\n* 1 服务提供者向注册中心进行服务注册 \n* 2 注册中心提供负载均衡功能， \n* 3 服务消费者去请求注册中心，由注册中心根据服务提供列表的健康情况，选择合适的服务提供者供服务消费者调用\n\n> 本质区别在于，客户端是否保存服务列表信息\n\n### 实现方案\n\n#### file\n\n以文件的形式实现服务发现，这是一个比较简单的方案。\n其基本原理就是将服务提供者的信息(ip:port)写入文件中，服务消费者加载该文件，\n获取服务提供者的信息，根据一定的策略，进行访问。\n\n需要注意的是，因为以文件形式提供服务发现，服务消费者要定期的去访问该文件，\n以获得最新的服务提供者列表，这里有个小优化点，就是可以有个线程定时去做该任务，\n首先去用该文件的最后一次修改时间跟服务上一次读取文件时候存储的修改时间做对比，\n如果时间一致，表明文件未做修改，那么就不需要重新做加载了，反之，重新加载文件。\n\n文件方式实现服务发现，其特点显而易见：\n\n* 优点：\n实现简单，去中心化\n\n* 缺点：\n需要服务消费者去定时操作，如果某一个文件推送失败，那么就会造成异常现象\n\n> SOME/IP 就是通过文件的方式实现.\n\n#### 其他第三方实现:\n\n* zookeeper\n* redis\n* etcd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"service-discovery","published":1,"updated":"2021-12-26T09:53:24.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtvg000cz59yegju8mfu","content":"<h1 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h1><h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><ul>\n<li><p>Register, 服务启动时候进行注册</p>\n</li>\n<li><p>Query, 查询已注册服务信息</p>\n</li>\n<li><p>Healthy Check,确认服务状态是否健康</p>\n</li>\n</ul>\n<p>整个过程很简单。大致就是在服务启动的时候，先去进行注册，并且定时反馈本身功能是否正常。由服务发现机制统一负责维护一份正确或者可用的服务清单。因此，服务本身需要能随时接受查下，反馈调用方服务所要的信息。</p>\n<h2 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h2><p>一整套服务发现机制顺利运行，需要维护一份可用的服务列表。包含服务注册与移除功能，以及健康检查。</p>\n<p>常见的注册模式</p>\n<h3 id=\"自主注册\"><a href=\"#自主注册\" class=\"headerlink\" title=\"自主注册\"></a>自主注册</h3><p>自主注册模式，由服务(client)本身来维护。<br>每个服务启动后，需要到统一的服务注册中心进行注册登记，服务正常终止后，也可以到注册中心移除自身的注册记录。<br>在服务执行过程中，通过不断的发送心跳信息，来通知注册中心，本服务运行正常。注册中心只要超过一定的时间没有收到心跳消息，<br>就可以将这个服务状态判断为异常，进而移除该服务的注册记录。</p>\n<h3 id=\"第三方注册\"><a href=\"#第三方注册\" class=\"headerlink\" title=\"第三方注册\"></a>第三方注册</h3><p>这个模式与自主注册相比，区别是健康检查的动作不是由服务本身(client)来负责，而是由第三方服务来确认。<br>因为有时候服务自身发送心跳信息的方式并不精确，因为可能服务本身已经存在故障，某些接口功能不可用，<br>但仍然可以不断的发送心跳信息，导致注册中心没有发觉该服务已经异常，从而源源不断的将流量打到已经异常的服务上来。<br>所以, 确认服务是否正常运转的健康检查机制，就不能只依靠心跳，必须通过其它第三方的验证，不断的从外部来确认服务本身的健康状态。</p>\n<p>在实际应用中, 需要根据需求合理搭配服务, 和管理机制.</p>\n<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a>发现</h2><p>发现机制主要包括三种：</p>\n<ul>\n<li><p>服务提供者：<br>服务启动时将服务信息注册到注册中心，服务退出时将注册中心的服务信息删除掉。</p>\n</li>\n<li><p>服务消费者：<br>从服务注册表获取服务提供者的最新网络位置等服务信息，维护与服务提供者之间的通信。</p>\n</li>\n<li><p>注册中心：<br>服务提供者和服务消费者之间的一个桥梁</p>\n</li>\n</ul>\n<p>服务发现机制的关键部分是注册中心。注册中心提供管理和查询服务注册信息的API。<br>当服务提供者的实例发生变更时（新增/删除服务），服务注册表更新最新的状态列表，并将其最新列表以适当的方式通知给服务消费者。</p>\n<h3 id=\"常用的发现模式\"><a href=\"#常用的发现模式\" class=\"headerlink\" title=\"常用的发现模式\"></a>常用的发现模式</h3><h4 id=\"客户端发现模式\"><a href=\"#客户端发现模式\" class=\"headerlink\" title=\"客户端发现模式\"></a>客户端发现模式</h4><p>首先要进行的是到服务注册中心获取服务列表，然后再根据调用端本地的负载均衡策略，进行服务调用:</p>\n<ul>\n<li><p>1.服务提供者向注册中心进行注册，提交自己的相关信息 (register)</p>\n</li>\n<li><p>2.服务消费者定期从注册中心获取服务提供者列表 (keep alive)</p>\n</li>\n<li><p>3.服务消费者通过自身的负载均衡算法，在服务提供者列表里面选择一个合适的服务提供者，进行访问</p>\n</li>\n</ul>\n<h4 id=\"服务端发现模式。\"><a href=\"#服务端发现模式。\" class=\"headerlink\" title=\"服务端发现模式。\"></a>服务端发现模式。</h4><ul>\n<li>1 服务提供者向注册中心进行服务注册 </li>\n<li>2 注册中心提供负载均衡功能， </li>\n<li>3 服务消费者去请求注册中心，由注册中心根据服务提供列表的健康情况，选择合适的服务提供者供服务消费者调用</li>\n</ul>\n<blockquote>\n<p>本质区别在于，客户端是否保存服务列表信息</p>\n</blockquote>\n<h3 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h3><h4 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file\"></a>file</h4><p>以文件的形式实现服务发现，这是一个比较简单的方案。<br>其基本原理就是将服务提供者的信息(ip:port)写入文件中，服务消费者加载该文件，<br>获取服务提供者的信息，根据一定的策略，进行访问。</p>\n<p>需要注意的是，因为以文件形式提供服务发现，服务消费者要定期的去访问该文件，<br>以获得最新的服务提供者列表，这里有个小优化点，就是可以有个线程定时去做该任务，<br>首先去用该文件的最后一次修改时间跟服务上一次读取文件时候存储的修改时间做对比，<br>如果时间一致，表明文件未做修改，那么就不需要重新做加载了，反之，重新加载文件。</p>\n<p>文件方式实现服务发现，其特点显而易见：</p>\n<ul>\n<li><p>优点：<br>实现简单，去中心化</p>\n</li>\n<li><p>缺点：<br>需要服务消费者去定时操作，如果某一个文件推送失败，那么就会造成异常现象</p>\n</li>\n</ul>\n<blockquote>\n<p>SOME/IP 就是通过文件的方式实现.</p>\n</blockquote>\n<h4 id=\"其他第三方实现\"><a href=\"#其他第三方实现\" class=\"headerlink\" title=\"其他第三方实现:\"></a>其他第三方实现:</h4><ul>\n<li>zookeeper</li>\n<li>redis</li>\n<li>etcd</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h1><h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><ul>\n<li><p>Register, 服务启动时候进行注册</p>\n</li>\n<li><p>Query, 查询已注册服务信息</p>\n</li>\n<li><p>Healthy Check,确认服务状态是否健康</p>\n</li>\n</ul>\n<p>整个过程很简单。大致就是在服务启动的时候，先去进行注册，并且定时反馈本身功能是否正常。由服务发现机制统一负责维护一份正确或者可用的服务清单。因此，服务本身需要能随时接受查下，反馈调用方服务所要的信息。</p>\n<h2 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h2><p>一整套服务发现机制顺利运行，需要维护一份可用的服务列表。包含服务注册与移除功能，以及健康检查。</p>\n<p>常见的注册模式</p>\n<h3 id=\"自主注册\"><a href=\"#自主注册\" class=\"headerlink\" title=\"自主注册\"></a>自主注册</h3><p>自主注册模式，由服务(client)本身来维护。<br>每个服务启动后，需要到统一的服务注册中心进行注册登记，服务正常终止后，也可以到注册中心移除自身的注册记录。<br>在服务执行过程中，通过不断的发送心跳信息，来通知注册中心，本服务运行正常。注册中心只要超过一定的时间没有收到心跳消息，<br>就可以将这个服务状态判断为异常，进而移除该服务的注册记录。</p>\n<h3 id=\"第三方注册\"><a href=\"#第三方注册\" class=\"headerlink\" title=\"第三方注册\"></a>第三方注册</h3><p>这个模式与自主注册相比，区别是健康检查的动作不是由服务本身(client)来负责，而是由第三方服务来确认。<br>因为有时候服务自身发送心跳信息的方式并不精确，因为可能服务本身已经存在故障，某些接口功能不可用，<br>但仍然可以不断的发送心跳信息，导致注册中心没有发觉该服务已经异常，从而源源不断的将流量打到已经异常的服务上来。<br>所以, 确认服务是否正常运转的健康检查机制，就不能只依靠心跳，必须通过其它第三方的验证，不断的从外部来确认服务本身的健康状态。</p>\n<p>在实际应用中, 需要根据需求合理搭配服务, 和管理机制.</p>\n<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a>发现</h2><p>发现机制主要包括三种：</p>\n<ul>\n<li><p>服务提供者：<br>服务启动时将服务信息注册到注册中心，服务退出时将注册中心的服务信息删除掉。</p>\n</li>\n<li><p>服务消费者：<br>从服务注册表获取服务提供者的最新网络位置等服务信息，维护与服务提供者之间的通信。</p>\n</li>\n<li><p>注册中心：<br>服务提供者和服务消费者之间的一个桥梁</p>\n</li>\n</ul>\n<p>服务发现机制的关键部分是注册中心。注册中心提供管理和查询服务注册信息的API。<br>当服务提供者的实例发生变更时（新增/删除服务），服务注册表更新最新的状态列表，并将其最新列表以适当的方式通知给服务消费者。</p>\n<h3 id=\"常用的发现模式\"><a href=\"#常用的发现模式\" class=\"headerlink\" title=\"常用的发现模式\"></a>常用的发现模式</h3><h4 id=\"客户端发现模式\"><a href=\"#客户端发现模式\" class=\"headerlink\" title=\"客户端发现模式\"></a>客户端发现模式</h4><p>首先要进行的是到服务注册中心获取服务列表，然后再根据调用端本地的负载均衡策略，进行服务调用:</p>\n<ul>\n<li><p>1.服务提供者向注册中心进行注册，提交自己的相关信息 (register)</p>\n</li>\n<li><p>2.服务消费者定期从注册中心获取服务提供者列表 (keep alive)</p>\n</li>\n<li><p>3.服务消费者通过自身的负载均衡算法，在服务提供者列表里面选择一个合适的服务提供者，进行访问</p>\n</li>\n</ul>\n<h4 id=\"服务端发现模式。\"><a href=\"#服务端发现模式。\" class=\"headerlink\" title=\"服务端发现模式。\"></a>服务端发现模式。</h4><ul>\n<li>1 服务提供者向注册中心进行服务注册 </li>\n<li>2 注册中心提供负载均衡功能， </li>\n<li>3 服务消费者去请求注册中心，由注册中心根据服务提供列表的健康情况，选择合适的服务提供者供服务消费者调用</li>\n</ul>\n<blockquote>\n<p>本质区别在于，客户端是否保存服务列表信息</p>\n</blockquote>\n<h3 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h3><h4 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file\"></a>file</h4><p>以文件的形式实现服务发现，这是一个比较简单的方案。<br>其基本原理就是将服务提供者的信息(ip:port)写入文件中，服务消费者加载该文件，<br>获取服务提供者的信息，根据一定的策略，进行访问。</p>\n<p>需要注意的是，因为以文件形式提供服务发现，服务消费者要定期的去访问该文件，<br>以获得最新的服务提供者列表，这里有个小优化点，就是可以有个线程定时去做该任务，<br>首先去用该文件的最后一次修改时间跟服务上一次读取文件时候存储的修改时间做对比，<br>如果时间一致，表明文件未做修改，那么就不需要重新做加载了，反之，重新加载文件。</p>\n<p>文件方式实现服务发现，其特点显而易见：</p>\n<ul>\n<li><p>优点：<br>实现简单，去中心化</p>\n</li>\n<li><p>缺点：<br>需要服务消费者去定时操作，如果某一个文件推送失败，那么就会造成异常现象</p>\n</li>\n</ul>\n<blockquote>\n<p>SOME/IP 就是通过文件的方式实现.</p>\n</blockquote>\n<h4 id=\"其他第三方实现\"><a href=\"#其他第三方实现\" class=\"headerlink\" title=\"其他第三方实现:\"></a>其他第三方实现:</h4><ul>\n<li>zookeeper</li>\n<li>redis</li>\n<li>etcd</li>\n</ul>\n"},{"title":"someip 00： vsomeip","date":"2021-12-20T09:58:18.000Z","_content":"\n# vSOMEIP 00 :  quick review\n\n* refrence: https://blog.zeerd.com/vsomeip-1st/\n\n## Introduction\nvsomeip 是GENIVI项目中的一个SOME/IP开源实现，基于Mozilla Public Liense v2.0协议开源，由BMW贡献。\n\nvsomeip提供了两个动态库：\n* SOME/IP协议的实现库libvsomeip.so\n* 用于服务发现的库libvsomeip-sd.so。\n\nvsomeip除了支持设备之间的SOME/IP通讯，也支持设备本地的进程间通讯，本地通讯通过unix socket完成。\nvsomeip的实现基于boost.asio的异步IO库。\nvsomeip应用通过一个Routing Manager与其他设备进行通讯: Routing Manager统一负责服务发现以及外部通讯socket的管理。\n一个设备上的多个vsomeip应用共用一个Routing Manager，默认第一个启动的vsomeip应用负责启动Routing Manager，\n也可以通过配置指定，其他应用通过proxy与Routing Manage进行通讯。\n\nvsomeip应用可以通过json文件来进行配置，配置项包含自身IP，应用名字，负责启动Routing Manager的应用，应用日志，服务发现的广播地址，广播间隔等。\n\n\n## Code Block\n\nvSomeIP的代码主要分成如下四大部分\n\n* daemon\n\n* implementation\n\n* interface\n    - runtime\n    - application\n    - messgae\n    - payload\n\n* tool & examples\n\n### Interface\n\n#### Runtime\n这个类用于管理（主要是创建）其他所有公共资源和获取runtime属性。公共资源包括:\n\n- application\n- message\n- request\n- reponse\n- notification\n- payload\n\n#### Application\n这是最核心的一个部分。它在每个客户端都存在且仅存在一份。\nApplication可以通过Runtime的接口来实例化。\n管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。\n\n##### Plugin\n\nvSomeIP允许Application加载一到多个Plugin。\n当Application的状态发生变化时，这个变化会被通知到Plugin。\n在通知的时候会附带Application的名称。用于Plugin进行区别对待。\n\nApplication的状态有三种，分别为：\n* Initialized\n* Started\n* Stopped\n\n#### Message\n无论是Request、Response还是Notification，本质上都是一种Message。\n\n从某种意义上来说，Message可以去分成两类，分别是通用Message和服务发现相关的Message。\n\nMessage类提供了编串和解串功能，用于进行数据通讯，本质上他封装了SOME/IP的消息头。\n所以，它还提供了一些列方法来设置或者读取详细的消息头信息。\n这一点可以参考SOME/IP的 协议 文档。\n\n#### Payload\n\nMessage的主体。也就是排除消息头之后剩下的部分。\n\n\n## Implementation\n针对Interface的实装。 \n\n### Endpoints\n每个具有vSomeIP功能的进程都是一个Endpoint。\nEndpoint分成分成六大类：\n\n- local-client\n- udp-client\n- tcp-client\n- local-server\n- udp-server\n- tcp-server\n\n\n### Service Discovery\n\n#### init\n\n```mermaid\ngraph TD;\n    service_discovery_impl == init -.- \n    parse_confguration -.->\n    service_discovery_imple;\n\n```\n\n#### start\n```mermaid\ngraph TD;\n\nservice_discovery_impl\n == start \n -.-> create_service_discovery_endpoint \n -.-> create_server_endpoint \n == join_sd_multicast\n--> endpoint\n\n```\n\n### Routing\n\n每个系统中只能有一个vSomeIP服务被配置成Routing。\n\n如果没有特别的设定，那么系统中被运行的第一个具备vSomeIP功能的程序会被作为Routing Manager。\n\n\n#### Init\n\n![](../imgs/vsomeip_source_routing_init.png)\n\n#### Start\n![](../imgs/vsomeip_source_routing_start.png)\n\n\n\n## Daemon\n\ndaemon的主体就是一个vsomeip::application\n\n![](../imgs/vsomeip_source_daemon.png)\n\n\nApplication创建了一个routing_manager_impl的实例。\n如果这不是Daemon，而是一个通常的Application，那么他会转而创建routing_manager_proxy的实例，并与找到的Routing Manager建立连接。\n\n\n\n## Tools & Examples\n\n一些简易的Application。用于进行一些消息发送接收的测试工作。\n","source":"_posts/someip-00：-vsomeip.md","raw":"---\ntitle: someip 00： vsomeip\ndate: 2021-12-20 17:58:18\ntags:\n    - someip\n    - vSOMEIP\n---\n\n# vSOMEIP 00 :  quick review\n\n* refrence: https://blog.zeerd.com/vsomeip-1st/\n\n## Introduction\nvsomeip 是GENIVI项目中的一个SOME/IP开源实现，基于Mozilla Public Liense v2.0协议开源，由BMW贡献。\n\nvsomeip提供了两个动态库：\n* SOME/IP协议的实现库libvsomeip.so\n* 用于服务发现的库libvsomeip-sd.so。\n\nvsomeip除了支持设备之间的SOME/IP通讯，也支持设备本地的进程间通讯，本地通讯通过unix socket完成。\nvsomeip的实现基于boost.asio的异步IO库。\nvsomeip应用通过一个Routing Manager与其他设备进行通讯: Routing Manager统一负责服务发现以及外部通讯socket的管理。\n一个设备上的多个vsomeip应用共用一个Routing Manager，默认第一个启动的vsomeip应用负责启动Routing Manager，\n也可以通过配置指定，其他应用通过proxy与Routing Manage进行通讯。\n\nvsomeip应用可以通过json文件来进行配置，配置项包含自身IP，应用名字，负责启动Routing Manager的应用，应用日志，服务发现的广播地址，广播间隔等。\n\n\n## Code Block\n\nvSomeIP的代码主要分成如下四大部分\n\n* daemon\n\n* implementation\n\n* interface\n    - runtime\n    - application\n    - messgae\n    - payload\n\n* tool & examples\n\n### Interface\n\n#### Runtime\n这个类用于管理（主要是创建）其他所有公共资源和获取runtime属性。公共资源包括:\n\n- application\n- message\n- request\n- reponse\n- notification\n- payload\n\n#### Application\n这是最核心的一个部分。它在每个客户端都存在且仅存在一份。\nApplication可以通过Runtime的接口来实例化。\n管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。\n\n##### Plugin\n\nvSomeIP允许Application加载一到多个Plugin。\n当Application的状态发生变化时，这个变化会被通知到Plugin。\n在通知的时候会附带Application的名称。用于Plugin进行区别对待。\n\nApplication的状态有三种，分别为：\n* Initialized\n* Started\n* Stopped\n\n#### Message\n无论是Request、Response还是Notification，本质上都是一种Message。\n\n从某种意义上来说，Message可以去分成两类，分别是通用Message和服务发现相关的Message。\n\nMessage类提供了编串和解串功能，用于进行数据通讯，本质上他封装了SOME/IP的消息头。\n所以，它还提供了一些列方法来设置或者读取详细的消息头信息。\n这一点可以参考SOME/IP的 协议 文档。\n\n#### Payload\n\nMessage的主体。也就是排除消息头之后剩下的部分。\n\n\n## Implementation\n针对Interface的实装。 \n\n### Endpoints\n每个具有vSomeIP功能的进程都是一个Endpoint。\nEndpoint分成分成六大类：\n\n- local-client\n- udp-client\n- tcp-client\n- local-server\n- udp-server\n- tcp-server\n\n\n### Service Discovery\n\n#### init\n\n```mermaid\ngraph TD;\n    service_discovery_impl == init -.- \n    parse_confguration -.->\n    service_discovery_imple;\n\n```\n\n#### start\n```mermaid\ngraph TD;\n\nservice_discovery_impl\n == start \n -.-> create_service_discovery_endpoint \n -.-> create_server_endpoint \n == join_sd_multicast\n--> endpoint\n\n```\n\n### Routing\n\n每个系统中只能有一个vSomeIP服务被配置成Routing。\n\n如果没有特别的设定，那么系统中被运行的第一个具备vSomeIP功能的程序会被作为Routing Manager。\n\n\n#### Init\n\n![](../imgs/vsomeip_source_routing_init.png)\n\n#### Start\n![](../imgs/vsomeip_source_routing_start.png)\n\n\n\n## Daemon\n\ndaemon的主体就是一个vsomeip::application\n\n![](../imgs/vsomeip_source_daemon.png)\n\n\nApplication创建了一个routing_manager_impl的实例。\n如果这不是Daemon，而是一个通常的Application，那么他会转而创建routing_manager_proxy的实例，并与找到的Routing Manager建立连接。\n\n\n\n## Tools & Examples\n\n一些简易的Application。用于进行一些消息发送接收的测试工作。\n","slug":"someip-00：-vsomeip","published":1,"updated":"2021-12-26T10:04:57.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtvi000ez59yd3cxgd51","content":"<h1 id=\"vSOMEIP-00-quick-review\"><a href=\"#vSOMEIP-00-quick-review\" class=\"headerlink\" title=\"vSOMEIP 00 :  quick review\"></a>vSOMEIP 00 :  quick review</h1><ul>\n<li>refrence: <a href=\"https://blog.zeerd.com/vsomeip-1st/\">https://blog.zeerd.com/vsomeip-1st/</a></li>\n</ul>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>vsomeip 是GENIVI项目中的一个SOME/IP开源实现，基于Mozilla Public Liense v2.0协议开源，由BMW贡献。</p>\n<p>vsomeip提供了两个动态库：</p>\n<ul>\n<li>SOME/IP协议的实现库libvsomeip.so</li>\n<li>用于服务发现的库libvsomeip-sd.so。</li>\n</ul>\n<p>vsomeip除了支持设备之间的SOME/IP通讯，也支持设备本地的进程间通讯，本地通讯通过unix socket完成。<br>vsomeip的实现基于boost.asio的异步IO库。<br>vsomeip应用通过一个Routing Manager与其他设备进行通讯: Routing Manager统一负责服务发现以及外部通讯socket的管理。<br>一个设备上的多个vsomeip应用共用一个Routing Manager，默认第一个启动的vsomeip应用负责启动Routing Manager，<br>也可以通过配置指定，其他应用通过proxy与Routing Manage进行通讯。</p>\n<p>vsomeip应用可以通过json文件来进行配置，配置项包含自身IP，应用名字，负责启动Routing Manager的应用，应用日志，服务发现的广播地址，广播间隔等。</p>\n<h2 id=\"Code-Block\"><a href=\"#Code-Block\" class=\"headerlink\" title=\"Code Block\"></a>Code Block</h2><p>vSomeIP的代码主要分成如下四大部分</p>\n<ul>\n<li><p>daemon</p>\n</li>\n<li><p>implementation</p>\n</li>\n<li><p>interface</p>\n<ul>\n<li>runtime</li>\n<li>application</li>\n<li>messgae</li>\n<li>payload</li>\n</ul>\n</li>\n<li><p>tool &amp; examples</p>\n</li>\n</ul>\n<h3 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h3><h4 id=\"Runtime\"><a href=\"#Runtime\" class=\"headerlink\" title=\"Runtime\"></a>Runtime</h4><p>这个类用于管理（主要是创建）其他所有公共资源和获取runtime属性。公共资源包括:</p>\n<ul>\n<li>application</li>\n<li>message</li>\n<li>request</li>\n<li>reponse</li>\n<li>notification</li>\n<li>payload</li>\n</ul>\n<h4 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h4><p>这是最核心的一个部分。它在每个客户端都存在且仅存在一份。<br>Application可以通过Runtime的接口来实例化。<br>管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。</p>\n<h5 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h5><p>vSomeIP允许Application加载一到多个Plugin。<br>当Application的状态发生变化时，这个变化会被通知到Plugin。<br>在通知的时候会附带Application的名称。用于Plugin进行区别对待。</p>\n<p>Application的状态有三种，分别为：</p>\n<ul>\n<li>Initialized</li>\n<li>Started</li>\n<li>Stopped</li>\n</ul>\n<h4 id=\"Message\"><a href=\"#Message\" class=\"headerlink\" title=\"Message\"></a>Message</h4><p>无论是Request、Response还是Notification，本质上都是一种Message。</p>\n<p>从某种意义上来说，Message可以去分成两类，分别是通用Message和服务发现相关的Message。</p>\n<p>Message类提供了编串和解串功能，用于进行数据通讯，本质上他封装了SOME/IP的消息头。<br>所以，它还提供了一些列方法来设置或者读取详细的消息头信息。<br>这一点可以参考SOME/IP的 协议 文档。</p>\n<h4 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload\"></a>Payload</h4><p>Message的主体。也就是排除消息头之后剩下的部分。</p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><p>针对Interface的实装。 </p>\n<h3 id=\"Endpoints\"><a href=\"#Endpoints\" class=\"headerlink\" title=\"Endpoints\"></a>Endpoints</h3><p>每个具有vSomeIP功能的进程都是一个Endpoint。<br>Endpoint分成分成六大类：</p>\n<ul>\n<li>local-client</li>\n<li>udp-client</li>\n<li>tcp-client</li>\n<li>local-server</li>\n<li>udp-server</li>\n<li>tcp-server</li>\n</ul>\n<h3 id=\"Service-Discovery\"><a href=\"#Service-Discovery\" class=\"headerlink\" title=\"Service Discovery\"></a>Service Discovery</h3><h4 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    service_discovery_impl == init -.- </span><br><span class=\"line\">    parse_confguration -.-&gt;</span><br><span class=\"line\">    service_discovery_imple;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"start\"></a>start</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\"></span><br><span class=\"line\">service_discovery_impl</span><br><span class=\"line\"> == start </span><br><span class=\"line\"> -.-&gt; create_service_discovery_endpoint </span><br><span class=\"line\"> -.-&gt; create_server_endpoint </span><br><span class=\"line\"> == join_sd_multicast</span><br><span class=\"line\">--&gt; endpoint</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h3><p>每个系统中只能有一个vSomeIP服务被配置成Routing。</p>\n<p>如果没有特别的设定，那么系统中被运行的第一个具备vSomeIP功能的程序会被作为Routing Manager。</p>\n<h4 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init\"></a>Init</h4><p><img src=\"../imgs/vsomeip_source_routing_init.png\"></p>\n<h4 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h4><p><img src=\"../imgs/vsomeip_source_routing_start.png\"></p>\n<h2 id=\"Daemon\"><a href=\"#Daemon\" class=\"headerlink\" title=\"Daemon\"></a>Daemon</h2><p>daemon的主体就是一个vsomeip::application</p>\n<p><img src=\"../imgs/vsomeip_source_daemon.png\"></p>\n<p>Application创建了一个routing_manager_impl的实例。<br>如果这不是Daemon，而是一个通常的Application，那么他会转而创建routing_manager_proxy的实例，并与找到的Routing Manager建立连接。</p>\n<h2 id=\"Tools-amp-Examples\"><a href=\"#Tools-amp-Examples\" class=\"headerlink\" title=\"Tools &amp; Examples\"></a>Tools &amp; Examples</h2><p>一些简易的Application。用于进行一些消息发送接收的测试工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vSOMEIP-00-quick-review\"><a href=\"#vSOMEIP-00-quick-review\" class=\"headerlink\" title=\"vSOMEIP 00 :  quick review\"></a>vSOMEIP 00 :  quick review</h1><ul>\n<li>refrence: <a href=\"https://blog.zeerd.com/vsomeip-1st/\">https://blog.zeerd.com/vsomeip-1st/</a></li>\n</ul>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>vsomeip 是GENIVI项目中的一个SOME/IP开源实现，基于Mozilla Public Liense v2.0协议开源，由BMW贡献。</p>\n<p>vsomeip提供了两个动态库：</p>\n<ul>\n<li>SOME/IP协议的实现库libvsomeip.so</li>\n<li>用于服务发现的库libvsomeip-sd.so。</li>\n</ul>\n<p>vsomeip除了支持设备之间的SOME/IP通讯，也支持设备本地的进程间通讯，本地通讯通过unix socket完成。<br>vsomeip的实现基于boost.asio的异步IO库。<br>vsomeip应用通过一个Routing Manager与其他设备进行通讯: Routing Manager统一负责服务发现以及外部通讯socket的管理。<br>一个设备上的多个vsomeip应用共用一个Routing Manager，默认第一个启动的vsomeip应用负责启动Routing Manager，<br>也可以通过配置指定，其他应用通过proxy与Routing Manage进行通讯。</p>\n<p>vsomeip应用可以通过json文件来进行配置，配置项包含自身IP，应用名字，负责启动Routing Manager的应用，应用日志，服务发现的广播地址，广播间隔等。</p>\n<h2 id=\"Code-Block\"><a href=\"#Code-Block\" class=\"headerlink\" title=\"Code Block\"></a>Code Block</h2><p>vSomeIP的代码主要分成如下四大部分</p>\n<ul>\n<li><p>daemon</p>\n</li>\n<li><p>implementation</p>\n</li>\n<li><p>interface</p>\n<ul>\n<li>runtime</li>\n<li>application</li>\n<li>messgae</li>\n<li>payload</li>\n</ul>\n</li>\n<li><p>tool &amp; examples</p>\n</li>\n</ul>\n<h3 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h3><h4 id=\"Runtime\"><a href=\"#Runtime\" class=\"headerlink\" title=\"Runtime\"></a>Runtime</h4><p>这个类用于管理（主要是创建）其他所有公共资源和获取runtime属性。公共资源包括:</p>\n<ul>\n<li>application</li>\n<li>message</li>\n<li>request</li>\n<li>reponse</li>\n<li>notification</li>\n<li>payload</li>\n</ul>\n<h4 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h4><p>这是最核心的一个部分。它在每个客户端都存在且仅存在一份。<br>Application可以通过Runtime的接口来实例化。<br>管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。</p>\n<h5 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h5><p>vSomeIP允许Application加载一到多个Plugin。<br>当Application的状态发生变化时，这个变化会被通知到Plugin。<br>在通知的时候会附带Application的名称。用于Plugin进行区别对待。</p>\n<p>Application的状态有三种，分别为：</p>\n<ul>\n<li>Initialized</li>\n<li>Started</li>\n<li>Stopped</li>\n</ul>\n<h4 id=\"Message\"><a href=\"#Message\" class=\"headerlink\" title=\"Message\"></a>Message</h4><p>无论是Request、Response还是Notification，本质上都是一种Message。</p>\n<p>从某种意义上来说，Message可以去分成两类，分别是通用Message和服务发现相关的Message。</p>\n<p>Message类提供了编串和解串功能，用于进行数据通讯，本质上他封装了SOME/IP的消息头。<br>所以，它还提供了一些列方法来设置或者读取详细的消息头信息。<br>这一点可以参考SOME/IP的 协议 文档。</p>\n<h4 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload\"></a>Payload</h4><p>Message的主体。也就是排除消息头之后剩下的部分。</p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><p>针对Interface的实装。 </p>\n<h3 id=\"Endpoints\"><a href=\"#Endpoints\" class=\"headerlink\" title=\"Endpoints\"></a>Endpoints</h3><p>每个具有vSomeIP功能的进程都是一个Endpoint。<br>Endpoint分成分成六大类：</p>\n<ul>\n<li>local-client</li>\n<li>udp-client</li>\n<li>tcp-client</li>\n<li>local-server</li>\n<li>udp-server</li>\n<li>tcp-server</li>\n</ul>\n<h3 id=\"Service-Discovery\"><a href=\"#Service-Discovery\" class=\"headerlink\" title=\"Service Discovery\"></a>Service Discovery</h3><h4 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    service_discovery_impl == init -.- </span><br><span class=\"line\">    parse_confguration -.-&gt;</span><br><span class=\"line\">    service_discovery_imple;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"start\"></a>start</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\"></span><br><span class=\"line\">service_discovery_impl</span><br><span class=\"line\"> == start </span><br><span class=\"line\"> -.-&gt; create_service_discovery_endpoint </span><br><span class=\"line\"> -.-&gt; create_server_endpoint </span><br><span class=\"line\"> == join_sd_multicast</span><br><span class=\"line\">--&gt; endpoint</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h3><p>每个系统中只能有一个vSomeIP服务被配置成Routing。</p>\n<p>如果没有特别的设定，那么系统中被运行的第一个具备vSomeIP功能的程序会被作为Routing Manager。</p>\n<h4 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init\"></a>Init</h4><p><img src=\"../imgs/vsomeip_source_routing_init.png\"></p>\n<h4 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h4><p><img src=\"../imgs/vsomeip_source_routing_start.png\"></p>\n<h2 id=\"Daemon\"><a href=\"#Daemon\" class=\"headerlink\" title=\"Daemon\"></a>Daemon</h2><p>daemon的主体就是一个vsomeip::application</p>\n<p><img src=\"../imgs/vsomeip_source_daemon.png\"></p>\n<p>Application创建了一个routing_manager_impl的实例。<br>如果这不是Daemon，而是一个通常的Application，那么他会转而创建routing_manager_proxy的实例，并与找到的Routing Manager建立连接。</p>\n<h2 id=\"Tools-amp-Examples\"><a href=\"#Tools-amp-Examples\" class=\"headerlink\" title=\"Tools &amp; Examples\"></a>Tools &amp; Examples</h2><p>一些简易的Application。用于进行一些消息发送接收的测试工作。</p>\n"},{"title":"someip-01: code","date":"2021-12-21T10:07:15.000Z","_content":"\n# vSOMEIP 01:  source code\n\nsource code reading\n\n## Start from CMakeLists.txt\n\n### Dependencies\n\n* C++11, gcc > 5.2\n* Boost > 1.55\n\n### Configuration\n\n#### DCMAKE_INSTALL_PREFIX\n安装位置\n```bash\ncmake -DCMAKE_INSTALL_PREFIX:PATH=$YOUR_PATH ..\n```\n\n#### DBASE_PATH\n创建local sockets 位置, 默认为 `/tmp/vsomeip*`\n\n```bash\ncmake -DBASE_PATH=<YOUR BASE PATH> ..\n```\n\n#### DUNICAST_ADDRESS\n组播 address\n\n```bash\ncmake -DUNICAST_ADDRESS=<YOUR IP ADDRESS> ..\n```\n\n\n#### DDIAGNOSIS_ADDRESS\n诊断 address\n\n默认为`0x01`\n\n```bash\ncmake -DDIAGNOSIS_ADDRESS=<YOUR DIAGNOSIS ADDRESS> ..\n```\n\n#### DDEFAULT_CONFIGURATION_FOLDER\n配置文件目录\n\n```bash\ncmake -DDEFAULT_CONFIGURATION_FOLDER=<DEFAULT CONFIGURATION FOLDER> ..\n```\n\n默认为 `/etc/vsomeip`\n\n#### DDEFAULT_CONFIGURATION_FILE\n\n```bash\ncmake -DDEFAULT_CONFIGURATION_FILE=<DEFAULT CONFIGURATION FILE> ..\n```\n\n默认为 `/etc/vsomeip.json`\n\n#### DENABLE_SIGNAL_HANDLING\n\n开启 signal handling\n\n```bash\ncmake -DENABLE_SIGNAL_HANDLING=1 ..\n```\n\n#### DROUTING_READY_MESSAGE\n\n自定义 完成 ip routing 后的通知消息\n\n```bash\ncmake -DROUTING_READY_MESSAGE=<YOUR MESSAGE> ..\n```\n\n#### VSOMEIP_APPLICATION_NAME\n\n通过环境变量 定义启动的程序名字\n\n```bash\nexport VSOMEIP_APPLICATION_NAME=my_vsomeip_client \\\nexport VSOMEIP_CONFIGURATION=my_settings.json \\\n./my_vsomeip_application\n```\n\n\n#### json 配置\n\n* unicast\n\n    The IP address of the host system.\n\n* netmask\n\n    The netmask to specify the subnet of the host system.\n\n* device\n\n    If specified, IP endpoints will be bound to this device.\n\n\n* diagnosis\n\n    The diagnosis address (byte) that will be used to build client identifiers. The\n    diagnosis address is assigned to the most significant byte in all client\n    identifiers if not specified otherwise (for example through a predefined client\n    ID).\n\n* diagnosis_mask\n\n    The diagnosis mask (2 byte) is used to control the maximum amount of allowed\n    concurrent vsomeip clients on an ECU and the start value of the client IDs.\n\n    The default value is `0xFF00` meaning the most significant byte of the client ID \n    is reserved for the diagnosis address and \n    the client IDs will start with the diagnosis address as specified.\n\n    The maximum number of clients is 255 as the Hamming weight of the inverted mask\n    is 8 (2^8 = 256 - 1 (for the routing manager) = 255). The resulting client ID\n    range with a diagnosis address of for example 0x45 would be 0x4501 to 0x45ff.\n\n* network\n\n    Network identifier used to support multiple routing managers on one host. This\n    setting changes the name of the shared memory segment in `/dev/shm` and the name\n    of the unix domain sockets in `/tmp/`. Defaults to `vsomeip` meaning the shared\n    memory will be named `/dev/shm/vsomeip` and the unix domain sockets will be\n    named `/tmp/vsomeip-$CLIENTID`\n\n* __logging__\n\n* level\n    - trace\n    - debug\n    - info\n    - warning\n    - error\n    - fatal\n\n    6个等级\n    \n\n\n* console\n    - true\n    - false\n\n    log 输出到console的开启/关闭\n\n* file\n    - enable\n        - true\n        - false\n    - path\n\n    log 输出到console的开启/关闭  \n    path: The absolute path of the log file\n\n* memory_log_interval  \n    Configures interval in seconds in which the routing manager logs its used\n    memory. Setting a value greater than zero enables the logging.\n\n* status_log_interval\n    Configures interval in seconds in which the routing manager logs its internal\n    status.\n    Setting a value greater than zero enables the logging.\n\n\n* __Tracing__\n\n    - enable\n\n    - sd_enable\n\n    - channels\n        - name\n        - id\n\n* __Applications__\n\n    - name\n    - id\n    - max_dispatchers\n    - max_dispatch_time\n    - threads\n    - io_thread_nice\n    - request_debounce_time\n\n\n\n\n\n\n\n\n\n### Source Code Arch\n```bash\n├── config\n├── documentation\n├── examples\n│   ├── hello_world\n│   └── routingmanagerd\n├── implementation ---> 具体的代码实现逻辑\n│   ├── compat     ---> vSOMEIP 兼容\n│   │   ├── message\n│   │   │   ├── include\n│   │   │   └── src\n│   │   └── runtime\n│   │       ├── include\n│   │       └── src\n│   ├── configuration   ---> 配置\n│   │   ├── include\n│   │   └── src\n│   ├── e2e_protection\n│   ├── endpoints       ---> 具有vSOMEIP功能的进程\n│   │   ├── include\n│   │   └── src\n│   ├── helper          ---> boost版本兼容\n│   │   ├── 1.55\n│   │   ├── 1.66\n│   │   ├── 1.70\n│   │   └── 1.74\n│   ├── logger\n│   │   ├── include\n│   │   └── src\n│   ├── message\n│   │   ├── include\n│   │   └── src\n│   ├── plugin\n│   │   ├── include\n│   │   └── src\n│   ├── routing      ---> 每个系统中只能有一个vSomeIP服务被配置成Routing\n│   │   ├── include\n│   │   └── src\n│   ├── runtime       ---> 管理公共资源和获取runtime属性\n│   │   ├── include\n│   │   └── src\n│   ├── security\n│   │   ├── include\n│   │   └── src\n│   ├── service_discovery\n│   │   ├── include\n│   │   └── src\n│   ├── tracing\n│   │   ├── include\n│   │   └── src\n│   └── utility\n│       ├── include\n│       └── src\n├── interface\n│   ├── compat\n│   │   └── vsomeip\n│   │       ├── internal\n│   │       └── plugins\n│   └── vsomeip\n│       ├── internal\n│       └── plugins\n├── test\n└── tools\n```\n\n* Configuration lib\n    - implementation\n        - configuration\n\n* Base (Core) lib\n    - implementation\n        - __endpoingts__\n        - __message__\n        - __routing__\n        - __runtime__\n        - __service_discovery__\n\n\n","source":"_posts/someip-01-code.md","raw":"---\ntitle: 'someip-01: code'\ndate: 2021-12-21 18:07:15\ntags:\n    - someip\n    - vSOMEIP\n---\n\n# vSOMEIP 01:  source code\n\nsource code reading\n\n## Start from CMakeLists.txt\n\n### Dependencies\n\n* C++11, gcc > 5.2\n* Boost > 1.55\n\n### Configuration\n\n#### DCMAKE_INSTALL_PREFIX\n安装位置\n```bash\ncmake -DCMAKE_INSTALL_PREFIX:PATH=$YOUR_PATH ..\n```\n\n#### DBASE_PATH\n创建local sockets 位置, 默认为 `/tmp/vsomeip*`\n\n```bash\ncmake -DBASE_PATH=<YOUR BASE PATH> ..\n```\n\n#### DUNICAST_ADDRESS\n组播 address\n\n```bash\ncmake -DUNICAST_ADDRESS=<YOUR IP ADDRESS> ..\n```\n\n\n#### DDIAGNOSIS_ADDRESS\n诊断 address\n\n默认为`0x01`\n\n```bash\ncmake -DDIAGNOSIS_ADDRESS=<YOUR DIAGNOSIS ADDRESS> ..\n```\n\n#### DDEFAULT_CONFIGURATION_FOLDER\n配置文件目录\n\n```bash\ncmake -DDEFAULT_CONFIGURATION_FOLDER=<DEFAULT CONFIGURATION FOLDER> ..\n```\n\n默认为 `/etc/vsomeip`\n\n#### DDEFAULT_CONFIGURATION_FILE\n\n```bash\ncmake -DDEFAULT_CONFIGURATION_FILE=<DEFAULT CONFIGURATION FILE> ..\n```\n\n默认为 `/etc/vsomeip.json`\n\n#### DENABLE_SIGNAL_HANDLING\n\n开启 signal handling\n\n```bash\ncmake -DENABLE_SIGNAL_HANDLING=1 ..\n```\n\n#### DROUTING_READY_MESSAGE\n\n自定义 完成 ip routing 后的通知消息\n\n```bash\ncmake -DROUTING_READY_MESSAGE=<YOUR MESSAGE> ..\n```\n\n#### VSOMEIP_APPLICATION_NAME\n\n通过环境变量 定义启动的程序名字\n\n```bash\nexport VSOMEIP_APPLICATION_NAME=my_vsomeip_client \\\nexport VSOMEIP_CONFIGURATION=my_settings.json \\\n./my_vsomeip_application\n```\n\n\n#### json 配置\n\n* unicast\n\n    The IP address of the host system.\n\n* netmask\n\n    The netmask to specify the subnet of the host system.\n\n* device\n\n    If specified, IP endpoints will be bound to this device.\n\n\n* diagnosis\n\n    The diagnosis address (byte) that will be used to build client identifiers. The\n    diagnosis address is assigned to the most significant byte in all client\n    identifiers if not specified otherwise (for example through a predefined client\n    ID).\n\n* diagnosis_mask\n\n    The diagnosis mask (2 byte) is used to control the maximum amount of allowed\n    concurrent vsomeip clients on an ECU and the start value of the client IDs.\n\n    The default value is `0xFF00` meaning the most significant byte of the client ID \n    is reserved for the diagnosis address and \n    the client IDs will start with the diagnosis address as specified.\n\n    The maximum number of clients is 255 as the Hamming weight of the inverted mask\n    is 8 (2^8 = 256 - 1 (for the routing manager) = 255). The resulting client ID\n    range with a diagnosis address of for example 0x45 would be 0x4501 to 0x45ff.\n\n* network\n\n    Network identifier used to support multiple routing managers on one host. This\n    setting changes the name of the shared memory segment in `/dev/shm` and the name\n    of the unix domain sockets in `/tmp/`. Defaults to `vsomeip` meaning the shared\n    memory will be named `/dev/shm/vsomeip` and the unix domain sockets will be\n    named `/tmp/vsomeip-$CLIENTID`\n\n* __logging__\n\n* level\n    - trace\n    - debug\n    - info\n    - warning\n    - error\n    - fatal\n\n    6个等级\n    \n\n\n* console\n    - true\n    - false\n\n    log 输出到console的开启/关闭\n\n* file\n    - enable\n        - true\n        - false\n    - path\n\n    log 输出到console的开启/关闭  \n    path: The absolute path of the log file\n\n* memory_log_interval  \n    Configures interval in seconds in which the routing manager logs its used\n    memory. Setting a value greater than zero enables the logging.\n\n* status_log_interval\n    Configures interval in seconds in which the routing manager logs its internal\n    status.\n    Setting a value greater than zero enables the logging.\n\n\n* __Tracing__\n\n    - enable\n\n    - sd_enable\n\n    - channels\n        - name\n        - id\n\n* __Applications__\n\n    - name\n    - id\n    - max_dispatchers\n    - max_dispatch_time\n    - threads\n    - io_thread_nice\n    - request_debounce_time\n\n\n\n\n\n\n\n\n\n### Source Code Arch\n```bash\n├── config\n├── documentation\n├── examples\n│   ├── hello_world\n│   └── routingmanagerd\n├── implementation ---> 具体的代码实现逻辑\n│   ├── compat     ---> vSOMEIP 兼容\n│   │   ├── message\n│   │   │   ├── include\n│   │   │   └── src\n│   │   └── runtime\n│   │       ├── include\n│   │       └── src\n│   ├── configuration   ---> 配置\n│   │   ├── include\n│   │   └── src\n│   ├── e2e_protection\n│   ├── endpoints       ---> 具有vSOMEIP功能的进程\n│   │   ├── include\n│   │   └── src\n│   ├── helper          ---> boost版本兼容\n│   │   ├── 1.55\n│   │   ├── 1.66\n│   │   ├── 1.70\n│   │   └── 1.74\n│   ├── logger\n│   │   ├── include\n│   │   └── src\n│   ├── message\n│   │   ├── include\n│   │   └── src\n│   ├── plugin\n│   │   ├── include\n│   │   └── src\n│   ├── routing      ---> 每个系统中只能有一个vSomeIP服务被配置成Routing\n│   │   ├── include\n│   │   └── src\n│   ├── runtime       ---> 管理公共资源和获取runtime属性\n│   │   ├── include\n│   │   └── src\n│   ├── security\n│   │   ├── include\n│   │   └── src\n│   ├── service_discovery\n│   │   ├── include\n│   │   └── src\n│   ├── tracing\n│   │   ├── include\n│   │   └── src\n│   └── utility\n│       ├── include\n│       └── src\n├── interface\n│   ├── compat\n│   │   └── vsomeip\n│   │       ├── internal\n│   │       └── plugins\n│   └── vsomeip\n│       ├── internal\n│       └── plugins\n├── test\n└── tools\n```\n\n* Configuration lib\n    - implementation\n        - configuration\n\n* Base (Core) lib\n    - implementation\n        - __endpoingts__\n        - __message__\n        - __routing__\n        - __runtime__\n        - __service_discovery__\n\n\n","slug":"someip-01-code","published":1,"updated":"2021-12-26T10:08:54.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtvj000hz59y6atq73pa","content":"<h1 id=\"vSOMEIP-01-source-code\"><a href=\"#vSOMEIP-01-source-code\" class=\"headerlink\" title=\"vSOMEIP 01:  source code\"></a>vSOMEIP 01:  source code</h1><p>source code reading</p>\n<h2 id=\"Start-from-CMakeLists-txt\"><a href=\"#Start-from-CMakeLists-txt\" class=\"headerlink\" title=\"Start from CMakeLists.txt\"></a>Start from CMakeLists.txt</h2><h3 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h3><ul>\n<li>C++11, gcc &gt; 5.2</li>\n<li>Boost &gt; 1.55</li>\n</ul>\n<h3 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h3><h4 id=\"DCMAKE-INSTALL-PREFIX\"><a href=\"#DCMAKE-INSTALL-PREFIX\" class=\"headerlink\" title=\"DCMAKE_INSTALL_PREFIX\"></a>DCMAKE_INSTALL_PREFIX</h4><p>安装位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX:PATH=<span class=\"variable\">$YOUR_PATH</span> ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DBASE-PATH\"><a href=\"#DBASE-PATH\" class=\"headerlink\" title=\"DBASE_PATH\"></a>DBASE_PATH</h4><p>创建local sockets 位置, 默认为 <code>/tmp/vsomeip*</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DBASE_PATH=&lt;YOUR BASE PATH&gt; ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DUNICAST-ADDRESS\"><a href=\"#DUNICAST-ADDRESS\" class=\"headerlink\" title=\"DUNICAST_ADDRESS\"></a>DUNICAST_ADDRESS</h4><p>组播 address</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DUNICAST_ADDRESS=&lt;YOUR IP ADDRESS&gt; ..</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"DDIAGNOSIS-ADDRESS\"><a href=\"#DDIAGNOSIS-ADDRESS\" class=\"headerlink\" title=\"DDIAGNOSIS_ADDRESS\"></a>DDIAGNOSIS_ADDRESS</h4><p>诊断 address</p>\n<p>默认为<code>0x01</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DDIAGNOSIS_ADDRESS=&lt;YOUR DIAGNOSIS ADDRESS&gt; ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DDEFAULT-CONFIGURATION-FOLDER\"><a href=\"#DDEFAULT-CONFIGURATION-FOLDER\" class=\"headerlink\" title=\"DDEFAULT_CONFIGURATION_FOLDER\"></a>DDEFAULT_CONFIGURATION_FOLDER</h4><p>配置文件目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FOLDER=&lt;DEFAULT CONFIGURATION FOLDER&gt; ..</span><br></pre></td></tr></table></figure>\n\n<p>默认为 <code>/etc/vsomeip</code></p>\n<h4 id=\"DDEFAULT-CONFIGURATION-FILE\"><a href=\"#DDEFAULT-CONFIGURATION-FILE\" class=\"headerlink\" title=\"DDEFAULT_CONFIGURATION_FILE\"></a>DDEFAULT_CONFIGURATION_FILE</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FILE=&lt;DEFAULT CONFIGURATION FILE&gt; ..</span><br></pre></td></tr></table></figure>\n\n<p>默认为 <code>/etc/vsomeip.json</code></p>\n<h4 id=\"DENABLE-SIGNAL-HANDLING\"><a href=\"#DENABLE-SIGNAL-HANDLING\" class=\"headerlink\" title=\"DENABLE_SIGNAL_HANDLING\"></a>DENABLE_SIGNAL_HANDLING</h4><p>开启 signal handling</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DENABLE_SIGNAL_HANDLING=1 ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DROUTING-READY-MESSAGE\"><a href=\"#DROUTING-READY-MESSAGE\" class=\"headerlink\" title=\"DROUTING_READY_MESSAGE\"></a>DROUTING_READY_MESSAGE</h4><p>自定义 完成 ip routing 后的通知消息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DROUTING_READY_MESSAGE=&lt;YOUR MESSAGE&gt; ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"VSOMEIP-APPLICATION-NAME\"><a href=\"#VSOMEIP-APPLICATION-NAME\" class=\"headerlink\" title=\"VSOMEIP_APPLICATION_NAME\"></a>VSOMEIP_APPLICATION_NAME</h4><p>通过环境变量 定义启动的程序名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> VSOMEIP_APPLICATION_NAME=my_vsomeip_client \\</span><br><span class=\"line\"><span class=\"built_in\">export</span> VSOMEIP_CONFIGURATION=my_settings.json \\</span><br><span class=\"line\">./my_vsomeip_application</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"json-配置\"><a href=\"#json-配置\" class=\"headerlink\" title=\"json 配置\"></a>json 配置</h4><ul>\n<li><p>unicast</p>\n<p>  The IP address of the host system.</p>\n</li>\n<li><p>netmask</p>\n<p>  The netmask to specify the subnet of the host system.</p>\n</li>\n<li><p>device</p>\n<p>  If specified, IP endpoints will be bound to this device.</p>\n</li>\n</ul>\n<ul>\n<li><p>diagnosis</p>\n<p>  The diagnosis address (byte) that will be used to build client identifiers. The<br>  diagnosis address is assigned to the most significant byte in all client<br>  identifiers if not specified otherwise (for example through a predefined client<br>  ID).</p>\n</li>\n<li><p>diagnosis_mask</p>\n<p>  The diagnosis mask (2 byte) is used to control the maximum amount of allowed<br>  concurrent vsomeip clients on an ECU and the start value of the client IDs.</p>\n<p>  The default value is <code>0xFF00</code> meaning the most significant byte of the client ID<br>  is reserved for the diagnosis address and<br>  the client IDs will start with the diagnosis address as specified.</p>\n<p>  The maximum number of clients is 255 as the Hamming weight of the inverted mask<br>  is 8 (2^8 = 256 - 1 (for the routing manager) = 255). The resulting client ID<br>  range with a diagnosis address of for example 0x45 would be 0x4501 to 0x45ff.</p>\n</li>\n<li><p>network</p>\n<p>  Network identifier used to support multiple routing managers on one host. This<br>  setting changes the name of the shared memory segment in <code>/dev/shm</code> and the name<br>  of the unix domain sockets in <code>/tmp/</code>. Defaults to <code>vsomeip</code> meaning the shared<br>  memory will be named <code>/dev/shm/vsomeip</code> and the unix domain sockets will be<br>  named <code>/tmp/vsomeip-$CLIENTID</code></p>\n</li>\n<li><p><strong>logging</strong></p>\n</li>\n<li><p>level</p>\n<ul>\n<li>trace</li>\n<li>debug</li>\n<li>info</li>\n<li>warning</li>\n<li>error</li>\n<li>fatal</li>\n</ul>\n<p>  6个等级</p>\n</li>\n</ul>\n<ul>\n<li><p>console</p>\n<ul>\n<li>true</li>\n<li>false</li>\n</ul>\n<p>  log 输出到console的开启/关闭</p>\n</li>\n<li><p>file</p>\n<ul>\n<li>enable<ul>\n<li>true</li>\n<li>false</li>\n</ul>\n</li>\n<li>path</li>\n</ul>\n<p>  log 输出到console的开启/关闭<br>  path: The absolute path of the log file</p>\n</li>\n<li><p>memory_log_interval<br>  Configures interval in seconds in which the routing manager logs its used<br>  memory. Setting a value greater than zero enables the logging.</p>\n</li>\n<li><p>status_log_interval<br>  Configures interval in seconds in which the routing manager logs its internal<br>  status.<br>  Setting a value greater than zero enables the logging.</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>Tracing</strong></p>\n<ul>\n<li><p>enable</p>\n</li>\n<li><p>sd_enable</p>\n</li>\n<li><p>channels</p>\n<ul>\n<li>name</li>\n<li>id</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Applications</strong></p>\n<ul>\n<li>name</li>\n<li>id</li>\n<li>max_dispatchers</li>\n<li>max_dispatch_time</li>\n<li>threads</li>\n<li>io_thread_nice</li>\n<li>request_debounce_time</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Source-Code-Arch\"><a href=\"#Source-Code-Arch\" class=\"headerlink\" title=\"Source Code Arch\"></a>Source Code Arch</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── config</span><br><span class=\"line\">├── documentation</span><br><span class=\"line\">├── examples</span><br><span class=\"line\">│   ├── hello_world</span><br><span class=\"line\">│   └── routingmanagerd</span><br><span class=\"line\">├── implementation ---&gt; 具体的代码实现逻辑</span><br><span class=\"line\">│   ├── compat     ---&gt; vSOMEIP 兼容</span><br><span class=\"line\">│   │   ├── message</span><br><span class=\"line\">│   │   │   ├── include</span><br><span class=\"line\">│   │   │   └── src</span><br><span class=\"line\">│   │   └── runtime</span><br><span class=\"line\">│   │       ├── include</span><br><span class=\"line\">│   │       └── src</span><br><span class=\"line\">│   ├── configuration   ---&gt; 配置</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── e2e_protection</span><br><span class=\"line\">│   ├── endpoints       ---&gt; 具有vSOMEIP功能的进程</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── helper          ---&gt; boost版本兼容</span><br><span class=\"line\">│   │   ├── 1.55</span><br><span class=\"line\">│   │   ├── 1.66</span><br><span class=\"line\">│   │   ├── 1.70</span><br><span class=\"line\">│   │   └── 1.74</span><br><span class=\"line\">│   ├── logger</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── message</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── plugin</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── routing      ---&gt; 每个系统中只能有一个vSomeIP服务被配置成Routing</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── runtime       ---&gt; 管理公共资源和获取runtime属性</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── security</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── service_discovery</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── tracing</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   └── utility</span><br><span class=\"line\">│       ├── include</span><br><span class=\"line\">│       └── src</span><br><span class=\"line\">├── interface</span><br><span class=\"line\">│   ├── compat</span><br><span class=\"line\">│   │   └── vsomeip</span><br><span class=\"line\">│   │       ├── internal</span><br><span class=\"line\">│   │       └── plugins</span><br><span class=\"line\">│   └── vsomeip</span><br><span class=\"line\">│       ├── internal</span><br><span class=\"line\">│       └── plugins</span><br><span class=\"line\">├── <span class=\"built_in\">test</span></span><br><span class=\"line\">└── tools</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Configuration lib</p>\n<ul>\n<li>implementation<ul>\n<li>configuration</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Base (Core) lib</p>\n<ul>\n<li>implementation<ul>\n<li><strong>endpoingts</strong></li>\n<li><strong>message</strong></li>\n<li><strong>routing</strong></li>\n<li><strong>runtime</strong></li>\n<li><strong>service_discovery</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vSOMEIP-01-source-code\"><a href=\"#vSOMEIP-01-source-code\" class=\"headerlink\" title=\"vSOMEIP 01:  source code\"></a>vSOMEIP 01:  source code</h1><p>source code reading</p>\n<h2 id=\"Start-from-CMakeLists-txt\"><a href=\"#Start-from-CMakeLists-txt\" class=\"headerlink\" title=\"Start from CMakeLists.txt\"></a>Start from CMakeLists.txt</h2><h3 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h3><ul>\n<li>C++11, gcc &gt; 5.2</li>\n<li>Boost &gt; 1.55</li>\n</ul>\n<h3 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h3><h4 id=\"DCMAKE-INSTALL-PREFIX\"><a href=\"#DCMAKE-INSTALL-PREFIX\" class=\"headerlink\" title=\"DCMAKE_INSTALL_PREFIX\"></a>DCMAKE_INSTALL_PREFIX</h4><p>安装位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX:PATH=<span class=\"variable\">$YOUR_PATH</span> ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DBASE-PATH\"><a href=\"#DBASE-PATH\" class=\"headerlink\" title=\"DBASE_PATH\"></a>DBASE_PATH</h4><p>创建local sockets 位置, 默认为 <code>/tmp/vsomeip*</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DBASE_PATH=&lt;YOUR BASE PATH&gt; ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DUNICAST-ADDRESS\"><a href=\"#DUNICAST-ADDRESS\" class=\"headerlink\" title=\"DUNICAST_ADDRESS\"></a>DUNICAST_ADDRESS</h4><p>组播 address</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DUNICAST_ADDRESS=&lt;YOUR IP ADDRESS&gt; ..</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"DDIAGNOSIS-ADDRESS\"><a href=\"#DDIAGNOSIS-ADDRESS\" class=\"headerlink\" title=\"DDIAGNOSIS_ADDRESS\"></a>DDIAGNOSIS_ADDRESS</h4><p>诊断 address</p>\n<p>默认为<code>0x01</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DDIAGNOSIS_ADDRESS=&lt;YOUR DIAGNOSIS ADDRESS&gt; ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DDEFAULT-CONFIGURATION-FOLDER\"><a href=\"#DDEFAULT-CONFIGURATION-FOLDER\" class=\"headerlink\" title=\"DDEFAULT_CONFIGURATION_FOLDER\"></a>DDEFAULT_CONFIGURATION_FOLDER</h4><p>配置文件目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FOLDER=&lt;DEFAULT CONFIGURATION FOLDER&gt; ..</span><br></pre></td></tr></table></figure>\n\n<p>默认为 <code>/etc/vsomeip</code></p>\n<h4 id=\"DDEFAULT-CONFIGURATION-FILE\"><a href=\"#DDEFAULT-CONFIGURATION-FILE\" class=\"headerlink\" title=\"DDEFAULT_CONFIGURATION_FILE\"></a>DDEFAULT_CONFIGURATION_FILE</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FILE=&lt;DEFAULT CONFIGURATION FILE&gt; ..</span><br></pre></td></tr></table></figure>\n\n<p>默认为 <code>/etc/vsomeip.json</code></p>\n<h4 id=\"DENABLE-SIGNAL-HANDLING\"><a href=\"#DENABLE-SIGNAL-HANDLING\" class=\"headerlink\" title=\"DENABLE_SIGNAL_HANDLING\"></a>DENABLE_SIGNAL_HANDLING</h4><p>开启 signal handling</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DENABLE_SIGNAL_HANDLING=1 ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DROUTING-READY-MESSAGE\"><a href=\"#DROUTING-READY-MESSAGE\" class=\"headerlink\" title=\"DROUTING_READY_MESSAGE\"></a>DROUTING_READY_MESSAGE</h4><p>自定义 完成 ip routing 后的通知消息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DROUTING_READY_MESSAGE=&lt;YOUR MESSAGE&gt; ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"VSOMEIP-APPLICATION-NAME\"><a href=\"#VSOMEIP-APPLICATION-NAME\" class=\"headerlink\" title=\"VSOMEIP_APPLICATION_NAME\"></a>VSOMEIP_APPLICATION_NAME</h4><p>通过环境变量 定义启动的程序名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> VSOMEIP_APPLICATION_NAME=my_vsomeip_client \\</span><br><span class=\"line\"><span class=\"built_in\">export</span> VSOMEIP_CONFIGURATION=my_settings.json \\</span><br><span class=\"line\">./my_vsomeip_application</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"json-配置\"><a href=\"#json-配置\" class=\"headerlink\" title=\"json 配置\"></a>json 配置</h4><ul>\n<li><p>unicast</p>\n<p>  The IP address of the host system.</p>\n</li>\n<li><p>netmask</p>\n<p>  The netmask to specify the subnet of the host system.</p>\n</li>\n<li><p>device</p>\n<p>  If specified, IP endpoints will be bound to this device.</p>\n</li>\n</ul>\n<ul>\n<li><p>diagnosis</p>\n<p>  The diagnosis address (byte) that will be used to build client identifiers. The<br>  diagnosis address is assigned to the most significant byte in all client<br>  identifiers if not specified otherwise (for example through a predefined client<br>  ID).</p>\n</li>\n<li><p>diagnosis_mask</p>\n<p>  The diagnosis mask (2 byte) is used to control the maximum amount of allowed<br>  concurrent vsomeip clients on an ECU and the start value of the client IDs.</p>\n<p>  The default value is <code>0xFF00</code> meaning the most significant byte of the client ID<br>  is reserved for the diagnosis address and<br>  the client IDs will start with the diagnosis address as specified.</p>\n<p>  The maximum number of clients is 255 as the Hamming weight of the inverted mask<br>  is 8 (2^8 = 256 - 1 (for the routing manager) = 255). The resulting client ID<br>  range with a diagnosis address of for example 0x45 would be 0x4501 to 0x45ff.</p>\n</li>\n<li><p>network</p>\n<p>  Network identifier used to support multiple routing managers on one host. This<br>  setting changes the name of the shared memory segment in <code>/dev/shm</code> and the name<br>  of the unix domain sockets in <code>/tmp/</code>. Defaults to <code>vsomeip</code> meaning the shared<br>  memory will be named <code>/dev/shm/vsomeip</code> and the unix domain sockets will be<br>  named <code>/tmp/vsomeip-$CLIENTID</code></p>\n</li>\n<li><p><strong>logging</strong></p>\n</li>\n<li><p>level</p>\n<ul>\n<li>trace</li>\n<li>debug</li>\n<li>info</li>\n<li>warning</li>\n<li>error</li>\n<li>fatal</li>\n</ul>\n<p>  6个等级</p>\n</li>\n</ul>\n<ul>\n<li><p>console</p>\n<ul>\n<li>true</li>\n<li>false</li>\n</ul>\n<p>  log 输出到console的开启/关闭</p>\n</li>\n<li><p>file</p>\n<ul>\n<li>enable<ul>\n<li>true</li>\n<li>false</li>\n</ul>\n</li>\n<li>path</li>\n</ul>\n<p>  log 输出到console的开启/关闭<br>  path: The absolute path of the log file</p>\n</li>\n<li><p>memory_log_interval<br>  Configures interval in seconds in which the routing manager logs its used<br>  memory. Setting a value greater than zero enables the logging.</p>\n</li>\n<li><p>status_log_interval<br>  Configures interval in seconds in which the routing manager logs its internal<br>  status.<br>  Setting a value greater than zero enables the logging.</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>Tracing</strong></p>\n<ul>\n<li><p>enable</p>\n</li>\n<li><p>sd_enable</p>\n</li>\n<li><p>channels</p>\n<ul>\n<li>name</li>\n<li>id</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Applications</strong></p>\n<ul>\n<li>name</li>\n<li>id</li>\n<li>max_dispatchers</li>\n<li>max_dispatch_time</li>\n<li>threads</li>\n<li>io_thread_nice</li>\n<li>request_debounce_time</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Source-Code-Arch\"><a href=\"#Source-Code-Arch\" class=\"headerlink\" title=\"Source Code Arch\"></a>Source Code Arch</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── config</span><br><span class=\"line\">├── documentation</span><br><span class=\"line\">├── examples</span><br><span class=\"line\">│   ├── hello_world</span><br><span class=\"line\">│   └── routingmanagerd</span><br><span class=\"line\">├── implementation ---&gt; 具体的代码实现逻辑</span><br><span class=\"line\">│   ├── compat     ---&gt; vSOMEIP 兼容</span><br><span class=\"line\">│   │   ├── message</span><br><span class=\"line\">│   │   │   ├── include</span><br><span class=\"line\">│   │   │   └── src</span><br><span class=\"line\">│   │   └── runtime</span><br><span class=\"line\">│   │       ├── include</span><br><span class=\"line\">│   │       └── src</span><br><span class=\"line\">│   ├── configuration   ---&gt; 配置</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── e2e_protection</span><br><span class=\"line\">│   ├── endpoints       ---&gt; 具有vSOMEIP功能的进程</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── helper          ---&gt; boost版本兼容</span><br><span class=\"line\">│   │   ├── 1.55</span><br><span class=\"line\">│   │   ├── 1.66</span><br><span class=\"line\">│   │   ├── 1.70</span><br><span class=\"line\">│   │   └── 1.74</span><br><span class=\"line\">│   ├── logger</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── message</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── plugin</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── routing      ---&gt; 每个系统中只能有一个vSomeIP服务被配置成Routing</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── runtime       ---&gt; 管理公共资源和获取runtime属性</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── security</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── service_discovery</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── tracing</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   └── utility</span><br><span class=\"line\">│       ├── include</span><br><span class=\"line\">│       └── src</span><br><span class=\"line\">├── interface</span><br><span class=\"line\">│   ├── compat</span><br><span class=\"line\">│   │   └── vsomeip</span><br><span class=\"line\">│   │       ├── internal</span><br><span class=\"line\">│   │       └── plugins</span><br><span class=\"line\">│   └── vsomeip</span><br><span class=\"line\">│       ├── internal</span><br><span class=\"line\">│       └── plugins</span><br><span class=\"line\">├── <span class=\"built_in\">test</span></span><br><span class=\"line\">└── tools</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Configuration lib</p>\n<ul>\n<li>implementation<ul>\n<li>configuration</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Base (Core) lib</p>\n<ul>\n<li>implementation<ul>\n<li><strong>endpoingts</strong></li>\n<li><strong>message</strong></li>\n<li><strong>routing</strong></li>\n<li><strong>runtime</strong></li>\n<li><strong>service_discovery</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"someip-01: vsomeip with ap","date":"2021-12-22T10:10:05.000Z","_content":"## vector autosar someip与vsomeip对接经验总结\n\nsomeip是现代车辆通信的主流通信协议知一\n\n虽然someip协议已经基本成熟，但有多个实现版本，现在使用较多的主要有\n* vector autosar 的someip版本\n* vsomeip；\n\n这两个版本在理论上是可以相互兼容正常通信的，但在实际使用过程中，仍然发现了一些问题；\n\n### 在同一个局域网内，两方无法相互发现；\n\n原理：运行的someip应用需要借助于各自的someipd服务来彼此发现对方；\n\n而someipsd实现的someip sd协议是借助于udp的广播来发布或收集网络中的其他someip应用的相关信息的；\n\n所以要想两方能够彼此发现，首先要将someip sd的服务设置为同一广播地址以及服务端口号；\n\n这个信息可以在vsomeip程序加载的vsomeip-tcp-server.jason等配置文件中进行修改；\n\n理想情况下，将两方的配置修改成一样就可以正常发现彼此；\n\n \n\n### 将someip sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\n\n这个首先要借助网络工具来抓包进行确认，是否可以在网络上抓取到相应的udp数据包，来检查是不是由于网络设置的原因造成的；\n\n如果抓包工具可以确认在网络上有影响的udp广播包；\n\n那么就要对someip的版本号配置进行确认；\n\n在使用vsomeip 2.10版本时发现，vsomeip 代码中的默认主版本号信息为0x00;而vector autasar的someip版本号信息不特意更改的话是0x01;\n\n由于双方版本号不一致，虽然彼此可以收到对方发出的sd udp广播包，但在软件中彼此仍然无法相互识别。并且在vsomeip中会频繁输出warning信息；\n\n将双方的版本号信息设置为一致时，就相互就可以识别了；\n\n \n\n### sd 广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\n\n这个就需要排查网络设置问题；\n\n(1)双方是否可以彼此ping通；\n\n(2)路由表以及gateway是否配置正确；\n\n我就遇到双方可以ping通，但由于路由表以及gateway信息缺失使得双方无法彼此发现的问题；\n\n \n\n### 双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\n\n这个问题，也是由于服务版本号的问题（interface version）;\n\n由于某些特殊的原因，将autosar someip的主版本号设置为255可以与vsomeip 的0版本号相互发现；\n\n但是当进行交互时，在代码中会对interface version配置进行验证。如果双方的interface version不一致，那么就会出现一通信底层tcp的链接就会断开情况；\n\n这个需要注意检查；\n\n \n### 当vsomeip作为服务器,autosar someip作为客户端。vsomeip发送的event,autosar someip的客户端无法接收到的情况；\n\n首先要对someip传输类型进行确认（使用的是tcp或者udp）;\n\n假如使用tcp进行传输；则需要将vsomeip 配置文件中event配置添加is_reliable为true的字段；\n\n否则autasar someip tcp的客户端无法正常接收；","source":"_posts/someip-02-vsomeip-with-ap.md","raw":"---\ntitle: 'someip-01: vsomeip with ap'\ndate: 2021-12-22 18:10:05\ntags:\n    - someip\n    - vSOMEIP\n---\n## vector autosar someip与vsomeip对接经验总结\n\nsomeip是现代车辆通信的主流通信协议知一\n\n虽然someip协议已经基本成熟，但有多个实现版本，现在使用较多的主要有\n* vector autosar 的someip版本\n* vsomeip；\n\n这两个版本在理论上是可以相互兼容正常通信的，但在实际使用过程中，仍然发现了一些问题；\n\n### 在同一个局域网内，两方无法相互发现；\n\n原理：运行的someip应用需要借助于各自的someipd服务来彼此发现对方；\n\n而someipsd实现的someip sd协议是借助于udp的广播来发布或收集网络中的其他someip应用的相关信息的；\n\n所以要想两方能够彼此发现，首先要将someip sd的服务设置为同一广播地址以及服务端口号；\n\n这个信息可以在vsomeip程序加载的vsomeip-tcp-server.jason等配置文件中进行修改；\n\n理想情况下，将两方的配置修改成一样就可以正常发现彼此；\n\n \n\n### 将someip sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\n\n这个首先要借助网络工具来抓包进行确认，是否可以在网络上抓取到相应的udp数据包，来检查是不是由于网络设置的原因造成的；\n\n如果抓包工具可以确认在网络上有影响的udp广播包；\n\n那么就要对someip的版本号配置进行确认；\n\n在使用vsomeip 2.10版本时发现，vsomeip 代码中的默认主版本号信息为0x00;而vector autasar的someip版本号信息不特意更改的话是0x01;\n\n由于双方版本号不一致，虽然彼此可以收到对方发出的sd udp广播包，但在软件中彼此仍然无法相互识别。并且在vsomeip中会频繁输出warning信息；\n\n将双方的版本号信息设置为一致时，就相互就可以识别了；\n\n \n\n### sd 广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\n\n这个就需要排查网络设置问题；\n\n(1)双方是否可以彼此ping通；\n\n(2)路由表以及gateway是否配置正确；\n\n我就遇到双方可以ping通，但由于路由表以及gateway信息缺失使得双方无法彼此发现的问题；\n\n \n\n### 双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\n\n这个问题，也是由于服务版本号的问题（interface version）;\n\n由于某些特殊的原因，将autosar someip的主版本号设置为255可以与vsomeip 的0版本号相互发现；\n\n但是当进行交互时，在代码中会对interface version配置进行验证。如果双方的interface version不一致，那么就会出现一通信底层tcp的链接就会断开情况；\n\n这个需要注意检查；\n\n \n### 当vsomeip作为服务器,autosar someip作为客户端。vsomeip发送的event,autosar someip的客户端无法接收到的情况；\n\n首先要对someip传输类型进行确认（使用的是tcp或者udp）;\n\n假如使用tcp进行传输；则需要将vsomeip 配置文件中event配置添加is_reliable为true的字段；\n\n否则autasar someip tcp的客户端无法正常接收；","slug":"someip-02-vsomeip-with-ap","published":1,"updated":"2021-12-26T10:11:28.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtvl000kz59y6q0m0192","content":"<h2 id=\"vector-autosar-someip与vsomeip对接经验总结\"><a href=\"#vector-autosar-someip与vsomeip对接经验总结\" class=\"headerlink\" title=\"vector autosar someip与vsomeip对接经验总结\"></a>vector autosar someip与vsomeip对接经验总结</h2><p>someip是现代车辆通信的主流通信协议知一</p>\n<p>虽然someip协议已经基本成熟，但有多个实现版本，现在使用较多的主要有</p>\n<ul>\n<li>vector autosar 的someip版本</li>\n<li>vsomeip；</li>\n</ul>\n<p>这两个版本在理论上是可以相互兼容正常通信的，但在实际使用过程中，仍然发现了一些问题；</p>\n<h3 id=\"在同一个局域网内，两方无法相互发现；\"><a href=\"#在同一个局域网内，两方无法相互发现；\" class=\"headerlink\" title=\"在同一个局域网内，两方无法相互发现；\"></a>在同一个局域网内，两方无法相互发现；</h3><p>原理：运行的someip应用需要借助于各自的someipd服务来彼此发现对方；</p>\n<p>而someipsd实现的someip sd协议是借助于udp的广播来发布或收集网络中的其他someip应用的相关信息的；</p>\n<p>所以要想两方能够彼此发现，首先要将someip sd的服务设置为同一广播地址以及服务端口号；</p>\n<p>这个信息可以在vsomeip程序加载的vsomeip-tcp-server.jason等配置文件中进行修改；</p>\n<p>理想情况下，将两方的配置修改成一样就可以正常发现彼此；</p>\n<h3 id=\"将someip-sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\"><a href=\"#将someip-sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\" class=\"headerlink\" title=\"将someip sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\"></a>将someip sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；</h3><p>这个首先要借助网络工具来抓包进行确认，是否可以在网络上抓取到相应的udp数据包，来检查是不是由于网络设置的原因造成的；</p>\n<p>如果抓包工具可以确认在网络上有影响的udp广播包；</p>\n<p>那么就要对someip的版本号配置进行确认；</p>\n<p>在使用vsomeip 2.10版本时发现，vsomeip 代码中的默认主版本号信息为0x00;而vector autasar的someip版本号信息不特意更改的话是0x01;</p>\n<p>由于双方版本号不一致，虽然彼此可以收到对方发出的sd udp广播包，但在软件中彼此仍然无法相互识别。并且在vsomeip中会频繁输出warning信息；</p>\n<p>将双方的版本号信息设置为一致时，就相互就可以识别了；</p>\n<h3 id=\"sd-广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\"><a href=\"#sd-广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\" class=\"headerlink\" title=\"sd 广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\"></a>sd 广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；</h3><p>这个就需要排查网络设置问题；</p>\n<p>(1)双方是否可以彼此ping通；</p>\n<p>(2)路由表以及gateway是否配置正确；</p>\n<p>我就遇到双方可以ping通，但由于路由表以及gateway信息缺失使得双方无法彼此发现的问题；</p>\n<h3 id=\"双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\"><a href=\"#双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\" class=\"headerlink\" title=\"双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\"></a>双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；</h3><p>这个问题，也是由于服务版本号的问题（interface version）;</p>\n<p>由于某些特殊的原因，将autosar someip的主版本号设置为255可以与vsomeip 的0版本号相互发现；</p>\n<p>但是当进行交互时，在代码中会对interface version配置进行验证。如果双方的interface version不一致，那么就会出现一通信底层tcp的链接就会断开情况；</p>\n<p>这个需要注意检查；</p>\n<h3 id=\"当vsomeip作为服务器-autosar-someip作为客户端。vsomeip发送的event-autosar-someip的客户端无法接收到的情况；\"><a href=\"#当vsomeip作为服务器-autosar-someip作为客户端。vsomeip发送的event-autosar-someip的客户端无法接收到的情况；\" class=\"headerlink\" title=\"当vsomeip作为服务器,autosar someip作为客户端。vsomeip发送的event,autosar someip的客户端无法接收到的情况；\"></a>当vsomeip作为服务器,autosar someip作为客户端。vsomeip发送的event,autosar someip的客户端无法接收到的情况；</h3><p>首先要对someip传输类型进行确认（使用的是tcp或者udp）;</p>\n<p>假如使用tcp进行传输；则需要将vsomeip 配置文件中event配置添加is_reliable为true的字段；</p>\n<p>否则autasar someip tcp的客户端无法正常接收；</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vector-autosar-someip与vsomeip对接经验总结\"><a href=\"#vector-autosar-someip与vsomeip对接经验总结\" class=\"headerlink\" title=\"vector autosar someip与vsomeip对接经验总结\"></a>vector autosar someip与vsomeip对接经验总结</h2><p>someip是现代车辆通信的主流通信协议知一</p>\n<p>虽然someip协议已经基本成熟，但有多个实现版本，现在使用较多的主要有</p>\n<ul>\n<li>vector autosar 的someip版本</li>\n<li>vsomeip；</li>\n</ul>\n<p>这两个版本在理论上是可以相互兼容正常通信的，但在实际使用过程中，仍然发现了一些问题；</p>\n<h3 id=\"在同一个局域网内，两方无法相互发现；\"><a href=\"#在同一个局域网内，两方无法相互发现；\" class=\"headerlink\" title=\"在同一个局域网内，两方无法相互发现；\"></a>在同一个局域网内，两方无法相互发现；</h3><p>原理：运行的someip应用需要借助于各自的someipd服务来彼此发现对方；</p>\n<p>而someipsd实现的someip sd协议是借助于udp的广播来发布或收集网络中的其他someip应用的相关信息的；</p>\n<p>所以要想两方能够彼此发现，首先要将someip sd的服务设置为同一广播地址以及服务端口号；</p>\n<p>这个信息可以在vsomeip程序加载的vsomeip-tcp-server.jason等配置文件中进行修改；</p>\n<p>理想情况下，将两方的配置修改成一样就可以正常发现彼此；</p>\n<h3 id=\"将someip-sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\"><a href=\"#将someip-sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\" class=\"headerlink\" title=\"将someip sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\"></a>将someip sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；</h3><p>这个首先要借助网络工具来抓包进行确认，是否可以在网络上抓取到相应的udp数据包，来检查是不是由于网络设置的原因造成的；</p>\n<p>如果抓包工具可以确认在网络上有影响的udp广播包；</p>\n<p>那么就要对someip的版本号配置进行确认；</p>\n<p>在使用vsomeip 2.10版本时发现，vsomeip 代码中的默认主版本号信息为0x00;而vector autasar的someip版本号信息不特意更改的话是0x01;</p>\n<p>由于双方版本号不一致，虽然彼此可以收到对方发出的sd udp广播包，但在软件中彼此仍然无法相互识别。并且在vsomeip中会频繁输出warning信息；</p>\n<p>将双方的版本号信息设置为一致时，就相互就可以识别了；</p>\n<h3 id=\"sd-广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\"><a href=\"#sd-广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\" class=\"headerlink\" title=\"sd 广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\"></a>sd 广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；</h3><p>这个就需要排查网络设置问题；</p>\n<p>(1)双方是否可以彼此ping通；</p>\n<p>(2)路由表以及gateway是否配置正确；</p>\n<p>我就遇到双方可以ping通，但由于路由表以及gateway信息缺失使得双方无法彼此发现的问题；</p>\n<h3 id=\"双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\"><a href=\"#双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\" class=\"headerlink\" title=\"双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\"></a>双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；</h3><p>这个问题，也是由于服务版本号的问题（interface version）;</p>\n<p>由于某些特殊的原因，将autosar someip的主版本号设置为255可以与vsomeip 的0版本号相互发现；</p>\n<p>但是当进行交互时，在代码中会对interface version配置进行验证。如果双方的interface version不一致，那么就会出现一通信底层tcp的链接就会断开情况；</p>\n<p>这个需要注意检查；</p>\n<h3 id=\"当vsomeip作为服务器-autosar-someip作为客户端。vsomeip发送的event-autosar-someip的客户端无法接收到的情况；\"><a href=\"#当vsomeip作为服务器-autosar-someip作为客户端。vsomeip发送的event-autosar-someip的客户端无法接收到的情况；\" class=\"headerlink\" title=\"当vsomeip作为服务器,autosar someip作为客户端。vsomeip发送的event,autosar someip的客户端无法接收到的情况；\"></a>当vsomeip作为服务器,autosar someip作为客户端。vsomeip发送的event,autosar someip的客户端无法接收到的情况；</h3><p>首先要对someip传输类型进行确认（使用的是tcp或者udp）;</p>\n<p>假如使用tcp进行传输；则需要将vsomeip 配置文件中event配置添加is_reliable为true的字段；</p>\n<p>否则autasar someip tcp的客户端无法正常接收；</p>\n"},{"title":"vSOMEIP source reading","date":"2022-01-05T18:06:23.000Z","_content":"\n# VSOMEIP 源码学习分享 之 手摸手编译安装过源码\n\n\nContent\n---\n\n1. 源码结构\n\n2. 环境和编译\n\n3. 核心内容  \n\n  3.1 模块  \n\n  3.2 配置\n\n\n\n## 1. 源码结构\n\n```bash\ndev@dev:~/someip_space/vsomeip$ tree . -L 1\n.\n├── Android.bp\n├── AUTHORS\n├── CHANGES\n├── CMakeLists.txt\n├── config               --> 示例配置文件\n├── documentation        --> 使用文档\n├── examples             --> Demo\n├── exportmap.gcc        --> 控制动态库的函数导出\n├── implementation       --> 逻辑代码实现\n├── interface            --> 代码接口设计\n├── LICENSE\n├── LICENSE_boost\n├── README.md\n├── test                 --> 测试代码\n├── tools                --> some_ctrl 工具\n├── vsomeip3Config.cmake.in            --|\n├── vsomeip3ConfigVersion.cmake.in       |\n├── vsomeip3.pc.in                       |\n├── vsomeipConfig.cmake.in               | ==> cmake 配置\n├── vsomeipConfigVersion.cmake.in        |\n├── vsomeip.pc.in                        |\n└── vsomeip.xml                        --|\n```\n\n> 核心代码都在 implementation\n\n### implementation\n\n\n![arch](../imgs/00_overview_source_arch.png)\n\n```bash\ndev@dev:~/someip_space/vsomeip/implementation$ tree . -L 1\n.\n├── compat                 --> 3.x 和 2.x 兼容层\n├── configuration          --> 配置模块: 配置读取,加载; 插件配置\n├── e2e_protection         --> e2e模块\n├── endpoints              --> client/server, tcp/udp, TP endpoint 实现\n├── helper                 --> boost 兼容层\n├── logger                 --> logger\n├── message                --> message, payload, (反)序列化 实现\n├── plugin                 --> 插件模块: 插件管理\n├── routing                --> 路由模块 \n├── runtime                --> 运行时: 管理 APP , runtime 资源\n├── security               --> 安全模块: policy, credentials \n├── service_discovery      --> 服务发现: \n                                    发现注册模块, \n                                    IPv4/IPv6 Options, \n                                    负载均衡, \n                                    远程订阅\n├── tracing                --> tracing: 配置 dlt-daemon\n└── utility                --> 通用工具\n```\n\n\n\n## 2. 环境和编译\n\n### 环境\n\nOS环境:\n\n```bash\nlsb_release -a\nNo LSB modules are available.\nDistributor ID:\tUbuntu\nDescription:\tUbuntu 21.04\nRelease:\t21.04\nCodename:\thirsute\n```\n\n> 实测 18.04 也没有问题, 官方推荐14.04 及以上\n\n#### 工具\n\n* CMake\n\n> ref : https://apt.kitware.com/\n\n```bash\n# For Ubuntu Bionic Beaver (18.04) and newer:\nsudo apt-get update\nsudo apt-get install gpg wget\n\n# For Ubuntu Xenial Xerus (16.04):\nsudo apt-get update\nsudo apt-get install apt-transport-https wget\n\n# Obtain a copy of our signing key:\nwget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null\n\n# Add the repository to your sources list and update\n\n# For Ubuntu Focal Fossa (20.04):\necho 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null\n\nsudo apt-get update\n\n# For Ubuntu Bionic Beaver (18.04):\necho 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null\n\nsudo apt-get update\n\n\n# For Ubuntu Xenial Xerus (16.04):\necho 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ xenial main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null\n\nsudo apt-get update\n\n# Install the kitware-archive-keyring package to ensure that your keyring stays up to date as we rotate our keys:\nsudo rm /usr/share/keyrings/kitware-archive-keyring.gpg\nsudo apt-get install kitware-archive-keyring\n\n# install cmake\nsudo apt-get install cmake\n\n```\n\n* g++ / clang++\n\n  需要支持 C++11 , 因为使用了很多 C++11 的特性, 如 `std::bind`\n\n* boost 1.71\n\n  1.71 刚好和 DoIP boost版本保持一致\n  - repo, (master branch) \n\n    ```bash\n    Ethernet/boost_1_71_0\n    ```\n\n##### 可选\n```bash\n# 编译文档\n\nsudo apt install -y asciidoc source-highlight doxygen graphviz\n\n# pkg-config 配合make install\n# Return metainformation about installed libraries\n\nsudo apt install -y pkg-config\n```\n\n### 编译&安装\n\n``` bash\ncd vsomeip-3.1.20/\nmkdir build;cd build;\n\n# 默认配置\ncmake ..\n\n##  自定义\n# install path\ncmake -DCMAKE_INSTALL_PREFIX:PATH=$YOUR_PATH ..\n# ip addr\ncmake -DUNICAST_ADDRESS=<YOUR IP ADDRESS> ..\n# diagnosis addr\ncmake -DDIAGNOSIS_ADDRESS=<YOUR DIAGNOSIS ADDRESS> ..\n# configuration folder\ncmake -DDEFAULT_CONFIGURATION_FOLDER=<DEFAULT CONFIGURATION FOLDER> ..\n# default configuration file\ncmake -DDEFAULT_CONFIGURATION_FILE=<DEFAULT CONFIGURATION FILE> ..\n# signal handling\ncmake -DENABLE_SIGNAL_HANDLING=1 ..\n\nmake\n\nsudo make install\n\n# tool: vsomeip_ctrl\nmake vsomeip_ctrl\n```\n\n## 3. 核心内容\n\n### 3.1 模块\n自上而下来看可以划分为以下:\n\n* runtime\n\n* application\n\n* messgae\n\n* payload\n\n\n#### __runtime__\n\n![runtime](../imgs/vSOMEIP_source_runtime.png)\n\n上图为runtime 类在代码中与其他类的关系.\n\n这个类主要用于创建和管理其他所有公共资源和获取runtime属性。\n管理的资源包括:\n\n- application\n\n- message\n\n- payload\n\n主要的功能函数:\n\n* get\n  - `runtime`\n  - `application`\n\n* set/get_property:\n  - `map<string, string>`\n\n* create_xxx\n  - `application`\n  - `message`\n  - `request`\n  - `response`\n  - `notification`\n  - `payload`\n\n* remove_application\n\n\n#### __application__\n\n__最核心的一个部分__\n\n每个客户端都存在且仅存在一份。  \nApplication可以通过Runtime的接口来实例化。  \n管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。\n\n管理的资源:\n\n- plugin\n- configuration\n- routing\n- endpoint\n- security\n- connector\n\n##### 函数实现:\n\n自身状态管理:\n- init\n- start\n- stop\n- process\n- is_available \n- are_available \n- is_routing\n\n属性:\n- get_name\n- get_client\n- get_diagnosis\n- get_security_mode\n- get_offered_services_async \n- get_sd_acceptance_required\n- set_routing_state\n- set_sd_acceptance_required \n- set_sd_acceptance_required\n\nhandler 类(调用client 传入的函数):\n\n- register_state_handler\n- unregister_state_handler\n\n- register_message_handler \n- unregister_message_handler \n\n- register_availability_handler\n- unregister_availability_handler \n\n- register_subscription_handler \n- register_async_subscription_handler\n- register_subscription_status_handler \n- unregister_subscription_status_handler\n- unregister_subscription_handler \n\n- register_routing_ready_handler \n- register_routing_state_handler \n\n- clear_all_handler \n\n- register_sd_acceptance_handler \n\n- register_reboot_notification_handler \n\n- set_watchdog_handler \n\n\n消息服务类:\n- update_service_configuration \n- update_security_policy_configuration\n- remove_security_policy_configuration \n\n- offer_service \n- stop_offer_service\n\n- offer_event \n- stop_offer_event\n\n- request_service \n- release_service\n\n- request_event \n- release_event \n\n- subscribe\n- unsubscribe\n\n- send \n- notify \n- notify_one \n\n\n#### __messgae & payload__\n\n![msg_arch](../imgs/vSOMEIP_source_messages_arch.png)\n\nmessage & payload 模块与其他模块之间的交互;\n主要负责 `set/get` 相关的属性(session, payload, id...), (反)序列化功能.\n\n由以下 `.cpp` 文件实现功能:\n\n* message_base_impl.cpp\n* message_header_impl.cpp\n* message_impl.cpp\n* payload_impl.cpp\n\n","source":"_posts/vSOMEIP-source-reading.md","raw":"---\ntitle: vSOMEIP source reading\ndate: 2022-01-06 02:06:23\ntags:\n    - CPP\n    - SOMEIP\n    - sources\n    - notes\n---\n\n# VSOMEIP 源码学习分享 之 手摸手编译安装过源码\n\n\nContent\n---\n\n1. 源码结构\n\n2. 环境和编译\n\n3. 核心内容  \n\n  3.1 模块  \n\n  3.2 配置\n\n\n\n## 1. 源码结构\n\n```bash\ndev@dev:~/someip_space/vsomeip$ tree . -L 1\n.\n├── Android.bp\n├── AUTHORS\n├── CHANGES\n├── CMakeLists.txt\n├── config               --> 示例配置文件\n├── documentation        --> 使用文档\n├── examples             --> Demo\n├── exportmap.gcc        --> 控制动态库的函数导出\n├── implementation       --> 逻辑代码实现\n├── interface            --> 代码接口设计\n├── LICENSE\n├── LICENSE_boost\n├── README.md\n├── test                 --> 测试代码\n├── tools                --> some_ctrl 工具\n├── vsomeip3Config.cmake.in            --|\n├── vsomeip3ConfigVersion.cmake.in       |\n├── vsomeip3.pc.in                       |\n├── vsomeipConfig.cmake.in               | ==> cmake 配置\n├── vsomeipConfigVersion.cmake.in        |\n├── vsomeip.pc.in                        |\n└── vsomeip.xml                        --|\n```\n\n> 核心代码都在 implementation\n\n### implementation\n\n\n![arch](../imgs/00_overview_source_arch.png)\n\n```bash\ndev@dev:~/someip_space/vsomeip/implementation$ tree . -L 1\n.\n├── compat                 --> 3.x 和 2.x 兼容层\n├── configuration          --> 配置模块: 配置读取,加载; 插件配置\n├── e2e_protection         --> e2e模块\n├── endpoints              --> client/server, tcp/udp, TP endpoint 实现\n├── helper                 --> boost 兼容层\n├── logger                 --> logger\n├── message                --> message, payload, (反)序列化 实现\n├── plugin                 --> 插件模块: 插件管理\n├── routing                --> 路由模块 \n├── runtime                --> 运行时: 管理 APP , runtime 资源\n├── security               --> 安全模块: policy, credentials \n├── service_discovery      --> 服务发现: \n                                    发现注册模块, \n                                    IPv4/IPv6 Options, \n                                    负载均衡, \n                                    远程订阅\n├── tracing                --> tracing: 配置 dlt-daemon\n└── utility                --> 通用工具\n```\n\n\n\n## 2. 环境和编译\n\n### 环境\n\nOS环境:\n\n```bash\nlsb_release -a\nNo LSB modules are available.\nDistributor ID:\tUbuntu\nDescription:\tUbuntu 21.04\nRelease:\t21.04\nCodename:\thirsute\n```\n\n> 实测 18.04 也没有问题, 官方推荐14.04 及以上\n\n#### 工具\n\n* CMake\n\n> ref : https://apt.kitware.com/\n\n```bash\n# For Ubuntu Bionic Beaver (18.04) and newer:\nsudo apt-get update\nsudo apt-get install gpg wget\n\n# For Ubuntu Xenial Xerus (16.04):\nsudo apt-get update\nsudo apt-get install apt-transport-https wget\n\n# Obtain a copy of our signing key:\nwget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null\n\n# Add the repository to your sources list and update\n\n# For Ubuntu Focal Fossa (20.04):\necho 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null\n\nsudo apt-get update\n\n# For Ubuntu Bionic Beaver (18.04):\necho 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null\n\nsudo apt-get update\n\n\n# For Ubuntu Xenial Xerus (16.04):\necho 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ xenial main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null\n\nsudo apt-get update\n\n# Install the kitware-archive-keyring package to ensure that your keyring stays up to date as we rotate our keys:\nsudo rm /usr/share/keyrings/kitware-archive-keyring.gpg\nsudo apt-get install kitware-archive-keyring\n\n# install cmake\nsudo apt-get install cmake\n\n```\n\n* g++ / clang++\n\n  需要支持 C++11 , 因为使用了很多 C++11 的特性, 如 `std::bind`\n\n* boost 1.71\n\n  1.71 刚好和 DoIP boost版本保持一致\n  - repo, (master branch) \n\n    ```bash\n    Ethernet/boost_1_71_0\n    ```\n\n##### 可选\n```bash\n# 编译文档\n\nsudo apt install -y asciidoc source-highlight doxygen graphviz\n\n# pkg-config 配合make install\n# Return metainformation about installed libraries\n\nsudo apt install -y pkg-config\n```\n\n### 编译&安装\n\n``` bash\ncd vsomeip-3.1.20/\nmkdir build;cd build;\n\n# 默认配置\ncmake ..\n\n##  自定义\n# install path\ncmake -DCMAKE_INSTALL_PREFIX:PATH=$YOUR_PATH ..\n# ip addr\ncmake -DUNICAST_ADDRESS=<YOUR IP ADDRESS> ..\n# diagnosis addr\ncmake -DDIAGNOSIS_ADDRESS=<YOUR DIAGNOSIS ADDRESS> ..\n# configuration folder\ncmake -DDEFAULT_CONFIGURATION_FOLDER=<DEFAULT CONFIGURATION FOLDER> ..\n# default configuration file\ncmake -DDEFAULT_CONFIGURATION_FILE=<DEFAULT CONFIGURATION FILE> ..\n# signal handling\ncmake -DENABLE_SIGNAL_HANDLING=1 ..\n\nmake\n\nsudo make install\n\n# tool: vsomeip_ctrl\nmake vsomeip_ctrl\n```\n\n## 3. 核心内容\n\n### 3.1 模块\n自上而下来看可以划分为以下:\n\n* runtime\n\n* application\n\n* messgae\n\n* payload\n\n\n#### __runtime__\n\n![runtime](../imgs/vSOMEIP_source_runtime.png)\n\n上图为runtime 类在代码中与其他类的关系.\n\n这个类主要用于创建和管理其他所有公共资源和获取runtime属性。\n管理的资源包括:\n\n- application\n\n- message\n\n- payload\n\n主要的功能函数:\n\n* get\n  - `runtime`\n  - `application`\n\n* set/get_property:\n  - `map<string, string>`\n\n* create_xxx\n  - `application`\n  - `message`\n  - `request`\n  - `response`\n  - `notification`\n  - `payload`\n\n* remove_application\n\n\n#### __application__\n\n__最核心的一个部分__\n\n每个客户端都存在且仅存在一份。  \nApplication可以通过Runtime的接口来实例化。  \n管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。\n\n管理的资源:\n\n- plugin\n- configuration\n- routing\n- endpoint\n- security\n- connector\n\n##### 函数实现:\n\n自身状态管理:\n- init\n- start\n- stop\n- process\n- is_available \n- are_available \n- is_routing\n\n属性:\n- get_name\n- get_client\n- get_diagnosis\n- get_security_mode\n- get_offered_services_async \n- get_sd_acceptance_required\n- set_routing_state\n- set_sd_acceptance_required \n- set_sd_acceptance_required\n\nhandler 类(调用client 传入的函数):\n\n- register_state_handler\n- unregister_state_handler\n\n- register_message_handler \n- unregister_message_handler \n\n- register_availability_handler\n- unregister_availability_handler \n\n- register_subscription_handler \n- register_async_subscription_handler\n- register_subscription_status_handler \n- unregister_subscription_status_handler\n- unregister_subscription_handler \n\n- register_routing_ready_handler \n- register_routing_state_handler \n\n- clear_all_handler \n\n- register_sd_acceptance_handler \n\n- register_reboot_notification_handler \n\n- set_watchdog_handler \n\n\n消息服务类:\n- update_service_configuration \n- update_security_policy_configuration\n- remove_security_policy_configuration \n\n- offer_service \n- stop_offer_service\n\n- offer_event \n- stop_offer_event\n\n- request_service \n- release_service\n\n- request_event \n- release_event \n\n- subscribe\n- unsubscribe\n\n- send \n- notify \n- notify_one \n\n\n#### __messgae & payload__\n\n![msg_arch](../imgs/vSOMEIP_source_messages_arch.png)\n\nmessage & payload 模块与其他模块之间的交互;\n主要负责 `set/get` 相关的属性(session, payload, id...), (反)序列化功能.\n\n由以下 `.cpp` 文件实现功能:\n\n* message_base_impl.cpp\n* message_header_impl.cpp\n* message_impl.cpp\n* payload_impl.cpp\n\n","slug":"vSOMEIP-source-reading","published":1,"updated":"2022-01-05T18:14:13.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtvn000nz59y9xaw3h83","content":"<h1 id=\"VSOMEIP-源码学习分享-之-手摸手编译安装过源码\"><a href=\"#VSOMEIP-源码学习分享-之-手摸手编译安装过源码\" class=\"headerlink\" title=\"VSOMEIP 源码学习分享 之 手摸手编译安装过源码\"></a>VSOMEIP 源码学习分享 之 手摸手编译安装过源码</h1><h2 id=\"Content\"><a href=\"#Content\" class=\"headerlink\" title=\"Content\"></a>Content</h2><ol>\n<li><p>源码结构</p>\n</li>\n<li><p>环境和编译</p>\n</li>\n<li><p>核心内容  </p>\n</li>\n<li><p>1 模块  </p>\n</li>\n<li><p>2 配置</p>\n</li>\n</ol>\n<h2 id=\"1-源码结构\"><a href=\"#1-源码结构\" class=\"headerlink\" title=\"1. 源码结构\"></a>1. 源码结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev@dev:~/someip_space/vsomeip$ tree . -L 1</span><br><span class=\"line\">.</span><br><span class=\"line\">├── Android.bp</span><br><span class=\"line\">├── AUTHORS</span><br><span class=\"line\">├── CHANGES</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── config               --&gt; 示例配置文件</span><br><span class=\"line\">├── documentation        --&gt; 使用文档</span><br><span class=\"line\">├── examples             --&gt; Demo</span><br><span class=\"line\">├── exportmap.gcc        --&gt; 控制动态库的函数导出</span><br><span class=\"line\">├── implementation       --&gt; 逻辑代码实现</span><br><span class=\"line\">├── interface            --&gt; 代码接口设计</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── LICENSE_boost</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── <span class=\"built_in\">test</span>                 --&gt; 测试代码</span><br><span class=\"line\">├── tools                --&gt; some_ctrl 工具</span><br><span class=\"line\">├── vsomeip3Config.cmake.in            --|</span><br><span class=\"line\">├── vsomeip3ConfigVersion.cmake.in       |</span><br><span class=\"line\">├── vsomeip3.pc.in                       |</span><br><span class=\"line\">├── vsomeipConfig.cmake.in               | ==&gt; cmake 配置</span><br><span class=\"line\">├── vsomeipConfigVersion.cmake.in        |</span><br><span class=\"line\">├── vsomeip.pc.in                        |</span><br><span class=\"line\">└── vsomeip.xml                        --|</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>核心代码都在 implementation</p>\n</blockquote>\n<h3 id=\"implementation\"><a href=\"#implementation\" class=\"headerlink\" title=\"implementation\"></a>implementation</h3><p><img src=\"../imgs/00_overview_source_arch.png\" alt=\"arch\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev@dev:~/someip_space/vsomeip/implementation$ tree . -L 1</span><br><span class=\"line\">.</span><br><span class=\"line\">├── compat                 --&gt; 3.x 和 2.x 兼容层</span><br><span class=\"line\">├── configuration          --&gt; 配置模块: 配置读取,加载; 插件配置</span><br><span class=\"line\">├── e2e_protection         --&gt; e2e模块</span><br><span class=\"line\">├── endpoints              --&gt; client/server, tcp/udp, TP endpoint 实现</span><br><span class=\"line\">├── helper                 --&gt; boost 兼容层</span><br><span class=\"line\">├── logger                 --&gt; logger</span><br><span class=\"line\">├── message                --&gt; message, payload, (反)序列化 实现</span><br><span class=\"line\">├── plugin                 --&gt; 插件模块: 插件管理</span><br><span class=\"line\">├── routing                --&gt; 路由模块 </span><br><span class=\"line\">├── runtime                --&gt; 运行时: 管理 APP , runtime 资源</span><br><span class=\"line\">├── security               --&gt; 安全模块: policy, credentials </span><br><span class=\"line\">├── service_discovery      --&gt; 服务发现: </span><br><span class=\"line\">                                    发现注册模块, </span><br><span class=\"line\">                                    IPv4/IPv6 Options, </span><br><span class=\"line\">                                    负载均衡, </span><br><span class=\"line\">                                    远程订阅</span><br><span class=\"line\">├── tracing                --&gt; tracing: 配置 dlt-daemon</span><br><span class=\"line\">└── utility                --&gt; 通用工具</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-环境和编译\"><a href=\"#2-环境和编译\" class=\"headerlink\" title=\"2. 环境和编译\"></a>2. 环境和编译</h2><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>OS环境:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsb_release -a</span><br><span class=\"line\">No LSB modules are available.</span><br><span class=\"line\">Distributor ID:\tUbuntu</span><br><span class=\"line\">Description:\tUbuntu 21.04</span><br><span class=\"line\">Release:\t21.04</span><br><span class=\"line\">Codename:\thirsute</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实测 18.04 也没有问题, 官方推荐14.04 及以上</p>\n</blockquote>\n<h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><ul>\n<li>CMake</li>\n</ul>\n<blockquote>\n<p>ref : <a href=\"https://apt.kitware.com/\">https://apt.kitware.com/</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For Ubuntu Bionic Beaver (18.04) and newer:</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install gpg wget</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Xenial Xerus (16.04):</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apt-transport-https wget</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Obtain a copy of our signing key:</span></span><br><span class=\"line\">wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2&gt;/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the repository to your sources list and update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Focal Fossa (20.04):</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main&#x27;</span> | sudo tee /etc/apt/sources.list.d/kitware.list &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Bionic Beaver (18.04):</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main&#x27;</span> | sudo tee /etc/apt/sources.list.d/kitware.list &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Xenial Xerus (16.04):</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ xenial main&#x27;</span> | sudo tee /etc/apt/sources.list.d/kitware.list &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install the kitware-archive-keyring package to ensure that your keyring stays up to date as we rotate our keys:</span></span><br><span class=\"line\">sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg</span><br><span class=\"line\">sudo apt-get install kitware-archive-keyring</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install cmake</span></span><br><span class=\"line\">sudo apt-get install cmake</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>g++ / clang++</p>\n<p>需要支持 C++11 , 因为使用了很多 C++11 的特性, 如 <code>std::bind</code></p>\n</li>\n<li><p>boost 1.71</p>\n<p>1.71 刚好和 DoIP boost版本保持一致</p>\n<ul>\n<li><p>repo, (master branch) </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ethernet/boost_1_71_0</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"可选\"><a href=\"#可选\" class=\"headerlink\" title=\"可选\"></a>可选</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译文档</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install -y asciidoc source-highlight doxygen graphviz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pkg-config 配合make install</span></span><br><span class=\"line\"><span class=\"comment\"># Return metainformation about installed libraries</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install -y pkg-config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译-amp-安装\"><a href=\"#编译-amp-安装\" class=\"headerlink\" title=\"编译&amp;安装\"></a>编译&amp;安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vsomeip-3.1.20/</span><br><span class=\"line\">mkdir build;<span class=\"built_in\">cd</span> build;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认配置</span></span><br><span class=\"line\">cmake ..</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  自定义</span></span><br><span class=\"line\"><span class=\"comment\"># install path</span></span><br><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX:PATH=<span class=\"variable\">$YOUR_PATH</span> ..</span><br><span class=\"line\"><span class=\"comment\"># ip addr</span></span><br><span class=\"line\">cmake -DUNICAST_ADDRESS=&lt;YOUR IP ADDRESS&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># diagnosis addr</span></span><br><span class=\"line\">cmake -DDIAGNOSIS_ADDRESS=&lt;YOUR DIAGNOSIS ADDRESS&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># configuration folder</span></span><br><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FOLDER=&lt;DEFAULT CONFIGURATION FOLDER&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># default configuration file</span></span><br><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FILE=&lt;DEFAULT CONFIGURATION FILE&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># signal handling</span></span><br><span class=\"line\">cmake -DENABLE_SIGNAL_HANDLING=1 ..</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\"></span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tool: vsomeip_ctrl</span></span><br><span class=\"line\">make vsomeip_ctrl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-核心内容\"><a href=\"#3-核心内容\" class=\"headerlink\" title=\"3. 核心内容\"></a>3. 核心内容</h2><h3 id=\"3-1-模块\"><a href=\"#3-1-模块\" class=\"headerlink\" title=\"3.1 模块\"></a>3.1 模块</h3><p>自上而下来看可以划分为以下:</p>\n<ul>\n<li><p>runtime</p>\n</li>\n<li><p>application</p>\n</li>\n<li><p>messgae</p>\n</li>\n<li><p>payload</p>\n</li>\n</ul>\n<h4 id=\"runtime\"><a href=\"#runtime\" class=\"headerlink\" title=\"runtime\"></a><strong>runtime</strong></h4><p><img src=\"../imgs/vSOMEIP_source_runtime.png\" alt=\"runtime\"></p>\n<p>上图为runtime 类在代码中与其他类的关系.</p>\n<p>这个类主要用于创建和管理其他所有公共资源和获取runtime属性。<br>管理的资源包括:</p>\n<ul>\n<li><p>application</p>\n</li>\n<li><p>message</p>\n</li>\n<li><p>payload</p>\n</li>\n</ul>\n<p>主要的功能函数:</p>\n<ul>\n<li><p>get</p>\n<ul>\n<li><code>runtime</code></li>\n<li><code>application</code></li>\n</ul>\n</li>\n<li><p>set/get_property:</p>\n<ul>\n<li><code>map&lt;string, string&gt;</code></li>\n</ul>\n</li>\n<li><p>create_xxx</p>\n<ul>\n<li><code>application</code></li>\n<li><code>message</code></li>\n<li><code>request</code></li>\n<li><code>response</code></li>\n<li><code>notification</code></li>\n<li><code>payload</code></li>\n</ul>\n</li>\n<li><p>remove_application</p>\n</li>\n</ul>\n<h4 id=\"application\"><a href=\"#application\" class=\"headerlink\" title=\"application\"></a><strong>application</strong></h4><p><strong>最核心的一个部分</strong></p>\n<p>每个客户端都存在且仅存在一份。<br>Application可以通过Runtime的接口来实例化。<br>管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。</p>\n<p>管理的资源:</p>\n<ul>\n<li>plugin</li>\n<li>configuration</li>\n<li>routing</li>\n<li>endpoint</li>\n<li>security</li>\n<li>connector</li>\n</ul>\n<h5 id=\"函数实现\"><a href=\"#函数实现\" class=\"headerlink\" title=\"函数实现:\"></a>函数实现:</h5><p>自身状态管理:</p>\n<ul>\n<li>init</li>\n<li>start</li>\n<li>stop</li>\n<li>process</li>\n<li>is_available </li>\n<li>are_available </li>\n<li>is_routing</li>\n</ul>\n<p>属性:</p>\n<ul>\n<li>get_name</li>\n<li>get_client</li>\n<li>get_diagnosis</li>\n<li>get_security_mode</li>\n<li>get_offered_services_async </li>\n<li>get_sd_acceptance_required</li>\n<li>set_routing_state</li>\n<li>set_sd_acceptance_required </li>\n<li>set_sd_acceptance_required</li>\n</ul>\n<p>handler 类(调用client 传入的函数):</p>\n<ul>\n<li><p>register_state_handler</p>\n</li>\n<li><p>unregister_state_handler</p>\n</li>\n<li><p>register_message_handler </p>\n</li>\n<li><p>unregister_message_handler </p>\n</li>\n<li><p>register_availability_handler</p>\n</li>\n<li><p>unregister_availability_handler </p>\n</li>\n<li><p>register_subscription_handler </p>\n</li>\n<li><p>register_async_subscription_handler</p>\n</li>\n<li><p>register_subscription_status_handler </p>\n</li>\n<li><p>unregister_subscription_status_handler</p>\n</li>\n<li><p>unregister_subscription_handler </p>\n</li>\n<li><p>register_routing_ready_handler </p>\n</li>\n<li><p>register_routing_state_handler </p>\n</li>\n<li><p>clear_all_handler </p>\n</li>\n<li><p>register_sd_acceptance_handler </p>\n</li>\n<li><p>register_reboot_notification_handler </p>\n</li>\n<li><p>set_watchdog_handler </p>\n</li>\n</ul>\n<p>消息服务类:</p>\n<ul>\n<li><p>update_service_configuration </p>\n</li>\n<li><p>update_security_policy_configuration</p>\n</li>\n<li><p>remove_security_policy_configuration </p>\n</li>\n<li><p>offer_service </p>\n</li>\n<li><p>stop_offer_service</p>\n</li>\n<li><p>offer_event </p>\n</li>\n<li><p>stop_offer_event</p>\n</li>\n<li><p>request_service </p>\n</li>\n<li><p>release_service</p>\n</li>\n<li><p>request_event </p>\n</li>\n<li><p>release_event </p>\n</li>\n<li><p>subscribe</p>\n</li>\n<li><p>unsubscribe</p>\n</li>\n<li><p>send </p>\n</li>\n<li><p>notify </p>\n</li>\n<li><p>notify_one </p>\n</li>\n</ul>\n<h4 id=\"messgae-amp-payload\"><a href=\"#messgae-amp-payload\" class=\"headerlink\" title=\"messgae &amp; payload\"></a><strong>messgae &amp; payload</strong></h4><p><img src=\"../imgs/vSOMEIP_source_messages_arch.png\" alt=\"msg_arch\"></p>\n<p>message &amp; payload 模块与其他模块之间的交互;<br>主要负责 <code>set/get</code> 相关的属性(session, payload, id…), (反)序列化功能.</p>\n<p>由以下 <code>.cpp</code> 文件实现功能:</p>\n<ul>\n<li>message_base_impl.cpp</li>\n<li>message_header_impl.cpp</li>\n<li>message_impl.cpp</li>\n<li>payload_impl.cpp</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"VSOMEIP-源码学习分享-之-手摸手编译安装过源码\"><a href=\"#VSOMEIP-源码学习分享-之-手摸手编译安装过源码\" class=\"headerlink\" title=\"VSOMEIP 源码学习分享 之 手摸手编译安装过源码\"></a>VSOMEIP 源码学习分享 之 手摸手编译安装过源码</h1><h2 id=\"Content\"><a href=\"#Content\" class=\"headerlink\" title=\"Content\"></a>Content</h2><ol>\n<li><p>源码结构</p>\n</li>\n<li><p>环境和编译</p>\n</li>\n<li><p>核心内容  </p>\n</li>\n<li><p>1 模块  </p>\n</li>\n<li><p>2 配置</p>\n</li>\n</ol>\n<h2 id=\"1-源码结构\"><a href=\"#1-源码结构\" class=\"headerlink\" title=\"1. 源码结构\"></a>1. 源码结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev@dev:~/someip_space/vsomeip$ tree . -L 1</span><br><span class=\"line\">.</span><br><span class=\"line\">├── Android.bp</span><br><span class=\"line\">├── AUTHORS</span><br><span class=\"line\">├── CHANGES</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── config               --&gt; 示例配置文件</span><br><span class=\"line\">├── documentation        --&gt; 使用文档</span><br><span class=\"line\">├── examples             --&gt; Demo</span><br><span class=\"line\">├── exportmap.gcc        --&gt; 控制动态库的函数导出</span><br><span class=\"line\">├── implementation       --&gt; 逻辑代码实现</span><br><span class=\"line\">├── interface            --&gt; 代码接口设计</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── LICENSE_boost</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── <span class=\"built_in\">test</span>                 --&gt; 测试代码</span><br><span class=\"line\">├── tools                --&gt; some_ctrl 工具</span><br><span class=\"line\">├── vsomeip3Config.cmake.in            --|</span><br><span class=\"line\">├── vsomeip3ConfigVersion.cmake.in       |</span><br><span class=\"line\">├── vsomeip3.pc.in                       |</span><br><span class=\"line\">├── vsomeipConfig.cmake.in               | ==&gt; cmake 配置</span><br><span class=\"line\">├── vsomeipConfigVersion.cmake.in        |</span><br><span class=\"line\">├── vsomeip.pc.in                        |</span><br><span class=\"line\">└── vsomeip.xml                        --|</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>核心代码都在 implementation</p>\n</blockquote>\n<h3 id=\"implementation\"><a href=\"#implementation\" class=\"headerlink\" title=\"implementation\"></a>implementation</h3><p><img src=\"../imgs/00_overview_source_arch.png\" alt=\"arch\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev@dev:~/someip_space/vsomeip/implementation$ tree . -L 1</span><br><span class=\"line\">.</span><br><span class=\"line\">├── compat                 --&gt; 3.x 和 2.x 兼容层</span><br><span class=\"line\">├── configuration          --&gt; 配置模块: 配置读取,加载; 插件配置</span><br><span class=\"line\">├── e2e_protection         --&gt; e2e模块</span><br><span class=\"line\">├── endpoints              --&gt; client/server, tcp/udp, TP endpoint 实现</span><br><span class=\"line\">├── helper                 --&gt; boost 兼容层</span><br><span class=\"line\">├── logger                 --&gt; logger</span><br><span class=\"line\">├── message                --&gt; message, payload, (反)序列化 实现</span><br><span class=\"line\">├── plugin                 --&gt; 插件模块: 插件管理</span><br><span class=\"line\">├── routing                --&gt; 路由模块 </span><br><span class=\"line\">├── runtime                --&gt; 运行时: 管理 APP , runtime 资源</span><br><span class=\"line\">├── security               --&gt; 安全模块: policy, credentials </span><br><span class=\"line\">├── service_discovery      --&gt; 服务发现: </span><br><span class=\"line\">                                    发现注册模块, </span><br><span class=\"line\">                                    IPv4/IPv6 Options, </span><br><span class=\"line\">                                    负载均衡, </span><br><span class=\"line\">                                    远程订阅</span><br><span class=\"line\">├── tracing                --&gt; tracing: 配置 dlt-daemon</span><br><span class=\"line\">└── utility                --&gt; 通用工具</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-环境和编译\"><a href=\"#2-环境和编译\" class=\"headerlink\" title=\"2. 环境和编译\"></a>2. 环境和编译</h2><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>OS环境:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsb_release -a</span><br><span class=\"line\">No LSB modules are available.</span><br><span class=\"line\">Distributor ID:\tUbuntu</span><br><span class=\"line\">Description:\tUbuntu 21.04</span><br><span class=\"line\">Release:\t21.04</span><br><span class=\"line\">Codename:\thirsute</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实测 18.04 也没有问题, 官方推荐14.04 及以上</p>\n</blockquote>\n<h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><ul>\n<li>CMake</li>\n</ul>\n<blockquote>\n<p>ref : <a href=\"https://apt.kitware.com/\">https://apt.kitware.com/</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For Ubuntu Bionic Beaver (18.04) and newer:</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install gpg wget</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Xenial Xerus (16.04):</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apt-transport-https wget</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Obtain a copy of our signing key:</span></span><br><span class=\"line\">wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2&gt;/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the repository to your sources list and update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Focal Fossa (20.04):</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main&#x27;</span> | sudo tee /etc/apt/sources.list.d/kitware.list &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Bionic Beaver (18.04):</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main&#x27;</span> | sudo tee /etc/apt/sources.list.d/kitware.list &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Xenial Xerus (16.04):</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ xenial main&#x27;</span> | sudo tee /etc/apt/sources.list.d/kitware.list &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install the kitware-archive-keyring package to ensure that your keyring stays up to date as we rotate our keys:</span></span><br><span class=\"line\">sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg</span><br><span class=\"line\">sudo apt-get install kitware-archive-keyring</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install cmake</span></span><br><span class=\"line\">sudo apt-get install cmake</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>g++ / clang++</p>\n<p>需要支持 C++11 , 因为使用了很多 C++11 的特性, 如 <code>std::bind</code></p>\n</li>\n<li><p>boost 1.71</p>\n<p>1.71 刚好和 DoIP boost版本保持一致</p>\n<ul>\n<li><p>repo, (master branch) </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ethernet/boost_1_71_0</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"可选\"><a href=\"#可选\" class=\"headerlink\" title=\"可选\"></a>可选</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译文档</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install -y asciidoc source-highlight doxygen graphviz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pkg-config 配合make install</span></span><br><span class=\"line\"><span class=\"comment\"># Return metainformation about installed libraries</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install -y pkg-config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译-amp-安装\"><a href=\"#编译-amp-安装\" class=\"headerlink\" title=\"编译&amp;安装\"></a>编译&amp;安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vsomeip-3.1.20/</span><br><span class=\"line\">mkdir build;<span class=\"built_in\">cd</span> build;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认配置</span></span><br><span class=\"line\">cmake ..</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  自定义</span></span><br><span class=\"line\"><span class=\"comment\"># install path</span></span><br><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX:PATH=<span class=\"variable\">$YOUR_PATH</span> ..</span><br><span class=\"line\"><span class=\"comment\"># ip addr</span></span><br><span class=\"line\">cmake -DUNICAST_ADDRESS=&lt;YOUR IP ADDRESS&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># diagnosis addr</span></span><br><span class=\"line\">cmake -DDIAGNOSIS_ADDRESS=&lt;YOUR DIAGNOSIS ADDRESS&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># configuration folder</span></span><br><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FOLDER=&lt;DEFAULT CONFIGURATION FOLDER&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># default configuration file</span></span><br><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FILE=&lt;DEFAULT CONFIGURATION FILE&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># signal handling</span></span><br><span class=\"line\">cmake -DENABLE_SIGNAL_HANDLING=1 ..</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\"></span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tool: vsomeip_ctrl</span></span><br><span class=\"line\">make vsomeip_ctrl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-核心内容\"><a href=\"#3-核心内容\" class=\"headerlink\" title=\"3. 核心内容\"></a>3. 核心内容</h2><h3 id=\"3-1-模块\"><a href=\"#3-1-模块\" class=\"headerlink\" title=\"3.1 模块\"></a>3.1 模块</h3><p>自上而下来看可以划分为以下:</p>\n<ul>\n<li><p>runtime</p>\n</li>\n<li><p>application</p>\n</li>\n<li><p>messgae</p>\n</li>\n<li><p>payload</p>\n</li>\n</ul>\n<h4 id=\"runtime\"><a href=\"#runtime\" class=\"headerlink\" title=\"runtime\"></a><strong>runtime</strong></h4><p><img src=\"../imgs/vSOMEIP_source_runtime.png\" alt=\"runtime\"></p>\n<p>上图为runtime 类在代码中与其他类的关系.</p>\n<p>这个类主要用于创建和管理其他所有公共资源和获取runtime属性。<br>管理的资源包括:</p>\n<ul>\n<li><p>application</p>\n</li>\n<li><p>message</p>\n</li>\n<li><p>payload</p>\n</li>\n</ul>\n<p>主要的功能函数:</p>\n<ul>\n<li><p>get</p>\n<ul>\n<li><code>runtime</code></li>\n<li><code>application</code></li>\n</ul>\n</li>\n<li><p>set/get_property:</p>\n<ul>\n<li><code>map&lt;string, string&gt;</code></li>\n</ul>\n</li>\n<li><p>create_xxx</p>\n<ul>\n<li><code>application</code></li>\n<li><code>message</code></li>\n<li><code>request</code></li>\n<li><code>response</code></li>\n<li><code>notification</code></li>\n<li><code>payload</code></li>\n</ul>\n</li>\n<li><p>remove_application</p>\n</li>\n</ul>\n<h4 id=\"application\"><a href=\"#application\" class=\"headerlink\" title=\"application\"></a><strong>application</strong></h4><p><strong>最核心的一个部分</strong></p>\n<p>每个客户端都存在且仅存在一份。<br>Application可以通过Runtime的接口来实例化。<br>管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。</p>\n<p>管理的资源:</p>\n<ul>\n<li>plugin</li>\n<li>configuration</li>\n<li>routing</li>\n<li>endpoint</li>\n<li>security</li>\n<li>connector</li>\n</ul>\n<h5 id=\"函数实现\"><a href=\"#函数实现\" class=\"headerlink\" title=\"函数实现:\"></a>函数实现:</h5><p>自身状态管理:</p>\n<ul>\n<li>init</li>\n<li>start</li>\n<li>stop</li>\n<li>process</li>\n<li>is_available </li>\n<li>are_available </li>\n<li>is_routing</li>\n</ul>\n<p>属性:</p>\n<ul>\n<li>get_name</li>\n<li>get_client</li>\n<li>get_diagnosis</li>\n<li>get_security_mode</li>\n<li>get_offered_services_async </li>\n<li>get_sd_acceptance_required</li>\n<li>set_routing_state</li>\n<li>set_sd_acceptance_required </li>\n<li>set_sd_acceptance_required</li>\n</ul>\n<p>handler 类(调用client 传入的函数):</p>\n<ul>\n<li><p>register_state_handler</p>\n</li>\n<li><p>unregister_state_handler</p>\n</li>\n<li><p>register_message_handler </p>\n</li>\n<li><p>unregister_message_handler </p>\n</li>\n<li><p>register_availability_handler</p>\n</li>\n<li><p>unregister_availability_handler </p>\n</li>\n<li><p>register_subscription_handler </p>\n</li>\n<li><p>register_async_subscription_handler</p>\n</li>\n<li><p>register_subscription_status_handler </p>\n</li>\n<li><p>unregister_subscription_status_handler</p>\n</li>\n<li><p>unregister_subscription_handler </p>\n</li>\n<li><p>register_routing_ready_handler </p>\n</li>\n<li><p>register_routing_state_handler </p>\n</li>\n<li><p>clear_all_handler </p>\n</li>\n<li><p>register_sd_acceptance_handler </p>\n</li>\n<li><p>register_reboot_notification_handler </p>\n</li>\n<li><p>set_watchdog_handler </p>\n</li>\n</ul>\n<p>消息服务类:</p>\n<ul>\n<li><p>update_service_configuration </p>\n</li>\n<li><p>update_security_policy_configuration</p>\n</li>\n<li><p>remove_security_policy_configuration </p>\n</li>\n<li><p>offer_service </p>\n</li>\n<li><p>stop_offer_service</p>\n</li>\n<li><p>offer_event </p>\n</li>\n<li><p>stop_offer_event</p>\n</li>\n<li><p>request_service </p>\n</li>\n<li><p>release_service</p>\n</li>\n<li><p>request_event </p>\n</li>\n<li><p>release_event </p>\n</li>\n<li><p>subscribe</p>\n</li>\n<li><p>unsubscribe</p>\n</li>\n<li><p>send </p>\n</li>\n<li><p>notify </p>\n</li>\n<li><p>notify_one </p>\n</li>\n</ul>\n<h4 id=\"messgae-amp-payload\"><a href=\"#messgae-amp-payload\" class=\"headerlink\" title=\"messgae &amp; payload\"></a><strong>messgae &amp; payload</strong></h4><p><img src=\"../imgs/vSOMEIP_source_messages_arch.png\" alt=\"msg_arch\"></p>\n<p>message &amp; payload 模块与其他模块之间的交互;<br>主要负责 <code>set/get</code> 相关的属性(session, payload, id…), (反)序列化功能.</p>\n<p>由以下 <code>.cpp</code> 文件实现功能:</p>\n<ul>\n<li>message_base_impl.cpp</li>\n<li>message_header_impl.cpp</li>\n<li>message_impl.cpp</li>\n<li>payload_impl.cpp</li>\n</ul>\n"},{"title":"对象创建限制在堆或栈","date":"2022-01-08T15:20:16.000Z","_content":"\n### 如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\n\nC++ 中的类的对象的建立分为两种：静态建立、动态建立。\n\n* 静态建立：\n  由编译器为对象在栈空间上分配内存，直接调用类的构造函数创建对象。例如：A a;\n\n* 动态建立：\n  使用 `new` 关键字在堆空间上创建对象，底层首先调用 `operator new()` 函数，在堆空间上寻找合适的内存并分配；然后，调用类的构造函数创建对象。\n  例如：`A *p = new A()`;\n\n### 限制对象只能建立在堆上：\n\n最直观的思想：\n避免直接调用类的构造函数，因为对象静态建立时，会调用类的构造函数创建对象。\n但是直接将类的构造函数设为私有并不可行，因为当构造函数设置为私有后，不能在类的外部调用构造函数来构造对象，只能用 `new` 来建立对象。\n但是由于 new 创建对象时，底层也会调用类的构造函数，将构造函数设置为私有后，那就无法在类的外部使用 `new` 创建对象了。因此，这种方法不可行。\n\n#### 解决方法 1：\n\n将析构函数设置为私有。\n原因：静态对象建立在栈上，是由编译器分配和释放内存空间，编译器为对象分配内存空间时，会对类的非静态函数进行检查，即编译器会检查析构函数的访问性。\n当析构函数设为私有时，编译器创建的对象就无法通过访问析构函数来释放对象的内存空间，因此，编译器不会在栈上为对象分配内存。\n\n```C++\n\nclass A\n{\npublic:\n    A() {}\n    void destory()\n    {\n        delete this;\n    }\n\nprivate:\n    ~A()\n    {\n    }\n};\n```\n\n该方法存在的问题：\n\n用 `new` 创建的对象，通常会使用 `delete` 释放该对象的内存空间，但此时类的外部无法调用析构函数，因此类内必须定义一个 `destory()` 函数，用来释放 new 创建的对象。\n\n无法解决继承问题，因为如果这个类作为基类，析构函数要设置成`virtual`，然后在派生类中重写该函数，来实现多态。但此时，析构函数是私有的，派生类中无法访问。\n\n#### 解决方法 2：\n\n构造函数设置为 `protected`，并提供一个 `public` 的静态函数来完成构造，而不是在类的外部使用 new 构造；\n将析构函数设置为 `protected` 。\n原因：类似于单例模式，也保证了在派生类中能够访问析构函数。通过调用 `create()` 函数在堆上创建对象。\n\n```C++\n\nclass A\n{\nprotected:\n    A() {}\n    ~A() {}\n\npublic:\n    static A *create()\n    {\n        return new A();\n    }\n    void destory()\n    {\n        delete this;\n    }\n};\n```\n### 限制对象只能建立在栈上：\n\n解决方法：将 `operator new()` 设置为私有。\n\n原因：当对象建立在堆上时，是采用 `new` 的方式进行建立，其底层会调用` operator new()` 函数，\n因此只要对该函数加以限制，就能够防止对象建立在堆上。\n\n```C++\n\nclass A\n{\nprivate:\n    void *operator new(size_t t) {}    // 注意函数的第一个参数和返回值都是固定的\n    void operator delete(void *ptr) {} // 重载了 new 就需要重载 delete\npublic:\n    A() {}\n    ~A() {}\n};\n```\n","source":"_posts/对象创建限制在堆或栈.md","raw":"---\ntitle: 对象创建限制在堆或栈\ndate: 2022-01-08 23:20:16\ntags:\n    - cpp\n---\n\n### 如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\n\nC++ 中的类的对象的建立分为两种：静态建立、动态建立。\n\n* 静态建立：\n  由编译器为对象在栈空间上分配内存，直接调用类的构造函数创建对象。例如：A a;\n\n* 动态建立：\n  使用 `new` 关键字在堆空间上创建对象，底层首先调用 `operator new()` 函数，在堆空间上寻找合适的内存并分配；然后，调用类的构造函数创建对象。\n  例如：`A *p = new A()`;\n\n### 限制对象只能建立在堆上：\n\n最直观的思想：\n避免直接调用类的构造函数，因为对象静态建立时，会调用类的构造函数创建对象。\n但是直接将类的构造函数设为私有并不可行，因为当构造函数设置为私有后，不能在类的外部调用构造函数来构造对象，只能用 `new` 来建立对象。\n但是由于 new 创建对象时，底层也会调用类的构造函数，将构造函数设置为私有后，那就无法在类的外部使用 `new` 创建对象了。因此，这种方法不可行。\n\n#### 解决方法 1：\n\n将析构函数设置为私有。\n原因：静态对象建立在栈上，是由编译器分配和释放内存空间，编译器为对象分配内存空间时，会对类的非静态函数进行检查，即编译器会检查析构函数的访问性。\n当析构函数设为私有时，编译器创建的对象就无法通过访问析构函数来释放对象的内存空间，因此，编译器不会在栈上为对象分配内存。\n\n```C++\n\nclass A\n{\npublic:\n    A() {}\n    void destory()\n    {\n        delete this;\n    }\n\nprivate:\n    ~A()\n    {\n    }\n};\n```\n\n该方法存在的问题：\n\n用 `new` 创建的对象，通常会使用 `delete` 释放该对象的内存空间，但此时类的外部无法调用析构函数，因此类内必须定义一个 `destory()` 函数，用来释放 new 创建的对象。\n\n无法解决继承问题，因为如果这个类作为基类，析构函数要设置成`virtual`，然后在派生类中重写该函数，来实现多态。但此时，析构函数是私有的，派生类中无法访问。\n\n#### 解决方法 2：\n\n构造函数设置为 `protected`，并提供一个 `public` 的静态函数来完成构造，而不是在类的外部使用 new 构造；\n将析构函数设置为 `protected` 。\n原因：类似于单例模式，也保证了在派生类中能够访问析构函数。通过调用 `create()` 函数在堆上创建对象。\n\n```C++\n\nclass A\n{\nprotected:\n    A() {}\n    ~A() {}\n\npublic:\n    static A *create()\n    {\n        return new A();\n    }\n    void destory()\n    {\n        delete this;\n    }\n};\n```\n### 限制对象只能建立在栈上：\n\n解决方法：将 `operator new()` 设置为私有。\n\n原因：当对象建立在堆上时，是采用 `new` 的方式进行建立，其底层会调用` operator new()` 函数，\n因此只要对该函数加以限制，就能够防止对象建立在堆上。\n\n```C++\n\nclass A\n{\nprivate:\n    void *operator new(size_t t) {}    // 注意函数的第一个参数和返回值都是固定的\n    void operator delete(void *ptr) {} // 重载了 new 就需要重载 delete\npublic:\n    A() {}\n    ~A() {}\n};\n```\n","slug":"对象创建限制在堆或栈","published":1,"updated":"2022-01-09T15:25:34.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtvo000pz59y7kg5bpkb","content":"<h3 id=\"如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\"><a href=\"#如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\" class=\"headerlink\" title=\"如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\"></a>如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？</h3><p>C++ 中的类的对象的建立分为两种：静态建立、动态建立。</p>\n<ul>\n<li><p>静态建立：<br>由编译器为对象在栈空间上分配内存，直接调用类的构造函数创建对象。例如：A a;</p>\n</li>\n<li><p>动态建立：<br>使用 <code>new</code> 关键字在堆空间上创建对象，底层首先调用 <code>operator new()</code> 函数，在堆空间上寻找合适的内存并分配；然后，调用类的构造函数创建对象。<br>例如：<code>A *p = new A()</code>;</p>\n</li>\n</ul>\n<h3 id=\"限制对象只能建立在堆上：\"><a href=\"#限制对象只能建立在堆上：\" class=\"headerlink\" title=\"限制对象只能建立在堆上：\"></a>限制对象只能建立在堆上：</h3><p>最直观的思想：<br>避免直接调用类的构造函数，因为对象静态建立时，会调用类的构造函数创建对象。<br>但是直接将类的构造函数设为私有并不可行，因为当构造函数设置为私有后，不能在类的外部调用构造函数来构造对象，只能用 <code>new</code> 来建立对象。<br>但是由于 new 创建对象时，底层也会调用类的构造函数，将构造函数设置为私有后，那就无法在类的外部使用 <code>new</code> 创建对象了。因此，这种方法不可行。</p>\n<h4 id=\"解决方法-1：\"><a href=\"#解决方法-1：\" class=\"headerlink\" title=\"解决方法 1：\"></a>解决方法 1：</h4><p>将析构函数设置为私有。<br>原因：静态对象建立在栈上，是由编译器分配和释放内存空间，编译器为对象分配内存空间时，会对类的非静态函数进行检查，即编译器会检查析构函数的访问性。<br>当析构函数设为私有时，编译器创建的对象就无法通过访问析构函数来释放对象的内存空间，因此，编译器不会在栈上为对象分配内存。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destory</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>该方法存在的问题：</p>\n<p>用 <code>new</code> 创建的对象，通常会使用 <code>delete</code> 释放该对象的内存空间，但此时类的外部无法调用析构函数，因此类内必须定义一个 <code>destory()</code> 函数，用来释放 new 创建的对象。</p>\n<p>无法解决继承问题，因为如果这个类作为基类，析构函数要设置成<code>virtual</code>，然后在派生类中重写该函数，来实现多态。但此时，析构函数是私有的，派生类中无法访问。</p>\n<h4 id=\"解决方法-2：\"><a href=\"#解决方法-2：\" class=\"headerlink\" title=\"解决方法 2：\"></a>解决方法 2：</h4><p>构造函数设置为 <code>protected</code>，并提供一个 <code>public</code> 的静态函数来完成构造，而不是在类的外部使用 new 构造；<br>将析构函数设置为 <code>protected</code> 。<br>原因：类似于单例模式，也保证了在派生类中能够访问析构函数。通过调用 <code>create()</code> 函数在堆上创建对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> A *<span class=\"title\">create</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">A</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destory</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制对象只能建立在栈上：\"><a href=\"#限制对象只能建立在栈上：\" class=\"headerlink\" title=\"限制对象只能建立在栈上：\"></a>限制对象只能建立在栈上：</h3><p>解决方法：将 <code>operator new()</code> 设置为私有。</p>\n<p>原因：当对象建立在堆上时，是采用 <code>new</code> 的方式进行建立，其底层会调用<code> operator new()</code> 函数，<br>因此只要对该函数加以限制，就能够防止对象建立在堆上。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"keyword\">operator</span> <span class=\"title\">new</span><span class=\"params\">(<span class=\"keyword\">size_t</span> t)</span> </span>&#123;&#125;    <span class=\"comment\">// 注意函数的第一个参数和返回值都是固定的</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"keyword\">operator</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">void</span> *ptr)</span> </span>&#123;&#125; <span class=\"comment\">// 重载了 new 就需要重载 delete</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\"><a href=\"#如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\" class=\"headerlink\" title=\"如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\"></a>如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？</h3><p>C++ 中的类的对象的建立分为两种：静态建立、动态建立。</p>\n<ul>\n<li><p>静态建立：<br>由编译器为对象在栈空间上分配内存，直接调用类的构造函数创建对象。例如：A a;</p>\n</li>\n<li><p>动态建立：<br>使用 <code>new</code> 关键字在堆空间上创建对象，底层首先调用 <code>operator new()</code> 函数，在堆空间上寻找合适的内存并分配；然后，调用类的构造函数创建对象。<br>例如：<code>A *p = new A()</code>;</p>\n</li>\n</ul>\n<h3 id=\"限制对象只能建立在堆上：\"><a href=\"#限制对象只能建立在堆上：\" class=\"headerlink\" title=\"限制对象只能建立在堆上：\"></a>限制对象只能建立在堆上：</h3><p>最直观的思想：<br>避免直接调用类的构造函数，因为对象静态建立时，会调用类的构造函数创建对象。<br>但是直接将类的构造函数设为私有并不可行，因为当构造函数设置为私有后，不能在类的外部调用构造函数来构造对象，只能用 <code>new</code> 来建立对象。<br>但是由于 new 创建对象时，底层也会调用类的构造函数，将构造函数设置为私有后，那就无法在类的外部使用 <code>new</code> 创建对象了。因此，这种方法不可行。</p>\n<h4 id=\"解决方法-1：\"><a href=\"#解决方法-1：\" class=\"headerlink\" title=\"解决方法 1：\"></a>解决方法 1：</h4><p>将析构函数设置为私有。<br>原因：静态对象建立在栈上，是由编译器分配和释放内存空间，编译器为对象分配内存空间时，会对类的非静态函数进行检查，即编译器会检查析构函数的访问性。<br>当析构函数设为私有时，编译器创建的对象就无法通过访问析构函数来释放对象的内存空间，因此，编译器不会在栈上为对象分配内存。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destory</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>该方法存在的问题：</p>\n<p>用 <code>new</code> 创建的对象，通常会使用 <code>delete</code> 释放该对象的内存空间，但此时类的外部无法调用析构函数，因此类内必须定义一个 <code>destory()</code> 函数，用来释放 new 创建的对象。</p>\n<p>无法解决继承问题，因为如果这个类作为基类，析构函数要设置成<code>virtual</code>，然后在派生类中重写该函数，来实现多态。但此时，析构函数是私有的，派生类中无法访问。</p>\n<h4 id=\"解决方法-2：\"><a href=\"#解决方法-2：\" class=\"headerlink\" title=\"解决方法 2：\"></a>解决方法 2：</h4><p>构造函数设置为 <code>protected</code>，并提供一个 <code>public</code> 的静态函数来完成构造，而不是在类的外部使用 new 构造；<br>将析构函数设置为 <code>protected</code> 。<br>原因：类似于单例模式，也保证了在派生类中能够访问析构函数。通过调用 <code>create()</code> 函数在堆上创建对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> A *<span class=\"title\">create</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">A</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destory</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制对象只能建立在栈上：\"><a href=\"#限制对象只能建立在栈上：\" class=\"headerlink\" title=\"限制对象只能建立在栈上：\"></a>限制对象只能建立在栈上：</h3><p>解决方法：将 <code>operator new()</code> 设置为私有。</p>\n<p>原因：当对象建立在堆上时，是采用 <code>new</code> 的方式进行建立，其底层会调用<code> operator new()</code> 函数，<br>因此只要对该函数加以限制，就能够防止对象建立在堆上。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"keyword\">operator</span> <span class=\"title\">new</span><span class=\"params\">(<span class=\"keyword\">size_t</span> t)</span> </span>&#123;&#125;    <span class=\"comment\">// 注意函数的第一个参数和返回值都是固定的</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"keyword\">operator</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">void</span> *ptr)</span> </span>&#123;&#125; <span class=\"comment\">// 重载了 new 就需要重载 delete</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"常用位运算","date":"2021-12-05T05:57:32.000Z","_content":"\n\n## 位运算符\n\n* `&` : 对应位都为1时，结果为1\n\n* `|` : 对应位存在一个1时，结果为1\n\n* `^` : 对应位不同时，结果为1\n\n> 异或运算的逆元素是本身, 即两次异或同一个数，结果不变： `a ^ b ^ b = a`\n\n\n* `~` : 对一个数进行单目运算，把这个数的补码中的 0 和 1 全部取反，\n有符号整数的符号位在这 `~` 运算中同样会取反。\n\n> 补码： 在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。\n\n在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。\n\n$$\n5 =(00000101)_2 \\\\\n-5 =(11111010)_2 \\\\\n-5_补 =(11111011)_2 \\\\\n-(-5) =(00000100)_2 = 4\n$$\n\n\n* `<<` 和 `>>` : 将二进制向左（右）移动对应的位数的值，\n\n$$\n11 =(00001011)_2 \\\\\n11 << 3 =(01011000)_2 = 88 \\\\\n11 >> 2 =(00000010)_2 = 2\n$$\n\n> 在 C++ 中，右移操作中右侧多余的位将会被舍弃，而左侧较为复杂：\n> * 对于无符号数，会在左侧补 0；\n> * 对于有符号数，则会用最高位的数（其实就是符号位，非负数为 0，负数为 1）补齐。左移操作总是在右侧补 0。\n\n\n## 复合赋值位运算符\n\n和 `+=` , `-=` 等运算符类似，位运算也有复合赋值运算符： \n`&=` , `|=` , `^=` , `<<=` , `>>=` 。（取反是单目运算，所以没有。）\n\n> 位运算的优先级低于算术运算符（除了取反），而按位与、按位或及异或低于比较运算符，所以使用时需多加注意，在必要时添加括号。\n\n## 应用\n\n* 嵌入式中对寄存器进行按位计算，取值，置位\n\n* 高效地进行某些运算，代替其它低效的方式。\n\n* 表示集合。（常用于 状压 DP 。）\n\n* 要求进行位运算。\n\n### 常用运算\n\n|  操作\t | 运算 |\n|  --   |  -- |\n| 取出整数 n 在二进制表示下的第 k 位\t                |(n >> k) & 1        |   \n| 取出整数n 在二进制表示下的第 0 ~ k - 1 位 (后 k 位)\t | n & ((1 << k) - 1) |   \n| 对整数 n 在二进制表示下的第 k 位取反\t                | n xor (1 << k)      |\n| 对整数 n 在二进制表示下的第 k 位赋值 1\t            | n | (1 << k)        |\n| 对整数 n 在二进制表示下的第 k 位赋值 0\t            | n & (~(1 << k))     |\n\n### 表示集合\n\n| 操作\t | 集合表示  | \t位运算语句 \n| --    |    --   | --   |\n| 交集\t | a∩b\t  | a & b |\n| 并集\t | a∪b\t  | `a    |\n| 补集\t | \\overline{a}\t  | ~a （全集为二进制都是 1） |\n| 差集\t | a∖b\t  | a & (~b) |\n| 对称差 | \ta△b    |   a ^ b |\n\n\n### 实际代码\n\n* 幂运算\n\n```c\n// 乘 2 的非负整数次幂\nint mulPowerOfTwo(int n, int m) {  // 计算 n*(2^m)\n  return n << m;\n}\n\n// 除以 2 的非负整数次幂\nint divPowerOfTwo(int n, int m) {  // 计算 n/(2^m)\n  return n >> m;\n}\n\n// 对 2 的非负整数次幂取模\nint modPowerOfTwo(int x, int mod) { return x & (mod - 1); }\n\n\n// 判断一个数是不是 2 的正整数次幂\nbool isPowerOfTwo(int n) { return n > 0 && (n & (n - 1)) == 0; }\n\n// 取绝对值,在某些机器上，效率比 n > 0 ? n : -n 高。\nint Abs(int n) {\n  return (n ^ (n >> 31)) - (n >> 31);\n  /* n>>31 取得 n 的符号，若 n 为正数，n>>31 等于 0，若 n 为负数，n>>31 等于 -1\n     若 n 为正数 n^0=n, 数不变，若 n 为负数有 n^(-1)\n     需要计算 n 和 -1 的补码，然后进行异或运算，\n     结果 n 变号并且为 n 的绝对值减 1，再减去 -1 就是绝对值 */\n}\n\n// 取两个数的最大/最小值\n// 在某些机器上，效率比 a > b ? a : b 高。\n// 如果 a>=b,(a-b)>>31 为 0，否则为 -1\nint max(int a, int b) { return b & ((a - b) >> 31) | a & (~(a - b) >> 31); }\nint min(int a, int b) { return a & ((a - b) >> 31) | b & (~(a - b) >> 31); }\n\n//判断符号是否相同\nbool isSameSign(int x, int y) {  // 有 0 的情况例外\n  return (x ^ y) >= 0;\n}\n\n// 交换两个数\nvoid swap(int &a, int &b) { a ^= b ^= a ^= b; }\n\n// 获取一个数二进制的某一位\n// 获取 a 的第 b 位，最低位编号为 0\nint getBit(int a, int b) { return (a >> b) & 1; }\n\n```\n\n> 平常写除法是向 0 取整，而这里的右移是向下取整（注意这里的区别）:\n即当数大于等于 0 时两种方法等价，当数小于 0 时会有区别，如： -1 / 2 的值为 0 ，而 -1 >> 1 的值为 −1 。\n\n\n## C++ STL bitset 容器\n\nbitset 容器其实就是个01串。\n可以被看作是一个bool数组。它比bool数组更优秀的优点是：\n* 节约空间\n* 节约时间 \n* 支持基本的位运算。在bitset容器中，8位占一个字节，相比于bool数组4位一个字节的空间利用率要高很多。同时，n位的bitset在执行一次位运算的复杂度可以被看作是n/32，这都是bool数组所没有的优秀性质。\n\n包含在自带的，`bitset` 头文件中：\n\n### bitset 容器的声明\n因为bitset容器就是装01串的，所以不用在`< >`中装数据类型，这和一般的STL容器不太一样。`< >`中装01串的位数。\n\n如：（声明一个105位的bitset）\n\n```cpp\nbitset<100000> s;\n```\n\n### 对bitset容器的一些操作\n\n#### 1、常用的操作函数\n\n和其他的STL容器一样，对bitset的很多操作也是由自带函数来实现的\n\n##### count(), any(), none() \ncount，数数的意思。它的作用是数出1的个数。即s.count()返回s中有多少个1.\n```cpp\ns.count(); // s中有多少个1.\ns.any();   // s中存在0, true, 反之则为false\ns.none();  // s中不存在0， true\n```\n\n##### set(), reset(), flip() \nset()函数的作用是把bitset全部置为1.\n\n特别地，set()函数里面可以传参数。set(u,v)的意思是把bitset中的第u位变成v,v∈0/1。\n```cpp\ns.set(); // 全部置为1\ns.set(u,v); // 第u位变成v,v∈0/1\n\ns.reset(); // 所有位置为0\ns.reset(k); // 第k位变成0\n\ns.flip(); //全部按位取反\ns.flip(k);// 第k位取反\n```\n\n#### 2、位运算操作在bitset中的实现\nbitset的作用就是帮助我们方便地实现位运算的相关操作。它当然支持位运算的一些操作内容。编写程序的时候对数进行的二进制运算均可以用在bitset函数上。\n\n\n另外，bitset容器还支持直接取值和直接赋值的操作：具体操作方式如下：\n```cpp\ns[3]=1;\ns[5]=0;\n```\n> 这里要注意：在bitset容器中，最低位为0。这与数组实现仍然有区别。\n\n```cpp\nbitset的运算就像一个普通的整数一样，可以进行与(&)、或(|)、异或(^)、左移(<<)、右移(>>)等操作。\n\n// bitset operators\n#include <iostream>       // std::cout\n#include <string>         // std::string\n#include <bitset>         // std::bitset\n\nint main ()\n{\n  std::bitset<4> foo (std::string(\"1001\"));\n  std::bitset<4> bar (std::string(\"0011\"));\n\n  std::cout << (foo^=bar) << '\\n';       // 1010 (XOR,assign)\n  std::cout << (foo&=bar) << '\\n';       // 0010 (AND,assign)\n  std::cout << (foo|=bar) << '\\n';       // 0011 (OR,assign)\n\n  std::cout << (foo<<=2) << '\\n';        // 1100 (SHL,assign)\n  std::cout << (foo>>=1) << '\\n';        // 0110 (SHR,assign)\n\n  std::cout << (~bar) << '\\n';           // 1100 (NOT)\n  std::cout << (bar<<1) << '\\n';         // 0110 (SHL)\n  std::cout << (bar>>1) << '\\n';         // 0001 (SHR)\n\n  std::cout << (foo==bar) << '\\n';       // false (0110==0011)\n  std::cout << (foo!=bar) << '\\n';       // true  (0110!=0011)\n\n  std::cout << (foo&bar) << '\\n';        // 0010\n  std::cout << (foo|bar) << '\\n';        // 0111\n  std::cout << (foo^bar) << '\\n';        // 0101\n\n  return 0;\n}\n```\n\n\n","source":"_posts/常用位运算.md","raw":"---\ntitle: 常用位运算\ndate: 2021-12-05 13:57:32\ntags:\n    - bit op\n    - c/cpp\n---\n\n\n## 位运算符\n\n* `&` : 对应位都为1时，结果为1\n\n* `|` : 对应位存在一个1时，结果为1\n\n* `^` : 对应位不同时，结果为1\n\n> 异或运算的逆元素是本身, 即两次异或同一个数，结果不变： `a ^ b ^ b = a`\n\n\n* `~` : 对一个数进行单目运算，把这个数的补码中的 0 和 1 全部取反，\n有符号整数的符号位在这 `~` 运算中同样会取反。\n\n> 补码： 在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。\n\n在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。\n\n$$\n5 =(00000101)_2 \\\\\n-5 =(11111010)_2 \\\\\n-5_补 =(11111011)_2 \\\\\n-(-5) =(00000100)_2 = 4\n$$\n\n\n* `<<` 和 `>>` : 将二进制向左（右）移动对应的位数的值，\n\n$$\n11 =(00001011)_2 \\\\\n11 << 3 =(01011000)_2 = 88 \\\\\n11 >> 2 =(00000010)_2 = 2\n$$\n\n> 在 C++ 中，右移操作中右侧多余的位将会被舍弃，而左侧较为复杂：\n> * 对于无符号数，会在左侧补 0；\n> * 对于有符号数，则会用最高位的数（其实就是符号位，非负数为 0，负数为 1）补齐。左移操作总是在右侧补 0。\n\n\n## 复合赋值位运算符\n\n和 `+=` , `-=` 等运算符类似，位运算也有复合赋值运算符： \n`&=` , `|=` , `^=` , `<<=` , `>>=` 。（取反是单目运算，所以没有。）\n\n> 位运算的优先级低于算术运算符（除了取反），而按位与、按位或及异或低于比较运算符，所以使用时需多加注意，在必要时添加括号。\n\n## 应用\n\n* 嵌入式中对寄存器进行按位计算，取值，置位\n\n* 高效地进行某些运算，代替其它低效的方式。\n\n* 表示集合。（常用于 状压 DP 。）\n\n* 要求进行位运算。\n\n### 常用运算\n\n|  操作\t | 运算 |\n|  --   |  -- |\n| 取出整数 n 在二进制表示下的第 k 位\t                |(n >> k) & 1        |   \n| 取出整数n 在二进制表示下的第 0 ~ k - 1 位 (后 k 位)\t | n & ((1 << k) - 1) |   \n| 对整数 n 在二进制表示下的第 k 位取反\t                | n xor (1 << k)      |\n| 对整数 n 在二进制表示下的第 k 位赋值 1\t            | n | (1 << k)        |\n| 对整数 n 在二进制表示下的第 k 位赋值 0\t            | n & (~(1 << k))     |\n\n### 表示集合\n\n| 操作\t | 集合表示  | \t位运算语句 \n| --    |    --   | --   |\n| 交集\t | a∩b\t  | a & b |\n| 并集\t | a∪b\t  | `a    |\n| 补集\t | \\overline{a}\t  | ~a （全集为二进制都是 1） |\n| 差集\t | a∖b\t  | a & (~b) |\n| 对称差 | \ta△b    |   a ^ b |\n\n\n### 实际代码\n\n* 幂运算\n\n```c\n// 乘 2 的非负整数次幂\nint mulPowerOfTwo(int n, int m) {  // 计算 n*(2^m)\n  return n << m;\n}\n\n// 除以 2 的非负整数次幂\nint divPowerOfTwo(int n, int m) {  // 计算 n/(2^m)\n  return n >> m;\n}\n\n// 对 2 的非负整数次幂取模\nint modPowerOfTwo(int x, int mod) { return x & (mod - 1); }\n\n\n// 判断一个数是不是 2 的正整数次幂\nbool isPowerOfTwo(int n) { return n > 0 && (n & (n - 1)) == 0; }\n\n// 取绝对值,在某些机器上，效率比 n > 0 ? n : -n 高。\nint Abs(int n) {\n  return (n ^ (n >> 31)) - (n >> 31);\n  /* n>>31 取得 n 的符号，若 n 为正数，n>>31 等于 0，若 n 为负数，n>>31 等于 -1\n     若 n 为正数 n^0=n, 数不变，若 n 为负数有 n^(-1)\n     需要计算 n 和 -1 的补码，然后进行异或运算，\n     结果 n 变号并且为 n 的绝对值减 1，再减去 -1 就是绝对值 */\n}\n\n// 取两个数的最大/最小值\n// 在某些机器上，效率比 a > b ? a : b 高。\n// 如果 a>=b,(a-b)>>31 为 0，否则为 -1\nint max(int a, int b) { return b & ((a - b) >> 31) | a & (~(a - b) >> 31); }\nint min(int a, int b) { return a & ((a - b) >> 31) | b & (~(a - b) >> 31); }\n\n//判断符号是否相同\nbool isSameSign(int x, int y) {  // 有 0 的情况例外\n  return (x ^ y) >= 0;\n}\n\n// 交换两个数\nvoid swap(int &a, int &b) { a ^= b ^= a ^= b; }\n\n// 获取一个数二进制的某一位\n// 获取 a 的第 b 位，最低位编号为 0\nint getBit(int a, int b) { return (a >> b) & 1; }\n\n```\n\n> 平常写除法是向 0 取整，而这里的右移是向下取整（注意这里的区别）:\n即当数大于等于 0 时两种方法等价，当数小于 0 时会有区别，如： -1 / 2 的值为 0 ，而 -1 >> 1 的值为 −1 。\n\n\n## C++ STL bitset 容器\n\nbitset 容器其实就是个01串。\n可以被看作是一个bool数组。它比bool数组更优秀的优点是：\n* 节约空间\n* 节约时间 \n* 支持基本的位运算。在bitset容器中，8位占一个字节，相比于bool数组4位一个字节的空间利用率要高很多。同时，n位的bitset在执行一次位运算的复杂度可以被看作是n/32，这都是bool数组所没有的优秀性质。\n\n包含在自带的，`bitset` 头文件中：\n\n### bitset 容器的声明\n因为bitset容器就是装01串的，所以不用在`< >`中装数据类型，这和一般的STL容器不太一样。`< >`中装01串的位数。\n\n如：（声明一个105位的bitset）\n\n```cpp\nbitset<100000> s;\n```\n\n### 对bitset容器的一些操作\n\n#### 1、常用的操作函数\n\n和其他的STL容器一样，对bitset的很多操作也是由自带函数来实现的\n\n##### count(), any(), none() \ncount，数数的意思。它的作用是数出1的个数。即s.count()返回s中有多少个1.\n```cpp\ns.count(); // s中有多少个1.\ns.any();   // s中存在0, true, 反之则为false\ns.none();  // s中不存在0， true\n```\n\n##### set(), reset(), flip() \nset()函数的作用是把bitset全部置为1.\n\n特别地，set()函数里面可以传参数。set(u,v)的意思是把bitset中的第u位变成v,v∈0/1。\n```cpp\ns.set(); // 全部置为1\ns.set(u,v); // 第u位变成v,v∈0/1\n\ns.reset(); // 所有位置为0\ns.reset(k); // 第k位变成0\n\ns.flip(); //全部按位取反\ns.flip(k);// 第k位取反\n```\n\n#### 2、位运算操作在bitset中的实现\nbitset的作用就是帮助我们方便地实现位运算的相关操作。它当然支持位运算的一些操作内容。编写程序的时候对数进行的二进制运算均可以用在bitset函数上。\n\n\n另外，bitset容器还支持直接取值和直接赋值的操作：具体操作方式如下：\n```cpp\ns[3]=1;\ns[5]=0;\n```\n> 这里要注意：在bitset容器中，最低位为0。这与数组实现仍然有区别。\n\n```cpp\nbitset的运算就像一个普通的整数一样，可以进行与(&)、或(|)、异或(^)、左移(<<)、右移(>>)等操作。\n\n// bitset operators\n#include <iostream>       // std::cout\n#include <string>         // std::string\n#include <bitset>         // std::bitset\n\nint main ()\n{\n  std::bitset<4> foo (std::string(\"1001\"));\n  std::bitset<4> bar (std::string(\"0011\"));\n\n  std::cout << (foo^=bar) << '\\n';       // 1010 (XOR,assign)\n  std::cout << (foo&=bar) << '\\n';       // 0010 (AND,assign)\n  std::cout << (foo|=bar) << '\\n';       // 0011 (OR,assign)\n\n  std::cout << (foo<<=2) << '\\n';        // 1100 (SHL,assign)\n  std::cout << (foo>>=1) << '\\n';        // 0110 (SHR,assign)\n\n  std::cout << (~bar) << '\\n';           // 1100 (NOT)\n  std::cout << (bar<<1) << '\\n';         // 0110 (SHL)\n  std::cout << (bar>>1) << '\\n';         // 0001 (SHR)\n\n  std::cout << (foo==bar) << '\\n';       // false (0110==0011)\n  std::cout << (foo!=bar) << '\\n';       // true  (0110!=0011)\n\n  std::cout << (foo&bar) << '\\n';        // 0010\n  std::cout << (foo|bar) << '\\n';        // 0111\n  std::cout << (foo^bar) << '\\n';        // 0101\n\n  return 0;\n}\n```\n\n\n","slug":"常用位运算","published":1,"updated":"2021-12-05T07:29:59.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky7fbtvp000rz59y6gu2e2wj","content":"<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><ul>\n<li><p><code>&amp;</code> : 对应位都为1时，结果为1</p>\n</li>\n<li><p><code>|</code> : 对应位存在一个1时，结果为1</p>\n</li>\n<li><p><code>^</code> : 对应位不同时，结果为1</p>\n</li>\n</ul>\n<blockquote>\n<p>异或运算的逆元素是本身, 即两次异或同一个数，结果不变： <code>a ^ b ^ b = a</code></p>\n</blockquote>\n<ul>\n<li><code>~</code> : 对一个数进行单目运算，把这个数的补码中的 0 和 1 全部取反，<br>有符号整数的符号位在这 <code>~</code> 运算中同样会取反。</li>\n</ul>\n<blockquote>\n<p>补码： 在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。</p>\n</blockquote>\n<p>在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。</p>\n<p>$$<br>5 =(00000101)_2 \\<br>-5 =(11111010)_2 \\<br>-5_补 =(11111011)_2 \\<br>-(-5) =(00000100)_2 = 4<br>$$</p>\n<ul>\n<li><code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> : 将二进制向左（右）移动对应的位数的值，</li>\n</ul>\n<p>$$<br>11 =(00001011)_2 \\<br>11 &lt;&lt; 3 =(01011000)_2 = 88 \\<br>11 &gt;&gt; 2 =(00000010)_2 = 2<br>$$</p>\n<blockquote>\n<p>在 C++ 中，右移操作中右侧多余的位将会被舍弃，而左侧较为复杂：</p>\n<ul>\n<li>对于无符号数，会在左侧补 0；</li>\n<li>对于有符号数，则会用最高位的数（其实就是符号位，非负数为 0，负数为 1）补齐。左移操作总是在右侧补 0。</li>\n</ul>\n</blockquote>\n<h2 id=\"复合赋值位运算符\"><a href=\"#复合赋值位运算符\" class=\"headerlink\" title=\"复合赋值位运算符\"></a>复合赋值位运算符</h2><p>和 <code>+=</code> , <code>-=</code> 等运算符类似，位运算也有复合赋值运算符：<br><code>&amp;=</code> , <code>|=</code> , <code>^=</code> , <code>&lt;&lt;=</code> , <code>&gt;&gt;=</code> 。（取反是单目运算，所以没有。）</p>\n<blockquote>\n<p>位运算的优先级低于算术运算符（除了取反），而按位与、按位或及异或低于比较运算符，所以使用时需多加注意，在必要时添加括号。</p>\n</blockquote>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ul>\n<li><p>嵌入式中对寄存器进行按位计算，取值，置位</p>\n</li>\n<li><p>高效地进行某些运算，代替其它低效的方式。</p>\n</li>\n<li><p>表示集合。（常用于 状压 DP 。）</p>\n</li>\n<li><p>要求进行位运算。</p>\n</li>\n</ul>\n<h3 id=\"常用运算\"><a href=\"#常用运算\" class=\"headerlink\" title=\"常用运算\"></a>常用运算</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>运算</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>取出整数 n 在二进制表示下的第 k 位</td>\n<td>(n &gt;&gt; k) &amp; 1</td>\n</tr>\n<tr>\n<td>取出整数n 在二进制表示下的第 0 ~ k - 1 位 (后 k 位)</td>\n<td>n &amp; ((1 &lt;&lt; k) - 1)</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位取反</td>\n<td>n xor (1 &lt;&lt; k)</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位赋值 1</td>\n<td>n</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位赋值 0</td>\n<td>n &amp; (~(1 &lt;&lt; k))</td>\n</tr>\n</tbody></table>\n<h3 id=\"表示集合\"><a href=\"#表示集合\" class=\"headerlink\" title=\"表示集合\"></a>表示集合</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>集合表示</th>\n<th>位运算语句</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>交集</td>\n<td>a∩b</td>\n<td>a &amp; b</td>\n</tr>\n<tr>\n<td>并集</td>\n<td>a∪b</td>\n<td>`a</td>\n</tr>\n<tr>\n<td>补集</td>\n<td>\\overline{a}</td>\n<td>~a （全集为二进制都是 1）</td>\n</tr>\n<tr>\n<td>差集</td>\n<td>a∖b</td>\n<td>a &amp; (~b)</td>\n</tr>\n<tr>\n<td>对称差</td>\n<td>a△b</td>\n<td>a ^ b</td>\n</tr>\n</tbody></table>\n<h3 id=\"实际代码\"><a href=\"#实际代码\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><ul>\n<li>幂运算</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 乘 2 的非负整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mulPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;  <span class=\"comment\">// 计算 n*(2^m)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &lt;&lt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 除以 2 的非负整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">divPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;  <span class=\"comment\">// 计算 n/(2^m)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &gt;&gt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对 2 的非负整数次幂取模</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">modPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> mod)</span> </span>&#123; <span class=\"keyword\">return</span> x &amp; (mod - <span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断一个数是不是 2 的正整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123; <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; (n &amp; (n - <span class=\"number\">1</span>)) == <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取绝对值,在某些机器上，效率比 n &gt; 0 ? n : -n 高。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Abs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (n ^ (n &gt;&gt; <span class=\"number\">31</span>)) - (n &gt;&gt; <span class=\"number\">31</span>);</span><br><span class=\"line\">  <span class=\"comment\">/* n&gt;&gt;31 取得 n 的符号，若 n 为正数，n&gt;&gt;31 等于 0，若 n 为负数，n&gt;&gt;31 等于 -1</span></span><br><span class=\"line\"><span class=\"comment\">     若 n 为正数 n^0=n, 数不变，若 n 为负数有 n^(-1)</span></span><br><span class=\"line\"><span class=\"comment\">     需要计算 n 和 -1 的补码，然后进行异或运算，</span></span><br><span class=\"line\"><span class=\"comment\">     结果 n 变号并且为 n 的绝对值减 1，再减去 -1 就是绝对值 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取两个数的最大/最小值</span></span><br><span class=\"line\"><span class=\"comment\">// 在某些机器上，效率比 a &gt; b ? a : b 高。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 a&gt;=b,(a-b)&gt;&gt;31 为 0，否则为 -1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> b &amp; ((a - b) &gt;&gt; <span class=\"number\">31</span>) | a &amp; (~(a - b) &gt;&gt; <span class=\"number\">31</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> a &amp; ((a - b) &gt;&gt; <span class=\"number\">31</span>) | b &amp; (~(a - b) &gt;&gt; <span class=\"number\">31</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断符号是否相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isSameSign</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;  <span class=\"comment\">// 有 0 的情况例外</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x ^ y) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交换两个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; a ^= b ^= a ^= b; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个数二进制的某一位</span></span><br><span class=\"line\"><span class=\"comment\">// 获取 a 的第 b 位，最低位编号为 0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getBit</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> (a &gt;&gt; b) &amp; <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>平常写除法是向 0 取整，而这里的右移是向下取整（注意这里的区别）:<br>即当数大于等于 0 时两种方法等价，当数小于 0 时会有区别，如： -1 / 2 的值为 0 ，而 -1 &gt;&gt; 1 的值为 −1 。</p>\n</blockquote>\n<h2 id=\"C-STL-bitset-容器\"><a href=\"#C-STL-bitset-容器\" class=\"headerlink\" title=\"C++ STL bitset 容器\"></a>C++ STL bitset 容器</h2><p>bitset 容器其实就是个01串。<br>可以被看作是一个bool数组。它比bool数组更优秀的优点是：</p>\n<ul>\n<li>节约空间</li>\n<li>节约时间 </li>\n<li>支持基本的位运算。在bitset容器中，8位占一个字节，相比于bool数组4位一个字节的空间利用率要高很多。同时，n位的bitset在执行一次位运算的复杂度可以被看作是n/32，这都是bool数组所没有的优秀性质。</li>\n</ul>\n<p>包含在自带的，<code>bitset</code> 头文件中：</p>\n<h3 id=\"bitset-容器的声明\"><a href=\"#bitset-容器的声明\" class=\"headerlink\" title=\"bitset 容器的声明\"></a>bitset 容器的声明</h3><p>因为bitset容器就是装01串的，所以不用在<code>&lt; &gt;</code>中装数据类型，这和一般的STL容器不太一样。<code>&lt; &gt;</code>中装01串的位数。</p>\n<p>如：（声明一个105位的bitset）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitset&lt;100000&gt; s;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对bitset容器的一些操作\"><a href=\"#对bitset容器的一些操作\" class=\"headerlink\" title=\"对bitset容器的一些操作\"></a>对bitset容器的一些操作</h3><h4 id=\"1、常用的操作函数\"><a href=\"#1、常用的操作函数\" class=\"headerlink\" title=\"1、常用的操作函数\"></a>1、常用的操作函数</h4><p>和其他的STL容器一样，对bitset的很多操作也是由自带函数来实现的</p>\n<h5 id=\"count-any-none\"><a href=\"#count-any-none\" class=\"headerlink\" title=\"count(), any(), none()\"></a>count(), any(), none()</h5><p>count，数数的意思。它的作用是数出1的个数。即s.count()返回s中有多少个1.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">count</span>(); <span class=\"comment\">// s中有多少个1.</span></span><br><span class=\"line\">s.<span class=\"built_in\">any</span>();   <span class=\"comment\">// s中存在0, true, 反之则为false</span></span><br><span class=\"line\">s.<span class=\"built_in\">none</span>();  <span class=\"comment\">// s中不存在0， true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"set-reset-flip\"><a href=\"#set-reset-flip\" class=\"headerlink\" title=\"set(), reset(), flip()\"></a>set(), reset(), flip()</h5><p>set()函数的作用是把bitset全部置为1.</p>\n<p>特别地，set()函数里面可以传参数。set(u,v)的意思是把bitset中的第u位变成v,v∈0/1。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">set</span>(); <span class=\"comment\">// 全部置为1</span></span><br><span class=\"line\">s.<span class=\"built_in\">set</span>(u,v); <span class=\"comment\">// 第u位变成v,v∈0/1</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">reset</span>(); <span class=\"comment\">// 所有位置为0</span></span><br><span class=\"line\">s.<span class=\"built_in\">reset</span>(k); <span class=\"comment\">// 第k位变成0</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">flip</span>(); <span class=\"comment\">//全部按位取反</span></span><br><span class=\"line\">s.<span class=\"built_in\">flip</span>(k);<span class=\"comment\">// 第k位取反</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、位运算操作在bitset中的实现\"><a href=\"#2、位运算操作在bitset中的实现\" class=\"headerlink\" title=\"2、位运算操作在bitset中的实现\"></a>2、位运算操作在bitset中的实现</h4><p>bitset的作用就是帮助我们方便地实现位运算的相关操作。它当然支持位运算的一些操作内容。编写程序的时候对数进行的二进制运算均可以用在bitset函数上。</p>\n<p>另外，bitset容器还支持直接取值和直接赋值的操作：具体操作方式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s[<span class=\"number\">3</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">s[<span class=\"number\">5</span>]=<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里要注意：在bitset容器中，最低位为0。这与数组实现仍然有区别。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitset的运算就像一个普通的整数一样，可以进行与(&amp;)、或(|)、异或(^)、左移(&lt;&lt;)、右移(&gt;&gt;)等操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bitset operators</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span>       <span class=\"comment\">// std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span>         <span class=\"comment\">// std::string</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span>         <span class=\"comment\">// std::bitset</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::bitset&lt;4&gt; <span class=\"title\">foo</span> <span class=\"params\">(std::string(<span class=\"string\">&quot;1001&quot;</span>))</span></span>;</span><br><span class=\"line\">  <span class=\"function\">std::bitset&lt;4&gt; <span class=\"title\">bar</span> <span class=\"params\">(std::string(<span class=\"string\">&quot;0011&quot;</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo^=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 1010 (XOR,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&amp;=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 0010 (AND,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo|=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 0011 (OR,assign)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&lt;&lt;=<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 1100 (SHL,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&gt;&gt;=<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0110 (SHR,assign)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (~bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;           <span class=\"comment\">// 1100 (NOT)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (bar&lt;&lt;<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;         <span class=\"comment\">// 0110 (SHL)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (bar&gt;&gt;<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;         <span class=\"comment\">// 0001 (SHR)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo==bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// false (0110==0011)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo!=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// true  (0110!=0011)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&amp;bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0010</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo|bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0111</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo^bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0101</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><ul>\n<li><p><code>&amp;</code> : 对应位都为1时，结果为1</p>\n</li>\n<li><p><code>|</code> : 对应位存在一个1时，结果为1</p>\n</li>\n<li><p><code>^</code> : 对应位不同时，结果为1</p>\n</li>\n</ul>\n<blockquote>\n<p>异或运算的逆元素是本身, 即两次异或同一个数，结果不变： <code>a ^ b ^ b = a</code></p>\n</blockquote>\n<ul>\n<li><code>~</code> : 对一个数进行单目运算，把这个数的补码中的 0 和 1 全部取反，<br>有符号整数的符号位在这 <code>~</code> 运算中同样会取反。</li>\n</ul>\n<blockquote>\n<p>补码： 在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。</p>\n</blockquote>\n<p>在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。</p>\n<p>$$<br>5 =(00000101)_2 \\<br>-5 =(11111010)_2 \\<br>-5_补 =(11111011)_2 \\<br>-(-5) =(00000100)_2 = 4<br>$$</p>\n<ul>\n<li><code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> : 将二进制向左（右）移动对应的位数的值，</li>\n</ul>\n<p>$$<br>11 =(00001011)_2 \\<br>11 &lt;&lt; 3 =(01011000)_2 = 88 \\<br>11 &gt;&gt; 2 =(00000010)_2 = 2<br>$$</p>\n<blockquote>\n<p>在 C++ 中，右移操作中右侧多余的位将会被舍弃，而左侧较为复杂：</p>\n<ul>\n<li>对于无符号数，会在左侧补 0；</li>\n<li>对于有符号数，则会用最高位的数（其实就是符号位，非负数为 0，负数为 1）补齐。左移操作总是在右侧补 0。</li>\n</ul>\n</blockquote>\n<h2 id=\"复合赋值位运算符\"><a href=\"#复合赋值位运算符\" class=\"headerlink\" title=\"复合赋值位运算符\"></a>复合赋值位运算符</h2><p>和 <code>+=</code> , <code>-=</code> 等运算符类似，位运算也有复合赋值运算符：<br><code>&amp;=</code> , <code>|=</code> , <code>^=</code> , <code>&lt;&lt;=</code> , <code>&gt;&gt;=</code> 。（取反是单目运算，所以没有。）</p>\n<blockquote>\n<p>位运算的优先级低于算术运算符（除了取反），而按位与、按位或及异或低于比较运算符，所以使用时需多加注意，在必要时添加括号。</p>\n</blockquote>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ul>\n<li><p>嵌入式中对寄存器进行按位计算，取值，置位</p>\n</li>\n<li><p>高效地进行某些运算，代替其它低效的方式。</p>\n</li>\n<li><p>表示集合。（常用于 状压 DP 。）</p>\n</li>\n<li><p>要求进行位运算。</p>\n</li>\n</ul>\n<h3 id=\"常用运算\"><a href=\"#常用运算\" class=\"headerlink\" title=\"常用运算\"></a>常用运算</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>运算</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>取出整数 n 在二进制表示下的第 k 位</td>\n<td>(n &gt;&gt; k) &amp; 1</td>\n</tr>\n<tr>\n<td>取出整数n 在二进制表示下的第 0 ~ k - 1 位 (后 k 位)</td>\n<td>n &amp; ((1 &lt;&lt; k) - 1)</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位取反</td>\n<td>n xor (1 &lt;&lt; k)</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位赋值 1</td>\n<td>n</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位赋值 0</td>\n<td>n &amp; (~(1 &lt;&lt; k))</td>\n</tr>\n</tbody></table>\n<h3 id=\"表示集合\"><a href=\"#表示集合\" class=\"headerlink\" title=\"表示集合\"></a>表示集合</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>集合表示</th>\n<th>位运算语句</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>交集</td>\n<td>a∩b</td>\n<td>a &amp; b</td>\n</tr>\n<tr>\n<td>并集</td>\n<td>a∪b</td>\n<td>`a</td>\n</tr>\n<tr>\n<td>补集</td>\n<td>\\overline{a}</td>\n<td>~a （全集为二进制都是 1）</td>\n</tr>\n<tr>\n<td>差集</td>\n<td>a∖b</td>\n<td>a &amp; (~b)</td>\n</tr>\n<tr>\n<td>对称差</td>\n<td>a△b</td>\n<td>a ^ b</td>\n</tr>\n</tbody></table>\n<h3 id=\"实际代码\"><a href=\"#实际代码\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><ul>\n<li>幂运算</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 乘 2 的非负整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mulPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;  <span class=\"comment\">// 计算 n*(2^m)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &lt;&lt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 除以 2 的非负整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">divPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;  <span class=\"comment\">// 计算 n/(2^m)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &gt;&gt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对 2 的非负整数次幂取模</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">modPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> mod)</span> </span>&#123; <span class=\"keyword\">return</span> x &amp; (mod - <span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断一个数是不是 2 的正整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123; <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; (n &amp; (n - <span class=\"number\">1</span>)) == <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取绝对值,在某些机器上，效率比 n &gt; 0 ? n : -n 高。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Abs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (n ^ (n &gt;&gt; <span class=\"number\">31</span>)) - (n &gt;&gt; <span class=\"number\">31</span>);</span><br><span class=\"line\">  <span class=\"comment\">/* n&gt;&gt;31 取得 n 的符号，若 n 为正数，n&gt;&gt;31 等于 0，若 n 为负数，n&gt;&gt;31 等于 -1</span></span><br><span class=\"line\"><span class=\"comment\">     若 n 为正数 n^0=n, 数不变，若 n 为负数有 n^(-1)</span></span><br><span class=\"line\"><span class=\"comment\">     需要计算 n 和 -1 的补码，然后进行异或运算，</span></span><br><span class=\"line\"><span class=\"comment\">     结果 n 变号并且为 n 的绝对值减 1，再减去 -1 就是绝对值 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取两个数的最大/最小值</span></span><br><span class=\"line\"><span class=\"comment\">// 在某些机器上，效率比 a &gt; b ? a : b 高。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 a&gt;=b,(a-b)&gt;&gt;31 为 0，否则为 -1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> b &amp; ((a - b) &gt;&gt; <span class=\"number\">31</span>) | a &amp; (~(a - b) &gt;&gt; <span class=\"number\">31</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> a &amp; ((a - b) &gt;&gt; <span class=\"number\">31</span>) | b &amp; (~(a - b) &gt;&gt; <span class=\"number\">31</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断符号是否相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isSameSign</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;  <span class=\"comment\">// 有 0 的情况例外</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x ^ y) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交换两个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; a ^= b ^= a ^= b; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个数二进制的某一位</span></span><br><span class=\"line\"><span class=\"comment\">// 获取 a 的第 b 位，最低位编号为 0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getBit</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> (a &gt;&gt; b) &amp; <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>平常写除法是向 0 取整，而这里的右移是向下取整（注意这里的区别）:<br>即当数大于等于 0 时两种方法等价，当数小于 0 时会有区别，如： -1 / 2 的值为 0 ，而 -1 &gt;&gt; 1 的值为 −1 。</p>\n</blockquote>\n<h2 id=\"C-STL-bitset-容器\"><a href=\"#C-STL-bitset-容器\" class=\"headerlink\" title=\"C++ STL bitset 容器\"></a>C++ STL bitset 容器</h2><p>bitset 容器其实就是个01串。<br>可以被看作是一个bool数组。它比bool数组更优秀的优点是：</p>\n<ul>\n<li>节约空间</li>\n<li>节约时间 </li>\n<li>支持基本的位运算。在bitset容器中，8位占一个字节，相比于bool数组4位一个字节的空间利用率要高很多。同时，n位的bitset在执行一次位运算的复杂度可以被看作是n/32，这都是bool数组所没有的优秀性质。</li>\n</ul>\n<p>包含在自带的，<code>bitset</code> 头文件中：</p>\n<h3 id=\"bitset-容器的声明\"><a href=\"#bitset-容器的声明\" class=\"headerlink\" title=\"bitset 容器的声明\"></a>bitset 容器的声明</h3><p>因为bitset容器就是装01串的，所以不用在<code>&lt; &gt;</code>中装数据类型，这和一般的STL容器不太一样。<code>&lt; &gt;</code>中装01串的位数。</p>\n<p>如：（声明一个105位的bitset）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitset&lt;100000&gt; s;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对bitset容器的一些操作\"><a href=\"#对bitset容器的一些操作\" class=\"headerlink\" title=\"对bitset容器的一些操作\"></a>对bitset容器的一些操作</h3><h4 id=\"1、常用的操作函数\"><a href=\"#1、常用的操作函数\" class=\"headerlink\" title=\"1、常用的操作函数\"></a>1、常用的操作函数</h4><p>和其他的STL容器一样，对bitset的很多操作也是由自带函数来实现的</p>\n<h5 id=\"count-any-none\"><a href=\"#count-any-none\" class=\"headerlink\" title=\"count(), any(), none()\"></a>count(), any(), none()</h5><p>count，数数的意思。它的作用是数出1的个数。即s.count()返回s中有多少个1.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">count</span>(); <span class=\"comment\">// s中有多少个1.</span></span><br><span class=\"line\">s.<span class=\"built_in\">any</span>();   <span class=\"comment\">// s中存在0, true, 反之则为false</span></span><br><span class=\"line\">s.<span class=\"built_in\">none</span>();  <span class=\"comment\">// s中不存在0， true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"set-reset-flip\"><a href=\"#set-reset-flip\" class=\"headerlink\" title=\"set(), reset(), flip()\"></a>set(), reset(), flip()</h5><p>set()函数的作用是把bitset全部置为1.</p>\n<p>特别地，set()函数里面可以传参数。set(u,v)的意思是把bitset中的第u位变成v,v∈0/1。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">set</span>(); <span class=\"comment\">// 全部置为1</span></span><br><span class=\"line\">s.<span class=\"built_in\">set</span>(u,v); <span class=\"comment\">// 第u位变成v,v∈0/1</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">reset</span>(); <span class=\"comment\">// 所有位置为0</span></span><br><span class=\"line\">s.<span class=\"built_in\">reset</span>(k); <span class=\"comment\">// 第k位变成0</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">flip</span>(); <span class=\"comment\">//全部按位取反</span></span><br><span class=\"line\">s.<span class=\"built_in\">flip</span>(k);<span class=\"comment\">// 第k位取反</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、位运算操作在bitset中的实现\"><a href=\"#2、位运算操作在bitset中的实现\" class=\"headerlink\" title=\"2、位运算操作在bitset中的实现\"></a>2、位运算操作在bitset中的实现</h4><p>bitset的作用就是帮助我们方便地实现位运算的相关操作。它当然支持位运算的一些操作内容。编写程序的时候对数进行的二进制运算均可以用在bitset函数上。</p>\n<p>另外，bitset容器还支持直接取值和直接赋值的操作：具体操作方式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s[<span class=\"number\">3</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">s[<span class=\"number\">5</span>]=<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里要注意：在bitset容器中，最低位为0。这与数组实现仍然有区别。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitset的运算就像一个普通的整数一样，可以进行与(&amp;)、或(|)、异或(^)、左移(&lt;&lt;)、右移(&gt;&gt;)等操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bitset operators</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span>       <span class=\"comment\">// std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span>         <span class=\"comment\">// std::string</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span>         <span class=\"comment\">// std::bitset</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::bitset&lt;4&gt; <span class=\"title\">foo</span> <span class=\"params\">(std::string(<span class=\"string\">&quot;1001&quot;</span>))</span></span>;</span><br><span class=\"line\">  <span class=\"function\">std::bitset&lt;4&gt; <span class=\"title\">bar</span> <span class=\"params\">(std::string(<span class=\"string\">&quot;0011&quot;</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo^=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 1010 (XOR,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&amp;=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 0010 (AND,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo|=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 0011 (OR,assign)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&lt;&lt;=<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 1100 (SHL,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&gt;&gt;=<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0110 (SHR,assign)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (~bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;           <span class=\"comment\">// 1100 (NOT)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (bar&lt;&lt;<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;         <span class=\"comment\">// 0110 (SHL)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (bar&gt;&gt;<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;         <span class=\"comment\">// 0001 (SHR)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo==bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// false (0110==0011)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo!=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// true  (0110!=0011)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&amp;bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0010</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo|bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0111</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo^bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0101</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cky7fbtvc0006z59y2qhsb55m","category_id":"cky7fbtve0009z59y4vxmf98t","_id":"cky7fbtvm000mz59y97nzcd3w"},{"post_id":"cky7fbtvc0007z59yg17bh7v9","category_id":"cky7fbtve0009z59y4vxmf98t","_id":"cky7fbtvp000qz59y1mj32d8w"},{"post_id":"cky7fbtvg000cz59yegju8mfu","category_id":"cky7fbtvm000lz59y1of13xgr","_id":"cky7fbtvq000tz59yhogo6iu4"}],"PostTag":[{"post_id":"cky7fbtvc0007z59yg17bh7v9","tag_id":"cky7fbtv90004z59y9g1m9hm5","_id":"cky7fbtvf000bz59yfg4kelue"},{"post_id":"cky7fbtv50001z59y8teb8ob9","tag_id":"cky7fbtv90004z59y9g1m9hm5","_id":"cky7fbtvj000gz59yhb315tkz"},{"post_id":"cky7fbtv50001z59y8teb8ob9","tag_id":"cky7fbtvd0008z59ygl995zc2","_id":"cky7fbtvk000iz59y857sawdz"},{"post_id":"cky7fbtv70003z59ya9y7dcup","tag_id":"cky7fbtv90004z59y9g1m9hm5","_id":"cky7fbtvr000vz59y0j9585ig"},{"post_id":"cky7fbtv70003z59ya9y7dcup","tag_id":"cky7fbtvk000jz59yau33809f","_id":"cky7fbtvr000wz59y9hee4xg0"},{"post_id":"cky7fbtv70003z59ya9y7dcup","tag_id":"cky7fbtvo000oz59y39pk9dlh","_id":"cky7fbtvr000yz59y5dfx4ao5"},{"post_id":"cky7fbtv70003z59ya9y7dcup","tag_id":"cky7fbtvq000sz59y53uxgxyj","_id":"cky7fbtvr000zz59ygsavb016"},{"post_id":"cky7fbtva0005z59y7i3j5iz0","tag_id":"cky7fbtvq000uz59yer0u1man","_id":"cky7fbtvs0011z59y08ga4wj9"},{"post_id":"cky7fbtvc0006z59y2qhsb55m","tag_id":"cky7fbtv90004z59y9g1m9hm5","_id":"cky7fbtvs0012z59y0criezpe"},{"post_id":"cky7fbtvc0006z59y2qhsb55m","tag_id":"cky7fbtvk000jz59yau33809f","_id":"cky7fbtvs0014z59y7cv7ah1w"},{"post_id":"cky7fbtvf000az59y096v7hbk","tag_id":"cky7fbtvr0010z59y71qe3a7g","_id":"cky7fbtvt0017z59ybh7f2zae"},{"post_id":"cky7fbtvf000az59y096v7hbk","tag_id":"cky7fbtvs0013z59y72xmcbqt","_id":"cky7fbtvt0018z59y88g6d6qb"},{"post_id":"cky7fbtvf000az59y096v7hbk","tag_id":"cky7fbtvt0015z59y24wg3p0o","_id":"cky7fbtvt001az59y8yzch1yj"},{"post_id":"cky7fbtvg000cz59yegju8mfu","tag_id":"cky7fbtvt0016z59yb0hehzsz","_id":"cky7fbtvu001cz59yfdg2ant9"},{"post_id":"cky7fbtvg000cz59yegju8mfu","tag_id":"cky7fbtvt0019z59yg1d3ejbk","_id":"cky7fbtvu001dz59y9an5aocw"},{"post_id":"cky7fbtvi000ez59yd3cxgd51","tag_id":"cky7fbtvu001bz59yhz110i7j","_id":"cky7fbtvv001gz59y4mni2iwy"},{"post_id":"cky7fbtvi000ez59yd3cxgd51","tag_id":"cky7fbtvu001ez59y66zf38ng","_id":"cky7fbtvv001hz59y3g2x65ly"},{"post_id":"cky7fbtvj000hz59y6atq73pa","tag_id":"cky7fbtvu001bz59yhz110i7j","_id":"cky7fbtvv001kz59y8cs94o09"},{"post_id":"cky7fbtvj000hz59y6atq73pa","tag_id":"cky7fbtvu001ez59y66zf38ng","_id":"cky7fbtvv001lz59y8hpk8q8a"},{"post_id":"cky7fbtvl000kz59y6q0m0192","tag_id":"cky7fbtvu001bz59yhz110i7j","_id":"cky7fbtvw001oz59y7pid3zmh"},{"post_id":"cky7fbtvl000kz59y6q0m0192","tag_id":"cky7fbtvu001ez59y66zf38ng","_id":"cky7fbtvw001pz59y1sumc2r4"},{"post_id":"cky7fbtvn000nz59y9xaw3h83","tag_id":"cky7fbtvw001nz59yhih86f6f","_id":"cky7fbtvx001uz59y9vw51tat"},{"post_id":"cky7fbtvn000nz59y9xaw3h83","tag_id":"cky7fbtvw001qz59y2y0l976t","_id":"cky7fbtvx001vz59y99rie7ic"},{"post_id":"cky7fbtvn000nz59y9xaw3h83","tag_id":"cky7fbtvw001rz59y6ias8uq3","_id":"cky7fbtvx001xz59y04wb0ofa"},{"post_id":"cky7fbtvn000nz59y9xaw3h83","tag_id":"cky7fbtvw001sz59y7otu7qfg","_id":"cky7fbtvx001yz59y4a0eejnx"},{"post_id":"cky7fbtvo000pz59y7kg5bpkb","tag_id":"cky7fbtvw001tz59y5m4ndgo0","_id":"cky7fbtvx0020z59ydvxvhani"},{"post_id":"cky7fbtvp000rz59y6gu2e2wj","tag_id":"cky7fbtvx001wz59y32z74t7y","_id":"cky7fbtvy0021z59y6f36ev6h"},{"post_id":"cky7fbtvp000rz59y6gu2e2wj","tag_id":"cky7fbtvx001zz59y4xbgeh7a","_id":"cky7fbtvy0022z59yh1yc4wwa"}],"Tag":[{"name":"Linux","_id":"cky7fbtv90004z59y9g1m9hm5"},{"name":"gdb","_id":"cky7fbtvd0008z59ygl995zc2"},{"name":"C","_id":"cky7fbtvk000jz59yau33809f"},{"name":"Memory","_id":"cky7fbtvo000oz59y39pk9dlh"},{"name":"Notes","_id":"cky7fbtvq000sz59y53uxgxyj"},{"name":"adb","_id":"cky7fbtvq000uz59yer0u1man"},{"name":"osi","_id":"cky7fbtvr0010z59y71qe3a7g"},{"name":"phy","_id":"cky7fbtvs0013z59y72xmcbqt"},{"name":"mac","_id":"cky7fbtvt0015z59y24wg3p0o"},{"name":"someip-sd","_id":"cky7fbtvt0016z59yb0hehzsz"},{"name":"service discovery","_id":"cky7fbtvt0019z59yg1d3ejbk"},{"name":"someip","_id":"cky7fbtvu001bz59yhz110i7j"},{"name":"vSOMEIP","_id":"cky7fbtvu001ez59y66zf38ng"},{"name":"CPP","_id":"cky7fbtvw001nz59yhih86f6f"},{"name":"SOMEIP","_id":"cky7fbtvw001qz59y2y0l976t"},{"name":"sources","_id":"cky7fbtvw001rz59y6ias8uq3"},{"name":"notes","_id":"cky7fbtvw001sz59y7otu7qfg"},{"name":"cpp","_id":"cky7fbtvw001tz59y5m4ndgo0"},{"name":"bit op","_id":"cky7fbtvx001wz59y32z74t7y"},{"name":"c/cpp","_id":"cky7fbtvx001zz59y4xbgeh7a"}]}}